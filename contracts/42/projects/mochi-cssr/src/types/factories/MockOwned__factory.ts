/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockOwned, MockOwnedInterface } from "../MockOwned";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600080546001600160a01b031916331790556068806100306000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635aa6e67514602d575b600080fd5b600054603f906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f3fea164736f6c6343000807000a";

export class MockOwned__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockOwned> {
    return super.deploy(overrides || {}) as Promise<MockOwned>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockOwned {
    return super.attach(address) as MockOwned;
  }
  connect(signer: Signer): MockOwned__factory {
    return super.connect(signer) as MockOwned__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOwnedInterface {
    return new utils.Interface(_abi) as MockOwnedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOwned {
    return new Contract(address, _abi, signerOrProvider) as MockOwned;
  }
}
