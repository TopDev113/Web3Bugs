/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FeePoolV0Interface extends ethers.utils.Interface {
  functions: {
    "changeTreasuryRatio(uint256)": FunctionFragment;
    "changecrvVoterRewardPool(address)": FunctionFragment;
    "changevMochiRatio(uint256)": FunctionFragment;
    "crvVoterRewardPool()": FunctionFragment;
    "distributeMochi()": FunctionFragment;
    "engine()": FunctionFragment;
    "mochiShare()": FunctionFragment;
    "sendToTreasury()": FunctionFragment;
    "treasuryRatio()": FunctionFragment;
    "treasuryShare()": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "updateReserve()": FunctionFragment;
    "vMochiRatio()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeTreasuryRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changecrvVoterRewardPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changevMochiRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crvVoterRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeMochi",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mochiShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendToTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vMochiRatio",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeTreasuryRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changecrvVoterRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changevMochiRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crvVoterRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeMochi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mochiShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vMochiRatio",
    data: BytesLike
  ): Result;

  events: {};
}

export class FeePoolV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeePoolV0Interface;

  functions: {
    changeTreasuryRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changecrvVoterRewardPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changevMochiRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crvVoterRewardPool(overrides?: CallOverrides): Promise<[string]>;

    distributeMochi(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    engine(overrides?: CallOverrides): Promise<[string]>;

    mochiShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    updateReserve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vMochiRatio(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  changeTreasuryRatio(
    _ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changecrvVoterRewardPool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changevMochiRatio(
    _ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crvVoterRewardPool(overrides?: CallOverrides): Promise<string>;

  distributeMochi(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  engine(overrides?: CallOverrides): Promise<string>;

  mochiShare(overrides?: CallOverrides): Promise<BigNumber>;

  sendToTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryRatio(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryShare(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  updateReserve(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vMochiRatio(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    changeTreasuryRatio(
      _ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changecrvVoterRewardPool(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changevMochiRatio(
      _ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    crvVoterRewardPool(overrides?: CallOverrides): Promise<string>;

    distributeMochi(overrides?: CallOverrides): Promise<void>;

    engine(overrides?: CallOverrides): Promise<string>;

    mochiShare(overrides?: CallOverrides): Promise<BigNumber>;

    sendToTreasury(overrides?: CallOverrides): Promise<void>;

    treasuryRatio(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryShare(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    updateReserve(overrides?: CallOverrides): Promise<void>;

    vMochiRatio(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    changeTreasuryRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changecrvVoterRewardPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changevMochiRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crvVoterRewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    distributeMochi(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<BigNumber>;

    mochiShare(overrides?: CallOverrides): Promise<BigNumber>;

    sendToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryRatio(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryShare(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    updateReserve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vMochiRatio(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeTreasuryRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changecrvVoterRewardPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changevMochiRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crvVoterRewardPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeMochi(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    engine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mochiShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateReserve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vMochiRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
