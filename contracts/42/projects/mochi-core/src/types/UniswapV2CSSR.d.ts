/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UniswapV2CSSRInterface extends ethers.utils.Interface {
  functions: {
    "WINDOW_SIZE()": FunctionFragment;
    "blockState(uint256)": FunctionFragment;
    "getExchangeRatio(address,address)": FunctionFragment;
    "getLiquidity(address,address)": FunctionFragment;
    "observedData(uint256,address)": FunctionFragment;
    "reserveTimestampSlotHash()": FunctionFragment;
    "saveReserve(uint256,address,bytes,bytes,bytes,bytes)": FunctionFragment;
    "saveState(bytes)": FunctionFragment;
    "token0Slot()": FunctionFragment;
    "token1Slot()": FunctionFragment;
    "uniswapFactory()": FunctionFragment;
    "window(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "WINDOW_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRatio",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "observedData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTimestampSlotHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveReserve",
    values: [BigNumberish, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "saveState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "token0Slot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token1Slot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "window",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "WINDOW_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "observedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTimestampSlotHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saveState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0Slot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1Slot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "window", data: BytesLike): Result;

  events: {};
}

export class UniswapV2CSSR extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapV2CSSRInterface;

  functions: {
    WINDOW_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockState(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { blockTimestamp: BigNumber; stateRoot: string }
    >;

    getExchangeRatio(
      token: string,
      denominator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiquidity(
      token: string,
      denominator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    observedData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserveTimestamp: number;
        reserve0: BigNumber;
        reserve1: BigNumber;
        price0Data: BigNumber;
        price1Data: BigNumber;
      }
    >;

    reserveTimestampSlotHash(overrides?: CallOverrides): Promise<[string]>;

    saveReserve(
      blockNumber: BigNumberish,
      pair: string,
      accountProof: BytesLike,
      reserveProof: BytesLike,
      price0Proof: BytesLike,
      price1Proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saveState(
      blockData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token0Slot(overrides?: CallOverrides): Promise<[string]>;

    token1Slot(overrides?: CallOverrides): Promise<[string]>;

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>;

    window(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { from: BigNumber; to: BigNumber }>;
  };

  WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  blockState(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { blockTimestamp: BigNumber; stateRoot: string }
  >;

  getExchangeRatio(
    token: string,
    denominator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidity(
    token: string,
    denominator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  observedData(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      reserveTimestamp: number;
      reserve0: BigNumber;
      reserve1: BigNumber;
      price0Data: BigNumber;
      price1Data: BigNumber;
    }
  >;

  reserveTimestampSlotHash(overrides?: CallOverrides): Promise<string>;

  saveReserve(
    blockNumber: BigNumberish,
    pair: string,
    accountProof: BytesLike,
    reserveProof: BytesLike,
    price0Proof: BytesLike,
    price1Proof: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saveState(
    blockData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token0Slot(overrides?: CallOverrides): Promise<string>;

  token1Slot(overrides?: CallOverrides): Promise<string>;

  uniswapFactory(overrides?: CallOverrides): Promise<string>;

  window(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { from: BigNumber; to: BigNumber }>;

  callStatic: {
    WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    blockState(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { blockTimestamp: BigNumber; stateRoot: string }
    >;

    getExchangeRatio(
      token: string,
      denominator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidity(
      token: string,
      denominator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    observedData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserveTimestamp: number;
        reserve0: BigNumber;
        reserve1: BigNumber;
        price0Data: BigNumber;
        price1Data: BigNumber;
      }
    >;

    reserveTimestampSlotHash(overrides?: CallOverrides): Promise<string>;

    saveReserve(
      blockNumber: BigNumberish,
      pair: string,
      accountProof: BytesLike,
      reserveProof: BytesLike,
      price0Proof: BytesLike,
      price1Proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reserveTimestamp: number;
        reserve0: BigNumber;
        reserve1: BigNumber;
        price0Data: BigNumber;
        price1Data: BigNumber;
      }
    >;

    saveState(
      blockData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        stateRoot: string;
        blockNumber: BigNumber;
        blockTimestamp: BigNumber;
      }
    >;

    token0Slot(overrides?: CallOverrides): Promise<string>;

    token1Slot(overrides?: CallOverrides): Promise<string>;

    uniswapFactory(overrides?: CallOverrides): Promise<string>;

    window(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { from: BigNumber; to: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    blockState(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangeRatio(
      token: string,
      denominator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidity(
      token: string,
      denominator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    observedData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTimestampSlotHash(overrides?: CallOverrides): Promise<BigNumber>;

    saveReserve(
      blockNumber: BigNumberish,
      pair: string,
      accountProof: BytesLike,
      reserveProof: BytesLike,
      price0Proof: BytesLike,
      price1Proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saveState(
      blockData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token0Slot(overrides?: CallOverrides): Promise<BigNumber>;

    token1Slot(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    window(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    WINDOW_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockState(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeRatio(
      token: string,
      denominator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      token: string,
      denominator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    observedData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveTimestampSlotHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saveReserve(
      blockNumber: BigNumberish,
      pair: string,
      accountProof: BytesLike,
      reserveProof: BytesLike,
      price0Proof: BytesLike,
      price1Proof: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saveState(
      blockData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token0Slot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1Slot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    window(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
