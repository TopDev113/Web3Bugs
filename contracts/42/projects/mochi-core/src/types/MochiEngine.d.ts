/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MochiEngineInterface extends ethers.utils.Interface {
  functions: {
    "changeCSSR(address)": FunctionFragment;
    "changeDiscountProfile(address)": FunctionFragment;
    "changeFeePool(address)": FunctionFragment;
    "changeGovernance(address)": FunctionFragment;
    "changeLiquidator(address)": FunctionFragment;
    "changeMinter(address)": FunctionFragment;
    "changeMochi(address)": FunctionFragment;
    "changeNFT(address)": FunctionFragment;
    "changeOperationWallet(address)": FunctionFragment;
    "changeProfile(address)": FunctionFragment;
    "changeReferralFeePool(address)": FunctionFragment;
    "changeTreasury(address)": FunctionFragment;
    "changeUSDM(address)": FunctionFragment;
    "changeVMochi(address)": FunctionFragment;
    "cssr()": FunctionFragment;
    "discountProfile()": FunctionFragment;
    "feePool()": FunctionFragment;
    "governance()": FunctionFragment;
    "liquidator()": FunctionFragment;
    "minter()": FunctionFragment;
    "mochi()": FunctionFragment;
    "mochiProfile()": FunctionFragment;
    "nft()": FunctionFragment;
    "operationWallet()": FunctionFragment;
    "referralFeePool()": FunctionFragment;
    "treasury()": FunctionFragment;
    "usdm()": FunctionFragment;
    "vMochi()": FunctionFragment;
    "vaultFactory()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "changeCSSR", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeDiscountProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLiquidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "changeMochi", values: [string]): string;
  encodeFunctionData(functionFragment: "changeNFT", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeOperationWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeReferralFeePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTreasury",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "changeUSDM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeVMochi",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "cssr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "discountProfile",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "mochi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mochiProfile",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operationWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralFeePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdm", values?: undefined): string;
  encodeFunctionData(functionFragment: "vMochi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "changeCSSR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeDiscountProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMochi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOperationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeReferralFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeUSDM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeVMochi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cssr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mochi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mochiProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operationWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralFeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vMochi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultFactory",
    data: BytesLike
  ): Result;

  events: {};
}

export class MochiEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MochiEngineInterface;

  functions: {
    changeCSSR(
      _cssr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeDiscountProfile(
      _profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFeePool(
      _feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLiquidator(
      _liquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMochi(
      _mochi: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeNFT(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOperationWallet(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeProfile(
      _profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeReferralFeePool(
      _referralFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeUSDM(
      _usdm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeVMochi(
      _vmochi: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cssr(overrides?: CallOverrides): Promise<[string]>;

    discountProfile(overrides?: CallOverrides): Promise<[string]>;

    feePool(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    liquidator(overrides?: CallOverrides): Promise<[string]>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    mochi(overrides?: CallOverrides): Promise<[string]>;

    mochiProfile(overrides?: CallOverrides): Promise<[string]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    operationWallet(overrides?: CallOverrides): Promise<[string]>;

    referralFeePool(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    usdm(overrides?: CallOverrides): Promise<[string]>;

    vMochi(overrides?: CallOverrides): Promise<[string]>;

    vaultFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  changeCSSR(
    _cssr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeDiscountProfile(
    _profile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFeePool(
    _feePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLiquidator(
    _liquidator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinter(
    _minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMochi(
    _mochi: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeNFT(
    _nft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOperationWallet(
    _operation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeProfile(
    _profile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeReferralFeePool(
    _referralFeePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeUSDM(
    _usdm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeVMochi(
    _vmochi: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cssr(overrides?: CallOverrides): Promise<string>;

  discountProfile(overrides?: CallOverrides): Promise<string>;

  feePool(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  liquidator(overrides?: CallOverrides): Promise<string>;

  minter(overrides?: CallOverrides): Promise<string>;

  mochi(overrides?: CallOverrides): Promise<string>;

  mochiProfile(overrides?: CallOverrides): Promise<string>;

  nft(overrides?: CallOverrides): Promise<string>;

  operationWallet(overrides?: CallOverrides): Promise<string>;

  referralFeePool(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  usdm(overrides?: CallOverrides): Promise<string>;

  vMochi(overrides?: CallOverrides): Promise<string>;

  vaultFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeCSSR(_cssr: string, overrides?: CallOverrides): Promise<void>;

    changeDiscountProfile(
      _profile: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFeePool(_feePool: string, overrides?: CallOverrides): Promise<void>;

    changeGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLiquidator(
      _liquidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinter(_minter: string, overrides?: CallOverrides): Promise<void>;

    changeMochi(_mochi: string, overrides?: CallOverrides): Promise<void>;

    changeNFT(_nft: string, overrides?: CallOverrides): Promise<void>;

    changeOperationWallet(
      _operation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProfile(_profile: string, overrides?: CallOverrides): Promise<void>;

    changeReferralFeePool(
      _referralFeePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    changeUSDM(_usdm: string, overrides?: CallOverrides): Promise<void>;

    changeVMochi(_vmochi: string, overrides?: CallOverrides): Promise<void>;

    cssr(overrides?: CallOverrides): Promise<string>;

    discountProfile(overrides?: CallOverrides): Promise<string>;

    feePool(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    liquidator(overrides?: CallOverrides): Promise<string>;

    minter(overrides?: CallOverrides): Promise<string>;

    mochi(overrides?: CallOverrides): Promise<string>;

    mochiProfile(overrides?: CallOverrides): Promise<string>;

    nft(overrides?: CallOverrides): Promise<string>;

    operationWallet(overrides?: CallOverrides): Promise<string>;

    referralFeePool(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    usdm(overrides?: CallOverrides): Promise<string>;

    vMochi(overrides?: CallOverrides): Promise<string>;

    vaultFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    changeCSSR(
      _cssr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeDiscountProfile(
      _profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFeePool(
      _feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLiquidator(
      _liquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMochi(
      _mochi: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeNFT(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOperationWallet(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeProfile(
      _profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeReferralFeePool(
      _referralFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeUSDM(
      _usdm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeVMochi(
      _vmochi: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cssr(overrides?: CallOverrides): Promise<BigNumber>;

    discountProfile(overrides?: CallOverrides): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    liquidator(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    mochi(overrides?: CallOverrides): Promise<BigNumber>;

    mochiProfile(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    operationWallet(overrides?: CallOverrides): Promise<BigNumber>;

    referralFeePool(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    usdm(overrides?: CallOverrides): Promise<BigNumber>;

    vMochi(overrides?: CallOverrides): Promise<BigNumber>;

    vaultFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeCSSR(
      _cssr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeDiscountProfile(
      _profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFeePool(
      _feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLiquidator(
      _liquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinter(
      _minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMochi(
      _mochi: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeNFT(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOperationWallet(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeProfile(
      _profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeReferralFeePool(
      _referralFeePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeUSDM(
      _usdm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeVMochi(
      _vmochi: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cssr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    discountProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mochi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mochiProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operationWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralFeePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vMochi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
