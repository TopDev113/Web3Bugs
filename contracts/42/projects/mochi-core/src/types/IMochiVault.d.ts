/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IMochiVaultInterface extends ethers.utils.Interface {
  functions: {
    "asset()": FunctionFragment;
    "borrow(uint256,uint256,bytes)": FunctionFragment;
    "claimable()": FunctionFragment;
    "currentDebt(uint256)": FunctionFragment;
    "debts()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "deposits()": FunctionFragment;
    "details(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "liquidate(uint256,uint256,uint256)": FunctionFragment;
    "liveDebtIndex()": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "status(uint256)": FunctionFragment;
    "withdraw(uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claimable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposits", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "details",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liveDebtIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "status",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "details", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liveDebtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IMochiVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMochiVaultInterface;

  functions: {
    asset(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentDebt(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debts(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    details(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, string] & {
        collateral: BigNumber;
        debt: BigNumber;
        debtIndexe: BigNumber;
        refferer: string;
      }
    >;

    initialize(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _nftId: BigNumberish,
      _collateral: BigNumberish,
      _usdm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liveDebtIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    repay(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(_nftId: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    withdraw(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  asset(overrides?: CallOverrides): Promise<string>;

  borrow(
    _nftId: BigNumberish,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(overrides?: CallOverrides): Promise<BigNumber>;

  currentDebt(
    _nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debts(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _nftId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(overrides?: CallOverrides): Promise<BigNumber>;

  details(
    _nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, string] & {
      collateral: BigNumber;
      debt: BigNumber;
      debtIndexe: BigNumber;
      refferer: string;
    }
  >;

  initialize(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _nftId: BigNumberish,
    _collateral: BigNumberish,
    _usdm: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liveDebtIndex(overrides?: CallOverrides): Promise<BigNumber>;

  repay(
    _nftId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(_nftId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  withdraw(
    _nftId: BigNumberish,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    asset(overrides?: CallOverrides): Promise<string>;

    borrow(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimable(overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debts(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(overrides?: CallOverrides): Promise<BigNumber>;

    details(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, string] & {
        collateral: BigNumber;
        debt: BigNumber;
        debtIndexe: BigNumber;
        refferer: string;
      }
    >;

    initialize(_asset: string, overrides?: CallOverrides): Promise<void>;

    liquidate(
      _nftId: BigNumberish,
      _collateral: BigNumberish,
      _usdm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liveDebtIndex(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    status(_nftId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    withdraw(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    asset(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debts(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(overrides?: CallOverrides): Promise<BigNumber>;

    details(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      _nftId: BigNumberish,
      _collateral: BigNumberish,
      _usdm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liveDebtIndex(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(_nftId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentDebt(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    details(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _nftId: BigNumberish,
      _collateral: BigNumberish,
      _usdm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liveDebtIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _nftId: BigNumberish,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
