{
  "address": "0x8ad5fBdDE983EBDfFf3AbE8A2886d3CC7CbAe991",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "AllowedAccountsCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "BlockedAccountsCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "RootChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "allowAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "allowSelf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "blockAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearAllowedAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearBlockedAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAccountAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isAccountBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "setRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "setRootAndClearAllowedAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47b902ae58bc7181ff2aa2fd593686664ba2ebdcdffc8e0195c731790fce1396",
  "receipt": {
    "to": null,
    "from": "0xEa83A49aa36d384483c46eCb74E1c59afAc10dc8",
    "contractAddress": "0x8ad5fBdDE983EBDfFf3AbE8A2886d3CC7CbAe991",
    "transactionIndex": 20,
    "gasUsed": "934408",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000003000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000040000000000000000020000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9e2a158988a882d3658b496057a69fb9fbc5857e93ea2b99f76e3d53d200f344",
    "transactionHash": "0x47b902ae58bc7181ff2aa2fd593686664ba2ebdcdffc8e0195c731790fce1396",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 6820213,
        "transactionHash": "0x47b902ae58bc7181ff2aa2fd593686664ba2ebdcdffc8e0195c731790fce1396",
        "address": "0x8ad5fBdDE983EBDfFf3AbE8A2886d3CC7CbAe991",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ea83a49aa36d384483c46ecb74e1c59afac10dc8"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x9e2a158988a882d3658b496057a69fb9fbc5857e93ea2b99f76e3d53d200f344"
      }
    ],
    "blockNumber": 6820213,
    "cumulativeGasUsed": "6023996",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b97d6b1548b0198541c4320629f176b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"AllowedAccountsCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"BlockedAccountsCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RootChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"allowAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"allowSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"blockAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearAllowedAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBlockedAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccountAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccountBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"setRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"setRootAndClearAllowedAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearAllowedAccounts()\":{\"details\":\"This does not actually modify any existing allowlists, the the function will increment an index pointing to a new mapping that will be referenced. Only callable by `owner()`.\"},\"clearBlockedAccounts()\":{\"details\":\"This does not actually modify any existing blocklists, the the function will increment an index pointing to a new mapping that will be referenced. Only callable by `owner()`.\"},\"getRoot()\":{\"returns\":{\"_0\":\"The current merkle root\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearAllowedAccounts()\":{\"notice\":\"Clears the allowlist for all accounts.\"},\"clearBlockedAccounts()\":{\"notice\":\"Clears the blocklist for all accounts.\"},\"getRoot()\":{\"notice\":\"Returns the merkle root used to determine which accounts to allow.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/AccountAccessController.sol\":\"AccountAccessController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x972240f593e01b2fae2e90c5b94260f4971f03076363a38a3f4fff105efbba8b\",\"license\":\"MIT\"},\"contracts/core/AccountAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAccountAccessController.sol\\\";\\n\\ncontract AccountAccessController is Ownable, IAccountAccessController {\\n    bytes32 private _root;\\n    uint16 internal _allowedAccountsIndex;\\n    uint16 internal _blockedAccountsIndex;\\n    mapping(uint16 => mapping(address => bool)) private _allowedAccounts;\\n    mapping(uint16 => mapping(address => bool)) private _blockedAccounts;\\n\\n    constructor() {}\\n\\n    function setRoot(bytes32 _newRoot) external override onlyOwner {\\n        _setRoot(_newRoot);\\n    }\\n\\n    function clearAllowedAccounts() external override onlyOwner {\\n        _clearAllowedAccounts();\\n    }\\n\\n    function setRootAndClearAllowedAccounts(bytes32 _newRoot)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _setRoot(_newRoot);\\n        _clearAllowedAccounts();\\n    }\\n\\n    function clearBlockedAccounts() external override onlyOwner {\\n        _blockedAccountsIndex++;\\n        emit BlockedAccountsCleared(_blockedAccountsIndex);\\n    }\\n\\n    function allowAccounts(address[] calldata _accounts)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        for (uint256 _i = 0; _i < _accounts.length; _i++) {\\n            _allowedAccounts[_allowedAccountsIndex][_accounts[_i]] = true;\\n            emit AccountAllowed(_accounts[_i]);\\n        }\\n    }\\n\\n    function blockAccounts(address[] calldata _accounts)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        for (uint256 _i = 0; _i < _accounts.length; _i++) {\\n            _blockedAccounts[_blockedAccountsIndex][_accounts[_i]] = true;\\n            emit AccountBlocked(_accounts[_i]);\\n        }\\n    }\\n\\n    function allowSelf(bytes32[] calldata _proof) external override {\\n        require(\\n            _allowedAccounts[_allowedAccountsIndex][msg.sender] == false,\\n            \\\"Account already registered\\\"\\n        );\\n        bytes32 _leaf = keccak256(abi.encodePacked(msg.sender));\\n\\n        require(MerkleProof.verify(_proof, _root, _leaf), \\\"Invalid proof\\\");\\n        _allowedAccounts[_allowedAccountsIndex][msg.sender] = true;\\n        emit AccountAllowed(msg.sender);\\n    }\\n\\n    function getRoot() external view override returns (bytes32) {\\n        return _root;\\n    }\\n\\n    function isAccountAllowed(address _account)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _allowedAccounts[_allowedAccountsIndex][_account];\\n    }\\n\\n    function isAccountBlocked(address _account)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _blockedAccounts[_blockedAccountsIndex][_account];\\n    }\\n\\n    function _setRoot(bytes32 _newRoot) internal {\\n        _root = _newRoot;\\n        emit RootChanged(_root);\\n    }\\n\\n    function _clearAllowedAccounts() internal {\\n        _allowedAccountsIndex++;\\n        emit AllowedAccountsCleared(_allowedAccountsIndex);\\n    }\\n}\\n\",\"keccak256\":\"0xc37a52ceb1fe643718134730d622a38489096fc598e7e6a12c5f8c3ddbdf3419\",\"license\":\"UNLICENSED\"},\"contracts/core/interfaces/IAccountAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice The Access Controller is used for allowing/blocking access to\\n * contract functions.\\n */\\ninterface IAccountAccessController {\\n    /**\\n     * @dev Emitted via `setRoot()`.\\n     * @param root The new merkle root\\n     */\\n    event RootChanged(bytes32 root);\\n\\n    /**\\n     * @dev Emitted via `allowAccounts()` and `allowSelf`.\\n     * @param account The account that was allowed\\n     */\\n    event AccountAllowed(address indexed account);\\n\\n    /**\\n     * @dev Emitted via `blockAccounts()`.\\n     * @param account The account that was blocked\\n     */\\n    event AccountBlocked(address indexed account);\\n\\n    /**\\n     * @dev Emitted via `setRoot()` and `clearAllowedAccounts`,\\n     * and `setRootAndClearAllowedAccounts`.\\n     * @param index The index for the new allowlist\\n     */\\n    event AllowedAccountsCleared(uint32 index);\\n\\n    /**\\n     * @dev Emitted via `clearBlockedAccounts`.\\n     * @param index The index for the new blocklist\\n     */\\n    event BlockedAccountsCleared(uint32 index);\\n\\n    /**\\n     * @notice Sets the merkle root used to determine which accounts\\n     * to allow.\\n     * @dev Only callable by `owner()`.\\n     * @param newRoot The new merkle root\\n     */\\n    function setRoot(bytes32 newRoot) external;\\n\\n    /**\\n     * @notice Clears the allowlist for all accounts.\\n     * @dev This does not actually modify any existing allowlists, the\\n     * the function will increment an index pointing to a new mapping\\n     * that will be referenced.\\n     *\\n     * Only callable by `owner()`.\\n     */\\n    function clearAllowedAccounts() external;\\n\\n    /**\\n     * @notice Sets the merkle root used to determine which accounts\\n     * to allow and resets the allowlist.\\n     * @dev Only callable by `owner()`.\\n     * @param newRoot The new merkle root\\n     */\\n    function setRootAndClearAllowedAccounts(bytes32 newRoot) external;\\n\\n    /**\\n     * @notice Clears the blocklist for all accounts.\\n     * @dev This does not actually modify any existing blocklists, the\\n     * the function will increment an index pointing to a new mapping\\n     * that will be referenced.\\n     *\\n     * Only callable by `owner()`.\\n     */\\n    function clearBlockedAccounts() external;\\n\\n    /**\\n     * @notice Allows one or more accounts, regardless of existing access.\\n     * @dev Only callable by `owner()`.\\n     * @param accounts Accounts to allow\\n     */\\n    function allowAccounts(address[] calldata accounts) external;\\n\\n    /**\\n     * @notice Blocks one or more accounts, regardless of existing access.\\n     * @dev Only callable by `owner()`.\\n     * @param accounts Accounts to block\\n     */\\n    function blockAccounts(address[] calldata accounts) external;\\n\\n    /**\\n     * @notice Allows the caller if the provided signature is valid.\\n     * @dev An account cannot call this function if it is already\\n     * allowed/blocked.\\n     * @param proof Proof of the caller's inclusion in the merkle root\\n     */\\n    function allowSelf(bytes32[] calldata proof) external;\\n\\n    /**\\n     * @notice Returns the merkle root used to determine which accounts\\n     * to allow.\\n     * @return The current merkle root\\n     */\\n    function getRoot() external view returns (bytes32);\\n\\n    /**\\n     * @return Whether the account is allowed\\n     */\\n    function isAccountAllowed(address account) external view returns (bool);\\n\\n    /**\\n     * @return Whether the account is blocked\\n     */\\n    function isAccountBlocked(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x61457488e94578b0526ec5076c4965f32450c3a3721a58e9526094b1025ad031\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f938061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063851678e11161008c578063c41ac1e911610066578063c41ac1e9146101d0578063ca88bd5b146101e3578063dab5f34014610235578063f2fde38b1461024857600080fd5b8063851678e1146101825780638da5cb5b14610195578063becc43a7146101bd57600080fd5b80635f69aaf9116100bd5780635f69aaf91461015f5780636abf708114610167578063715018a61461017a57600080fd5b80631fd9a8c6146100e4578063575ca0c9146101445780635ca1e1651461014e575b600080fd5b61012f6100f2366004610e0c565b60025461ffff16600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff9094168352929052205460ff1690565b60405190151581526020015b60405180910390f35b61014c61025b565b005b60015460405190815260200161013b565b61014c6102eb565b61014c610175366004610e49565b6103e3565b61014c610587565b61014c610190366004610e8b565b610612565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013b565b61014c6101cb366004610e49565b6106a7565b61014c6101de366004610e49565b610840565b61012f6101f1366004610e0c565b60025461ffff6201000090910416600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff9094168352929052205460ff1690565b61014c610243366004610e8b565b610a33565b61014c610256366004610e0c565b610abd565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102e9610bea565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461036c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b6002805462010000900461ffff16908061038583610ea4565b82546101009290920a61ffff8181021990931691831602179091556002546040516201000090910490911681527ff00615fe8ae50ff90ca87ea3ef0ef3900f17c6ed04a215096a77539eebe886af91506020015b60405180910390a1565b60005473ffffffffffffffffffffffffffffffffffffffff163314610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b60005b818110156105825760025462010000900461ffff16600090815260046020526040812060019185858581811061049f5761049f610f2e565b90506020020160208101906104b49190610e0c565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905582828281811061051957610519610f2e565b905060200201602081019061052e9190610e0c565b73ffffffffffffffffffffffffffffffffffffffff167f28e9b38569d728986e5868b0e113d9a49ee4c47dfc6db29a673e25b3515a56a860405160405180910390a28061057a81610ec6565b915050610467565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610608576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b6102e96000610c4e565b60005473ffffffffffffffffffffffffffffffffffffffff163314610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b61069c81610cc3565b6106a4610bea565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b60005b818110156105825760025461ffff16600090815260036020526040812060019185858581811061075d5761075d610f2e565b90506020020160208101906107729190610e0c565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558282828181106107d7576107d7610f2e565b90506020020160208101906107ec9190610e0c565b73ffffffffffffffffffffffffffffffffffffffff167f2241f00dd2c136c402aac1497b67b34525c46620ff2762139f3f88ca5f7409c560405160405180910390a28061083881610ec6565b91505061072b565b60025461ffff16600090815260036020908152604080832033845290915290205460ff16156108cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4163636f756e7420616c7265616479207265676973746572656400000000000060448201526064016102d8565b6040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b166020820152600090603401604051602081830303815290604052805190602001209050610958838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506001549150849050610cfe565b6109be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016102d8565b60025461ffff16600090815260036020908152604080832033808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190917f2241f00dd2c136c402aac1497b67b34525c46620ff2762139f3f88ca5f7409c591a2505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ab4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b6106a481610cc3565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b73ffffffffffffffffffffffffffffffffffffffff8116610be1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102d8565b6106a481610c4e565b6002805461ffff16906000610bfe83610ea4565b82546101009290920a61ffff818102199093169183160217909155600254604051911681527f2d7888569c1691ca7c866b17ee2300ae16414c90e24fa2ead0530abe2520d6a791506020016103d9565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60018190556040518181527f545a99af2f74d472d3ceb11889ff68b31a1a02f48a9431f04cda814892ee57e29060200160405180910390a150565b600082610d0b8584610d14565b14949350505050565b600081815b8451811015610db8576000858281518110610d3657610d36610f2e565b60200260200101519050808311610d78576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610da5565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080610db081610ec6565b915050610d19565b509392505050565b60008083601f840112610dd257600080fd5b50813567ffffffffffffffff811115610dea57600080fd5b6020830191508360208260051b8501011115610e0557600080fd5b9250929050565b600060208284031215610e1e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610e4257600080fd5b9392505050565b60008060208385031215610e5c57600080fd5b823567ffffffffffffffff811115610e7357600080fd5b610e7f85828601610dc0565b90969095509350505050565b600060208284031215610e9d57600080fd5b5035919050565b600061ffff80831681811415610ebc57610ebc610eff565b6001019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ef857610ef8610eff565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a3dbd3deabe52c58ef0139822b4606dcbf1d985211124622af7a0fa4d4abeb6664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c8063851678e11161008c578063c41ac1e911610066578063c41ac1e9146101d0578063ca88bd5b146101e3578063dab5f34014610235578063f2fde38b1461024857600080fd5b8063851678e1146101825780638da5cb5b14610195578063becc43a7146101bd57600080fd5b80635f69aaf9116100bd5780635f69aaf91461015f5780636abf708114610167578063715018a61461017a57600080fd5b80631fd9a8c6146100e4578063575ca0c9146101445780635ca1e1651461014e575b600080fd5b61012f6100f2366004610e0c565b60025461ffff16600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff9094168352929052205460ff1690565b60405190151581526020015b60405180910390f35b61014c61025b565b005b60015460405190815260200161013b565b61014c6102eb565b61014c610175366004610e49565b6103e3565b61014c610587565b61014c610190366004610e8b565b610612565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013b565b61014c6101cb366004610e49565b6106a7565b61014c6101de366004610e49565b610840565b61012f6101f1366004610e0c565b60025461ffff6201000090910416600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff9094168352929052205460ff1690565b61014c610243366004610e8b565b610a33565b61014c610256366004610e0c565b610abd565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102e9610bea565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461036c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b6002805462010000900461ffff16908061038583610ea4565b82546101009290920a61ffff8181021990931691831602179091556002546040516201000090910490911681527ff00615fe8ae50ff90ca87ea3ef0ef3900f17c6ed04a215096a77539eebe886af91506020015b60405180910390a1565b60005473ffffffffffffffffffffffffffffffffffffffff163314610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b60005b818110156105825760025462010000900461ffff16600090815260046020526040812060019185858581811061049f5761049f610f2e565b90506020020160208101906104b49190610e0c565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905582828281811061051957610519610f2e565b905060200201602081019061052e9190610e0c565b73ffffffffffffffffffffffffffffffffffffffff167f28e9b38569d728986e5868b0e113d9a49ee4c47dfc6db29a673e25b3515a56a860405160405180910390a28061057a81610ec6565b915050610467565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610608576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b6102e96000610c4e565b60005473ffffffffffffffffffffffffffffffffffffffff163314610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b61069c81610cc3565b6106a4610bea565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b60005b818110156105825760025461ffff16600090815260036020526040812060019185858581811061075d5761075d610f2e565b90506020020160208101906107729190610e0c565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558282828181106107d7576107d7610f2e565b90506020020160208101906107ec9190610e0c565b73ffffffffffffffffffffffffffffffffffffffff167f2241f00dd2c136c402aac1497b67b34525c46620ff2762139f3f88ca5f7409c560405160405180910390a28061083881610ec6565b91505061072b565b60025461ffff16600090815260036020908152604080832033845290915290205460ff16156108cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4163636f756e7420616c7265616479207265676973746572656400000000000060448201526064016102d8565b6040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b166020820152600090603401604051602081830303815290604052805190602001209050610958838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506001549150849050610cfe565b6109be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016102d8565b60025461ffff16600090815260036020908152604080832033808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555190917f2241f00dd2c136c402aac1497b67b34525c46620ff2762139f3f88ca5f7409c591a2505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ab4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b6106a481610cc3565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d8565b73ffffffffffffffffffffffffffffffffffffffff8116610be1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102d8565b6106a481610c4e565b6002805461ffff16906000610bfe83610ea4565b82546101009290920a61ffff818102199093169183160217909155600254604051911681527f2d7888569c1691ca7c866b17ee2300ae16414c90e24fa2ead0530abe2520d6a791506020016103d9565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60018190556040518181527f545a99af2f74d472d3ceb11889ff68b31a1a02f48a9431f04cda814892ee57e29060200160405180910390a150565b600082610d0b8584610d14565b14949350505050565b600081815b8451811015610db8576000858281518110610d3657610d36610f2e565b60200260200101519050808311610d78576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610da5565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080610db081610ec6565b915050610d19565b509392505050565b60008083601f840112610dd257600080fd5b50813567ffffffffffffffff811115610dea57600080fd5b6020830191508360208260051b8501011115610e0557600080fd5b9250929050565b600060208284031215610e1e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610e4257600080fd5b9392505050565b60008060208385031215610e5c57600080fd5b823567ffffffffffffffff811115610e7357600080fd5b610e7f85828601610dc0565b90969095509350505050565b600060208284031215610e9d57600080fd5b5035919050565b600061ffff80831681811415610ebc57610ebc610eff565b6001019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ef857610ef8610eff565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a3dbd3deabe52c58ef0139822b4606dcbf1d985211124622af7a0fa4d4abeb6664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clearAllowedAccounts()": {
        "details": "This does not actually modify any existing allowlists, the the function will increment an index pointing to a new mapping that will be referenced. Only callable by `owner()`."
      },
      "clearBlockedAccounts()": {
        "details": "This does not actually modify any existing blocklists, the the function will increment an index pointing to a new mapping that will be referenced. Only callable by `owner()`."
      },
      "getRoot()": {
        "returns": {
          "_0": "The current merkle root"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clearAllowedAccounts()": {
        "notice": "Clears the allowlist for all accounts."
      },
      "clearBlockedAccounts()": {
        "notice": "Clears the blocklist for all accounts."
      },
      "getRoot()": {
        "notice": "Returns the merkle root used to determine which accounts to allow."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 964,
        "contract": "contracts/core/AccountAccessController.sol:AccountAccessController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3027,
        "contract": "contracts/core/AccountAccessController.sol:AccountAccessController",
        "label": "_root",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 3029,
        "contract": "contracts/core/AccountAccessController.sol:AccountAccessController",
        "label": "_allowedAccountsIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 3031,
        "contract": "contracts/core/AccountAccessController.sol:AccountAccessController",
        "label": "_blockedAccountsIndex",
        "offset": 2,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 3037,
        "contract": "contracts/core/AccountAccessController.sol:AccountAccessController",
        "label": "_allowedAccounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3043,
        "contract": "contracts/core/AccountAccessController.sol:AccountAccessController",
        "label": "_blockedAccounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}
