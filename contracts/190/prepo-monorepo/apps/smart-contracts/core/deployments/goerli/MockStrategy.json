{
  "address": "0x644cdC1e2CdAa175D138b9f5960229Bf75abfbE3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newBaseToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INITIAL_SHARE_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beginning",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "contract IStrategyController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_apy",
          "type": "uint256"
        }
      ],
      "name": "setApy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_beginning",
          "type": "uint256"
        }
      ],
      "name": "setBeginning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_newVault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47c8944f9f23e270f13307c5baf958c735cdd3fc007fb05faaf5a8b20bf0e3da",
  "receipt": {
    "to": null,
    "from": "0xEa83A49aa36d384483c46eCb74E1c59afAc10dc8",
    "contractAddress": "0x644cdC1e2CdAa175D138b9f5960229Bf75abfbE3",
    "transactionIndex": 19,
    "gasUsed": "1253798",
    "logsBloom": "0x
    "blockHash": "0x4098a4a6b0580914fd8ad127917192121f175eb4b4955fb5154984cec76db8d6",
    "transactionHash": "0x47c8944f9f23e270f13307c5baf958c735cdd3fc007fb05faaf5a8b20bf0e3da",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 6820236,
        "transactionHash": "0x47c8944f9f23e270f13307c5baf958c735cdd3fc007fb05faaf5a8b20bf0e3da",
        "address": "0x644cdC1e2CdAa175D138b9f5960229Bf75abfbE3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ea83a49aa36d384483c46ecb74e1c59afac10dc8"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x4098a4a6b0580914fd8ad127917192121f175eb4b4955fb5154984cec76db8d6"
      }
    ],
    "blockNumber": 6820236,
    "cumulativeGasUsed": "3459170",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcf88bb8f916705D199B597e6131C9febE5289aE1",
    "0xc0D34e36D829Ac4fbDcb9aE42FcbA14ff6C434d5"
  ],
  "numDeployments": 1,
  "solcInputHash": "b97d6b1548b0198541c4320629f176b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newBaseToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_SHARE_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"contract IStrategyController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"setApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_beginning\",\"type\":\"uint256\"}],\"name\":\"setBeginning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBaseToken()\":{\"returns\":{\"_0\":\"The Base Token address\"}},\"getController()\":{\"details\":\"Functions with the `onlyController` modifier can only be called by this Strategy Controller.\",\"returns\":{\"_0\":\"The Strategy Controller address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"apy()\":{\"notice\":\"Integer percent APY for mock strategy, editable in case we need to modify later for testnet\"},\"deposit(uint256)\":{\"notice\":\"`_baseToken` must blacklist users besides governance and controller from sending to this contract to prevent unwanted share inflation from users directly sending funds to the strategy\"},\"getBaseToken()\":{\"notice\":\"The ERC20 asset that this strategy utilizes to earn yield and return profits with.\"},\"getController()\":{\"notice\":\"Returns the Strategy Controller that intermediates interactions between a vault and this strategy.\"},\"setApy(uint256)\":{\"notice\":\"Virtual APY yields will be calculated from the starting value of INITIAL_SHARE_VALUE\"},\"setBeginning(uint256)\":{\"notice\":\"Initializes to current timestamp, changeable by governance if needed later\"},\"totalValue()\":{\"notice\":\"Virtual balance is the amount owed to all shareholders based on the current timestamp and virtual APY. This returns the actual `_baseToken` balance if it is greater than the `_virtualBalance`, which for this mock strategy, will always be when a user deposits funds prior to minting shares. After a user deposits funds via `deposit()`, `totalValue()` should return the `_actualBalance` to allow Collateral to determine how many shares to mint for a user. Once the shares are minted, the `_virtualBalance` will once again surpass the `_actualBalance`.\"},\"vault()\":{\"notice\":\"This would not exist in an actual strategy since strategies are vault agnostic, only exists because we need to know vault shares supply to simulate a `totalValue()`\"},\"withdraw(address,uint256)\":{\"notice\":\"We enforce `_baseToken` ownership here and not in the initializer since we would have to deterministically figure out strategy deployment address ahead of time\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/mocks/MockStrategy.sol\":\"MockStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/core/interfaces/ILongShortToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice LongShortToken contract representing PrePOMarket positions.\\n *\\n * The token can represent either a Long or Short position for the\\n * PrePOMarket it belongs to.\\n */\\ninterface ILongShortToken is IERC20 {\\n    /**\\n     * @dev Inherited from OpenZeppelin Ownable.\\n     * @return Address of the current owner\\n     */\\n    function owner() external returns (address);\\n\\n    /**\\n     * @notice Mints `amount` tokens to `recipient`. Allows PrePOMarket to mint\\n     * positions for users.\\n     * @dev Only callable by `owner()` (should be PrePOMarket).\\n     * @param recipient Address of the recipient\\n     * @param amount Amount of tokens to mint\\n     */\\n    function mint(address recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice Destroys `amount` tokens from `account`, deducting from the\\n     * caller's allowance.\\n     * @dev Inherited from OpenZeppelin ERC20Burnable.\\n     * @param account Address of the account to destroy tokens from\\n     * @param amount Amount of tokens to destroy\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4815dcffe691fba1104b1a8dead576971c821ae676e05aeb131c2085b22237d4\",\"license\":\"UNLICENSED\"},\"contracts/core/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport \\\"../interfaces/IStrategyController.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @notice Strategy that deploys Base Token to earn yield denominated in Base\\n * Token.\\n * @dev `owner()` can call emergency functions and setters, only controller\\n * can call deposit/withdraw.\\n */\\ninterface IStrategy {\\n    /**\\n     * @notice Deposits `amount` Base Token into the strategy.\\n     * @dev Assumes the StrategyController has given infinite spend approval\\n     * to the strategy.\\n     * @param amount Amount of Base Token to deposit\\n     */\\n    function deposit(uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws `amount` Base Token from the strategy to `recipient`.\\n     * @dev This withdrawal is optimistic, returned amount might be less than\\n     * the amount specified.\\n     * @param recipient Address to receive the Base Token\\n     * @param amount Amount of Base Token to withdraw\\n     */\\n    function withdraw(address recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice Returns the Base Token balance of this contract and\\n     * the estimated value of deployed assets.\\n     * @return Total value of assets within the strategy\\n     */\\n    function totalValue() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the Strategy Controller that intermediates interactions\\n     * between a vault and this strategy.\\n     * @dev Functions with the `onlyController` modifier can only be called by\\n     * this Strategy Controller.\\n     * @return The Strategy Controller address\\n     */\\n    function getController() external view returns (IStrategyController);\\n\\n    /**\\n     * @notice The ERC20 asset that this strategy utilizes to earn yield and\\n     * return profits with.\\n     * @return The Base Token address\\n     */\\n    function getBaseToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0xc0dae99d99340a08bec0d503c2b56d09d84b63f24fe272552ea27a22c66681ba\",\"license\":\"UNLICENSED\"},\"contracts/core/interfaces/IStrategyController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Strategy Controller acts as an intermediary between the Strategy\\n * and the PrePO Collateral contract.\\n *\\n * The Collateral contract should never interact with the Strategy directly\\n * and only perform operations via the Strategy Controller.\\n */\\ninterface IStrategyController {\\n    /// @dev Emitted via `setVault()`.\\n    /// @param vault The new vault address\\n    event VaultChanged(address vault);\\n\\n    /// @dev Emitted via `migrate()`.\\n    /// @param oldStrategy The old strategy address\\n    /// @param newStrategy The new strategy address\\n    /// @param amount The amount migrated\\n    event StrategyMigrated(\\n        address oldStrategy,\\n        address newStrategy,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Deposits the specified amount of Base Token into the Strategy.\\n     * @dev Only the vault (Collateral contract) may call this function.\\n     *\\n     * Assumes approval to transfer amount from the Collateral contract\\n     * has been given.\\n     * @param amount Amount of Base Token to deposit\\n     */\\n    function deposit(uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws the requested amount of Base Token from the Strategy\\n     * to the recipient.\\n     * @dev Only the vault (Collateral contract) may call this function.\\n     *\\n     * This withdrawal is optimistic, returned amount might be less than\\n     * the amount specified.\\n     * @param amount Amount of Base Token to withdraw\\n     * @param recipient Address to receive the Base Token\\n     */\\n    function withdraw(address recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice Migrates funds from currently configured Strategy to a new\\n     * Strategy and replaces it.\\n     * @dev If a Strategy is not already set, it sets the Controller's\\n     * Strategy to the new value with no funds being exchanged.\\n     *\\n     * Gives infinite Base Token approval to the new strategy and sets it\\n     * to zero for the old one.\\n     *\\n     * Only callable by `owner()`.\\n     * @param newStrategy Address of the new Strategy\\n     */\\n    function migrate(IStrategy newStrategy) external;\\n\\n    /**\\n     * @notice Sets the vault that is allowed to deposit/withdraw through this\\n     * StrategyController.\\n     * @dev Only callable by `owner()`.\\n     * @param newVault Address of the new vault\\n     */\\n    function setVault(address newVault) external;\\n\\n    /**\\n     * @notice Returns the Base Token balance of this contract and the\\n     * `totalValue()` returned by the Strategy.\\n     * @return The total value of assets within the strategy\\n     */\\n    function totalValue() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the vault that is allowed to deposit/withdraw through\\n     * this Strategy Controller.\\n     * @return The vault address\\n     */\\n    function getVault() external view returns (address);\\n\\n    /**\\n     * @notice Returns the ERC20 asset that this Strategy Controller supports\\n     * handling funds with.\\n     * @return The Base Token address\\n     */\\n    function getBaseToken() external view returns (IERC20);\\n\\n    /**\\n     * @return The Strategy that this Strategy Controller manages\\n     */\\n    function getStrategy() external view returns (IStrategy);\\n}\\n\",\"keccak256\":\"0xf3f9c6844e80784c7616578861e80faa6ec0a4251c39e8d06fc79267a571653a\",\"license\":\"UNLICENSED\"},\"contracts/core/mocks/MockStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport \\\"../interfaces/ILongShortToken.sol\\\";\\nimport \\\"../interfaces/IStrategyController.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract MockStrategy is IStrategy, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IStrategyController private _controller;\\n    /**\\n     * This would be an IERC20 in a real strategy, but we are using\\n     * ILongShortToken due to this being a mock strategy that needs\\n     * to mint/burn its `_baseToken`\\n     */\\n    ILongShortToken private _baseToken;\\n\\n    /**\\n     * This would not exist in an actual strategy since strategies are vault\\n     * agnostic, only exists because we need to know vault shares supply to\\n     * simulate a `totalValue()`\\n     */\\n    IERC20 public vault;\\n    // Timestamp to denote when virtual yield can begin to accumulate\\n    uint256 public beginning;\\n    /**\\n     * Integer percent APY for mock strategy, editable in case we need to\\n     * modify later for testnet\\n     */\\n    uint256 public apy;\\n    // Virtual value of a vault share is initialized to 1 `_baseToken`\\n    uint256 public constant INITIAL_SHARE_VALUE = 1e18;\\n\\n    event VaultChanged(address vault);\\n\\n    modifier onlyController() {\\n        require(\\n            msg.sender == address(_controller),\\n            \\\"Caller is not the controller\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _newController, address _newBaseToken) {\\n        _controller = IStrategyController(_newController);\\n        _baseToken = ILongShortToken(_newBaseToken);\\n        beginning = block.timestamp;\\n    }\\n\\n    /**\\n     * `_baseToken` must blacklist users besides governance and controller\\n     * from sending to this contract to prevent unwanted share inflation from\\n     * users directly sending funds to the strategy\\n     */\\n    function deposit(uint256 _amount) external override onlyController {\\n        uint256 _actualBalance = _baseToken.balanceOf(address(this));\\n        uint256 _virtualBalance = _getVirtualBalance();\\n        if (_actualBalance > 0) {\\n            /**\\n             * Bring `_baseToken` balance in line with our expected virtual\\n             * balance, this is so that the difference in `totalValue()`\\n             * before/after reflects the deposit amount\\n             */\\n            if (_virtualBalance > _actualBalance) {\\n                /**\\n                 * Mint tokens to bring `_baseToken` balance up to\\n                 * `_virtualBalance` before deposit\\n                 */\\n                _baseToken.mint(\\n                    address(this),\\n                    _virtualBalance - _actualBalance\\n                );\\n            }\\n        }\\n        IERC20(_baseToken).safeTransferFrom(\\n            address(_controller),\\n            address(this),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * We enforce `_baseToken` ownership here and not in the initializer since\\n     * we would have to deterministically figure out strategy deployment\\n     * address ahead of time\\n     */\\n    function withdraw(address _recipient, uint256 _amount)\\n        external\\n        override\\n        onlyController\\n    {\\n        if (_amount > _baseToken.balanceOf(address(this))) {\\n            uint256 _shortfall = _amount - _baseToken.balanceOf(address(this));\\n            _baseToken.mint(address(this), _shortfall);\\n        }\\n        IERC20(_baseToken).safeTransfer(_recipient, _amount);\\n    }\\n\\n    function setVault(IERC20 _newVault) external onlyOwner {\\n        vault = _newVault;\\n        emit VaultChanged(address(vault));\\n    }\\n\\n    /**\\n     * Initializes to current timestamp, changeable by governance if needed\\n     * later\\n     */\\n    function setBeginning(uint256 _beginning) external onlyOwner {\\n        beginning = _beginning;\\n    }\\n\\n    /**\\n     * Virtual APY yields will be calculated from the starting value of\\n     * INITIAL_SHARE_VALUE\\n     */\\n    function setApy(uint256 _apy) external onlyOwner {\\n        apy = _apy;\\n    }\\n\\n    /**\\n     * Virtual balance is the amount owed to all shareholders based on the\\n     * current timestamp and virtual APY. This returns the actual `_baseToken`\\n     * balance if it is greater than the `_virtualBalance`, which for this\\n     * mock strategy, will always be when a user deposits funds prior to\\n     * minting shares.\\n     *\\n     * After a user deposits funds via `deposit()`, `totalValue()`\\n     * should return the `_actualBalance` to allow Collateral to determine how\\n     * many shares to mint for a user. Once the shares are minted, the\\n     * `_virtualBalance` will once again surpass the `_actualBalance`.\\n     */\\n    function totalValue() external view override returns (uint256) {\\n        uint256 _actualBalance = _baseToken.balanceOf(address(this));\\n        uint256 _virtualBalance = _getVirtualBalance();\\n        if (_actualBalance > _virtualBalance) {\\n            return _actualBalance;\\n        } else {\\n            return _virtualBalance;\\n        }\\n    }\\n\\n    function getController()\\n        external\\n        view\\n        override\\n        returns (IStrategyController)\\n    {\\n        return _controller;\\n    }\\n\\n    function getBaseToken() external view override returns (IERC20) {\\n        return IERC20(_baseToken);\\n    }\\n\\n    function _getVirtualBalance() internal view returns (uint256) {\\n        return\\n            (vault.totalSupply() * _currentShareValue()) / INITIAL_SHARE_VALUE;\\n    }\\n\\n    /**\\n     * INITIAL_SHARE_VALUE is only being re-used here as a denominator for wei\\n     * token math.\\n     */\\n    function _currentShareValue() internal view returns (uint256) {\\n        uint256 _returnPerSecond = (INITIAL_SHARE_VALUE * apy) /\\n            100 /\\n            31536000;\\n        uint256 _timeDeployed = block.timestamp - beginning;\\n        return INITIAL_SHARE_VALUE + (_returnPerSecond * _timeDeployed);\\n    }\\n}\\n\",\"keccak256\":\"0xe9581509e79e41c489ec6d7f4e94d329be2c0b79bb8b7245fc72ebaf7fafc2c3\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620014e5380380620014e5833981016040819052610031916100df565b61003a33610073565b60018055600280546001600160a01b039384166001600160a01b0319918216179091556003805492909316911617905542600555610112565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100da57600080fd5b919050565b600080604083850312156100f257600080fd5b6100fb836100c3565b9150610109602084016100c3565b90509250929050565b6113c380620001226000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806398acd7a611610097578063e440a03e11610066578063e440a03e146101f4578063f2fde38b14610207578063f3fef3a31461021a578063fbfa77cf1461022d57600080fd5b806398acd7a6146101ac578063b436e49a146101ca578063b6b55f25146101d9578063d4c3eea0146101ec57600080fd5b80634a797b47116100d35780634a797b471461016a5780636817031b14610173578063715018a6146101865780638da5cb5b1461018e57600080fd5b80633018205f146100fa5780633b3f5e361461013e5780633bcfc4b814610153575b600080fd5b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015161014c3660046111ca565b61024d565b005b61015c60065481565b604051908152602001610135565b61015c60055481565b61015161018136600461115f565b6102d8565b6101516103d2565b60005473ffffffffffffffffffffffffffffffffffffffff16610114565b60035473ffffffffffffffffffffffffffffffffffffffff16610114565b61015c670de0b6b3a764000081565b6101516101e73660046111ca565b61045f565b61015c61067b565b6101516102023660046111ca565b610743565b61015161021536600461115f565b6107c9565b61015161022836600461117c565b6108f9565b6004546101149073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600655565b60005473ffffffffffffffffffffffffffffffffffffffff163314610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa49691f0dd6477ccef49962612a236d252e3a31c3be8b61fa6abeff3e74a75729060200160405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b61045d6000610b83565b565b60025473ffffffffffffffffffffffffffffffffffffffff1633146104e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c65720000000060448201526064016102ca565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561054a57600080fd5b505afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058291906111e3565b9050600061058e610bf8565b9050811561064b578181111561064b5760035473ffffffffffffffffffffffffffffffffffffffff166340c10f19306105c785856112f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050505b6002546003546106769173ffffffffffffffffffffffffffffffffffffffff91821691163086610cc4565b505050565b6003546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091829173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156106e957600080fd5b505afa1580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072191906111e3565b9050600061072d610bf8565b90508082111561073d5750919050565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b600555565b60005473ffffffffffffffffffffffffffffffffffffffff16331461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b73ffffffffffffffffffffffffffffffffffffffff81166108ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102ca565b6108f681610b83565b50565b60025473ffffffffffffffffffffffffffffffffffffffff16331461097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c65720000000060448201526064016102ca565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156109e357600080fd5b505afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b91906111e3565b811115610b5b576003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610a8c57600080fd5b505afa158015610aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac491906111e3565b610ace90836112f9565b6003546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b50505050505b600354610b7f9073ffffffffffffffffffffffffffffffffffffffff168383610da6565b5050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000670de0b6b3a7640000610c0b610dfc565b60048054604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926318160ddd928282019260209290829003018186803b158015610c7357600080fd5b505afa158015610c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cab91906111e3565b610cb591906112bc565b610cbf9190611281565b905090565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610da09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e67565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106769084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610d1e565b6000806301e133806064600654670de0b6b3a7640000610e1c91906112bc565b610e269190611281565b610e309190611281565b9050600060055442610e4291906112f9565b9050610e4e81836112bc565b610e6090670de0b6b3a7640000611269565b9250505090565b6000610ec9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f739092919063ffffffff16565b8051909150156106765780806020019051810190610ee791906111a8565b610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ca565b6060610f828484600085610f8c565b90505b9392505050565b60608247101561101e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ca565b843b611086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ca565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516110af91906111fc565b60006040518083038185875af1925050503d80600081146110ec576040519150601f19603f3d011682016040523d82523d6000602084013e6110f1565b606091505b509150915061110182828661110c565b979650505050505050565b6060831561111b575081610f85565b82511561112b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca9190611218565b60006020828403121561117157600080fd5b8135610f858161136b565b6000806040838503121561118f57600080fd5b823561119a8161136b565b946020939093013593505050565b6000602082840312156111ba57600080fd5b81518015158114610f8557600080fd5b6000602082840312156111dc57600080fd5b5035919050565b6000602082840312156111f557600080fd5b5051919050565b6000825161120e818460208701611310565b9190910192915050565b6020815260008251806020840152611237816040850160208701611310565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561127c5761127c61133c565b500190565b6000826112b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112f4576112f461133c565b500290565b60008282101561130b5761130b61133c565b500390565b60005b8381101561132b578181015183820152602001611313565b83811115610da05750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146108f657600080fdfea264697066735822122038eb7107ef280ae8da31acf2393612a084aa36c8cab3c793ce3a766b8961a17764736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806398acd7a611610097578063e440a03e11610066578063e440a03e146101f4578063f2fde38b14610207578063f3fef3a31461021a578063fbfa77cf1461022d57600080fd5b806398acd7a6146101ac578063b436e49a146101ca578063b6b55f25146101d9578063d4c3eea0146101ec57600080fd5b80634a797b47116100d35780634a797b471461016a5780636817031b14610173578063715018a6146101865780638da5cb5b1461018e57600080fd5b80633018205f146100fa5780633b3f5e361461013e5780633bcfc4b814610153575b600080fd5b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015161014c3660046111ca565b61024d565b005b61015c60065481565b604051908152602001610135565b61015c60055481565b61015161018136600461115f565b6102d8565b6101516103d2565b60005473ffffffffffffffffffffffffffffffffffffffff16610114565b60035473ffffffffffffffffffffffffffffffffffffffff16610114565b61015c670de0b6b3a764000081565b6101516101e73660046111ca565b61045f565b61015c61067b565b6101516102023660046111ca565b610743565b61015161021536600461115f565b6107c9565b61015161022836600461117c565b6108f9565b6004546101149073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600655565b60005473ffffffffffffffffffffffffffffffffffffffff163314610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa49691f0dd6477ccef49962612a236d252e3a31c3be8b61fa6abeff3e74a75729060200160405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff163314610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b61045d6000610b83565b565b60025473ffffffffffffffffffffffffffffffffffffffff1633146104e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c65720000000060448201526064016102ca565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561054a57600080fd5b505afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058291906111e3565b9050600061058e610bf8565b9050811561064b578181111561064b5760035473ffffffffffffffffffffffffffffffffffffffff166340c10f19306105c785856112f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050505b6002546003546106769173ffffffffffffffffffffffffffffffffffffffff91821691163086610cc4565b505050565b6003546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091829173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156106e957600080fd5b505afa1580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072191906111e3565b9050600061072d610bf8565b90508082111561073d5750919050565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b600555565b60005473ffffffffffffffffffffffffffffffffffffffff16331461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ca565b73ffffffffffffffffffffffffffffffffffffffff81166108ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102ca565b6108f681610b83565b50565b60025473ffffffffffffffffffffffffffffffffffffffff16331461097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43616c6c6572206973206e6f742074686520636f6e74726f6c6c65720000000060448201526064016102ca565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156109e357600080fd5b505afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b91906111e3565b811115610b5b576003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610a8c57600080fd5b505afa158015610aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac491906111e3565b610ace90836112f9565b6003546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b50505050505b600354610b7f9073ffffffffffffffffffffffffffffffffffffffff168383610da6565b5050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000670de0b6b3a7640000610c0b610dfc565b60048054604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926318160ddd928282019260209290829003018186803b158015610c7357600080fd5b505afa158015610c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cab91906111e3565b610cb591906112bc565b610cbf9190611281565b905090565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610da09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e67565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106769084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610d1e565b6000806301e133806064600654670de0b6b3a7640000610e1c91906112bc565b610e269190611281565b610e309190611281565b9050600060055442610e4291906112f9565b9050610e4e81836112bc565b610e6090670de0b6b3a7640000611269565b9250505090565b6000610ec9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f739092919063ffffffff16565b8051909150156106765780806020019051810190610ee791906111a8565b610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ca565b6060610f828484600085610f8c565b90505b9392505050565b60608247101561101e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ca565b843b611086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ca565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516110af91906111fc565b60006040518083038185875af1925050503d80600081146110ec576040519150601f19603f3d011682016040523d82523d6000602084013e6110f1565b606091505b509150915061110182828661110c565b979650505050505050565b6060831561111b575081610f85565b82511561112b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca9190611218565b60006020828403121561117157600080fd5b8135610f858161136b565b6000806040838503121561118f57600080fd5b823561119a8161136b565b946020939093013593505050565b6000602082840312156111ba57600080fd5b81518015158114610f8557600080fd5b6000602082840312156111dc57600080fd5b5035919050565b6000602082840312156111f557600080fd5b5051919050565b6000825161120e818460208701611310565b9190910192915050565b6020815260008251806020840152611237816040850160208701611310565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561127c5761127c61133c565b500190565b6000826112b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112f4576112f461133c565b500290565b60008282101561130b5761130b61133c565b500390565b60005b8381101561132b578181015183820152602001611313565b83811115610da05750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146108f657600080fdfea264697066735822122038eb7107ef280ae8da31acf2393612a084aa36c8cab3c793ce3a766b8961a17764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBaseToken()": {
        "returns": {
          "_0": "The Base Token address"
        }
      },
      "getController()": {
        "details": "Functions with the `onlyController` modifier can only be called by this Strategy Controller.",
        "returns": {
          "_0": "The Strategy Controller address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "apy()": {
        "notice": "Integer percent APY for mock strategy, editable in case we need to modify later for testnet"
      },
      "deposit(uint256)": {
        "notice": "`_baseToken` must blacklist users besides governance and controller from sending to this contract to prevent unwanted share inflation from users directly sending funds to the strategy"
      },
      "getBaseToken()": {
        "notice": "The ERC20 asset that this strategy utilizes to earn yield and return profits with."
      },
      "getController()": {
        "notice": "Returns the Strategy Controller that intermediates interactions between a vault and this strategy."
      },
      "setApy(uint256)": {
        "notice": "Virtual APY yields will be calculated from the starting value of INITIAL_SHARE_VALUE"
      },
      "setBeginning(uint256)": {
        "notice": "Initializes to current timestamp, changeable by governance if needed later"
      },
      "totalValue()": {
        "notice": "Virtual balance is the amount owed to all shareholders based on the current timestamp and virtual APY. This returns the actual `_baseToken` balance if it is greater than the `_virtualBalance`, which for this mock strategy, will always be when a user deposits funds prior to minting shares. After a user deposits funds via `deposit()`, `totalValue()` should return the `_actualBalance` to allow Collateral to determine how many shares to mint for a user. Once the shares are minted, the `_virtualBalance` will once again surpass the `_actualBalance`."
      },
      "vault()": {
        "notice": "This would not exist in an actual strategy since strategies are vault agnostic, only exists because we need to know vault shares supply to simulate a `totalValue()`"
      },
      "withdraw(address,uint256)": {
        "notice": "We enforce `_baseToken` ownership here and not in the initializer since we would have to deterministically figure out strategy deployment address ahead of time"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 964,
        "contract": "contracts/core/mocks/MockStrategy.sol:MockStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1072,
        "contract": "contracts/core/mocks/MockStrategy.sol:MockStrategy",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7029,
        "contract": "contracts/core/mocks/MockStrategy.sol:MockStrategy",
        "label": "_controller",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStrategyController)6861"
      },
      {
        "astId": 7033,
        "contract": "contracts/core/mocks/MockStrategy.sol:MockStrategy",
        "label": "_baseToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILongShortToken)6467"
      },
      {
        "astId": 7037,
        "contract": "contracts/core/mocks/MockStrategy.sol:MockStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1725"
      },
      {
        "astId": 7039,
        "contract": "contracts/core/mocks/MockStrategy.sol:MockStrategy",
        "label": "beginning",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7042,
        "contract": "contracts/core/mocks/MockStrategy.sol:MockStrategy",
        "label": "apy",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1725": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILongShortToken)6467": {
        "encoding": "inplace",
        "label": "contract ILongShortToken",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategyController)6861": {
        "encoding": "inplace",
        "label": "contract IStrategyController",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
