{
  "address": "0x2713582D9ABe29C9Df2dac8785f2a43b8985BE8a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Allocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousNominee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newNominee",
          "type": "address"
        }
      ],
      "name": "NomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newPaused",
          "type": "bool"
        }
      ],
      "name": "PausedChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "getAmountAllocated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "getClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "getClaimedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAllocatedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "getVestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_newPaused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newToken",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVestingEndTime",
          "type": "uint256"
        }
      ],
      "name": "setVestingEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVestingStartTime",
          "type": "uint256"
        }
      ],
      "name": "setVestingStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newNominee",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20Tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0be3d44b2e0f5233a9322410d9882154f623a11c190cabc9339215c59a838669",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0x2713582D9ABe29C9Df2dac8785f2a43b8985BE8a",
    "transactionIndex": 1,
    "gasUsed": "1829556",
    "logsBloom": "0x
    "blockHash": "0x4a0abc3fb1c046d8d5a376c2233019944d4ac0852b82239663232b282ae0870f",
    "transactionHash": "0x0be3d44b2e0f5233a9322410d9882154f623a11c190cabc9339215c59a838669",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24844162,
        "transactionHash": "0x0be3d44b2e0f5233a9322410d9882154f623a11c190cabc9339215c59a838669",
        "address": "0x2713582D9ABe29C9Df2dac8785f2a43b8985BE8a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4a0abc3fb1c046d8d5a376c2233019944d4ac0852b82239663232b282ae0870f"
      }
    ],
    "blockNumber": 24844162,
    "cumulativeGasUsed": "1829556",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "92797c126852f255b62c4db0ee32d1ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Allocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNominee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNominee\",\"type\":\"address\"}],\"name\":\"NomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newPaused\",\"type\":\"bool\"}],\"name\":\"PausedChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getAmountAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocatedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVestingEndTime\",\"type\":\"uint256\"}],\"name\":\"setVestingEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVestingStartTime\",\"type\":\"uint256\"}],\"name\":\"setVestingStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNominee\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by the current nominee. Sets nominee back to zero address.\"},\"claim()\":{\"details\":\"Only claimable when not paused.Claimable amount will be 0 if the vested amount is less than the total claimed amount. This is possible if the recipient's allocation was adjusted to be lower.\"},\"getNominee()\":{\"returns\":{\"_0\":\"The current nominee\"}},\"getToken()\":{\"returns\":{\"_0\":\"Address of the vested tokens\"}},\"getTotalAllocatedSupply()\":{\"returns\":{\"_0\":\"Total amount of tokens allocated to all recipients\"}},\"getVestingEndTime()\":{\"returns\":{\"_0\":\"Unix timestamp for when the vesting ends\"}},\"getVestingStartTime()\":{\"returns\":{\"_0\":\"Unix timestamp for when the vesting starts\"}},\"isPaused()\":{\"returns\":{\"_0\":\"Whether the contract is currently paused\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts ownership nomination.\"},\"claim()\":{\"notice\":\"Transfers vested amount of tokens to the caller.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vesting/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":25000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/vesting/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IVesting.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/Pausable.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/WithdrawERC20.sol\\\";\\n\\ncontract Vesting is IVesting, Pausable, WithdrawERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private _token;\\n  uint256 private _vestingStartTime;\\n  uint256 private _vestingEndTime;\\n\\n  mapping(address => uint256) private _recipientToAllocatedAmount;\\n  mapping(address => uint256) private _recipientToClaimedAmount;\\n\\n  uint256 private _totalAllocatedSupply;\\n\\n  constructor() {}\\n\\n  function setToken(address _newToken) external override onlyOwner {\\n    _token = IERC20(_newToken);\\n  }\\n\\n  function setVestingStartTime(uint256 _newVestingStartTime)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    require(\\n      _newVestingStartTime < _vestingEndTime,\\n      \\\"Vesting start time >= end time\\\"\\n    );\\n    _vestingStartTime = _newVestingStartTime;\\n  }\\n\\n  function setVestingEndTime(uint256 _newVestingEndTime)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    require(\\n      _newVestingEndTime > _vestingStartTime,\\n      \\\"Vesting end time <= start time\\\"\\n    );\\n    _vestingEndTime = _newVestingEndTime;\\n  }\\n\\n  function setAllocations(\\n    address[] calldata _recipients,\\n    uint256[] calldata _amounts\\n  ) external override onlyOwner {\\n    require(_recipients.length == _amounts.length, \\\"Array length mismatch\\\");\\n    uint256 _newTotalAllocatedSupply = _totalAllocatedSupply;\\n    uint256 _arrayLength = _recipients.length;\\n    for (uint256 i; i < _arrayLength; ) {\\n      uint256 _amount = _amounts[i];\\n      address _recipient = _recipients[i];\\n      uint256 _prevAllocatedAmount = _recipientToAllocatedAmount[_recipient];\\n      /**\\n       * If the new allocation amount is greater than _prevAllocatedAmount,\\n       * the absolute difference is added to\\n       * _newTotalAllocatedSupply, otherwise it is subtracted.\\n       */\\n      if (_amount > _prevAllocatedAmount) {\\n        unchecked {\\n          _newTotalAllocatedSupply += _amount - _prevAllocatedAmount;\\n        }\\n      } else {\\n        unchecked {\\n          _newTotalAllocatedSupply -= _prevAllocatedAmount - _amount;\\n        }\\n      }\\n      _recipientToAllocatedAmount[_recipient] = _amount;\\n      emit Allocation(_recipient, _amount);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    _totalAllocatedSupply = _newTotalAllocatedSupply;\\n  }\\n\\n  function claim() external override nonReentrant whenNotPaused {\\n    uint256 _claimableAmount = getClaimableAmount(msg.sender);\\n    IERC20 _vestedToken = _token;\\n    require(_claimableAmount != 0, \\\"Claimable amount = 0\\\");\\n    require(\\n      _vestedToken.balanceOf(address(this)) >= _claimableAmount,\\n      \\\"Insufficient balance in contract\\\"\\n    );\\n    _recipientToClaimedAmount[msg.sender] += _claimableAmount;\\n    _vestedToken.transfer(msg.sender, _claimableAmount);\\n    emit Claim(msg.sender, _claimableAmount);\\n  }\\n\\n  function getClaimableAmount(address _recipient)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    uint256 _vestedAmount = getVestedAmount(_recipient);\\n    uint256 _claimedTillNow = _recipientToClaimedAmount[_recipient];\\n    if (_vestedAmount > _claimedTillNow) {\\n      return (_vestedAmount - _claimedTillNow);\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function getVestedAmount(address _recipient)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    uint256 _start = _vestingStartTime;\\n    uint256 _end = _vestingEndTime;\\n    uint256 _allocated = _recipientToAllocatedAmount[_recipient];\\n    if (block.timestamp < _start) return 0;\\n    uint256 _vested = (_allocated * (block.timestamp - _start)) /\\n      (_end - _start);\\n    return _vested < _allocated ? _vested : _allocated;\\n  }\\n\\n  function getToken() external view override returns (address) {\\n    return address(_token);\\n  }\\n\\n  function getVestingStartTime() external view override returns (uint256) {\\n    return _vestingStartTime;\\n  }\\n\\n  function getVestingEndTime() external view override returns (uint256) {\\n    return _vestingEndTime;\\n  }\\n\\n  function getAmountAllocated(address _recipient)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _recipientToAllocatedAmount[_recipient];\\n  }\\n\\n  function getTotalAllocatedSupply() external view override returns (uint256) {\\n    return _totalAllocatedSupply;\\n  }\\n\\n  function getClaimedAmount(address _recipient)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _recipientToClaimedAmount[_recipient];\\n  }\\n}\\n\",\"keccak256\":\"0x72ee491c3fea596c1f23797a2f0856c3f460ecab726af579c718047a54aefefe\",\"license\":\"AGPL-3.0\"},\"contracts/vesting/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Allows tokens to be claimed according to a vesting schedule\\n * shared by all designated recipients.\\n */\\ninterface IVesting {\\n  /// @dev Emitted via `setAllocations()`.\\n  /// @param recipient Address of the recipient of tokens\\n  /// @param amount Amount of tokens allocated to recipient\\n  event Allocation(address recipient, uint256 amount);\\n\\n  /// @dev Emitted via `claim()`.\\n  /// @param recipient Address of the recipient of tokens\\n  /// @param amount Amount of tokens claimed by recipient\\n  event Claim(address recipient, uint256 amount);\\n\\n  /**\\n   * @dev Only callable by `owner()`.\\n   * @param newToken Address of the ERC20 token to be vested\\n   */\\n  function setToken(address newToken) external;\\n\\n  /**\\n   * @dev Only callable by `owner()`.\\n   * @param newVestingStartTime Unix timestamp for when the vesting starts\\n   */\\n  function setVestingStartTime(uint256 newVestingStartTime) external;\\n\\n  /**\\n   * @dev Only callable by `owner()`.\\n   * @param newVestingEndTime Unix timestamp for when the vesting ends\\n   */\\n  function setVestingEndTime(uint256 newVestingEndTime) external;\\n\\n  /**\\n   * @notice Sets/Adjusts allocation amount of ERC20 tokens\\n   * to be vested for each user.\\n   * @dev Only callable by `owner()`.\\n   * @param recipients List of recipient addresses\\n   * @param amounts Respective amount of tokens allocated to each recipient\\n   */\\n  function setAllocations(\\n    address[] calldata recipients,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @notice Transfers vested amount of tokens to the caller.\\n   * @dev Only claimable when not paused.\\n   * @dev Claimable amount will be 0 if the vested amount is less than the\\n   * total claimed amount. This is possible if the recipient's allocation was\\n   * adjusted to be lower.\\n   */\\n  function claim() external;\\n\\n  /**\\n   * @return Address of the vested tokens\\n   */\\n  function getToken() external view returns (address);\\n\\n  /**\\n   * @return Unix timestamp for when the vesting starts\\n   */\\n  function getVestingStartTime() external view returns (uint256);\\n\\n  /**\\n   * @return Unix timestamp for when the vesting ends\\n   */\\n  function getVestingEndTime() external view returns (uint256);\\n\\n  /**\\n   * @param recipient Address of the recipient of tokens\\n   * @return Amount of tokens allocated to recipient\\n   */\\n  function getAmountAllocated(address recipient)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @return Total amount of tokens allocated to all recipients\\n   */\\n  function getTotalAllocatedSupply() external view returns (uint256);\\n\\n  /**\\n   * @param recipient Address of the recipient of tokens\\n   * @return Total amount that has been claimed by the recipient till now\\n   */\\n  function getClaimedAmount(address recipient) external view returns (uint256);\\n\\n  /**\\n   * @param recipient Address of the recipient of tokens\\n   * @return Amount that can be claimed by the recipient\\n   */\\n  function getClaimableAmount(address recipient)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @param recipient Address of the recipient of tokens\\n   * @return Amount of tokens vested till now for the recipient\\n   */\\n  function getVestedAmount(address recipient) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xab7de9623e76dd53a426594bf05ab830124ff06dbba85f93f4dd91b0aae80f1f\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./SafeOwnable.sol\\\";\\nimport \\\"./interfaces/IPausable.sol\\\";\\n\\ncontract Pausable is IPausable, SafeOwnable {\\n  bool private _paused;\\n\\n  modifier whenNotPaused() {\\n    require(!_paused, \\\"Paused\\\");\\n    _;\\n  }\\n\\n  constructor() {}\\n\\n  function setPaused(bool _newPaused) external override onlyOwner {\\n    _paused = _newPaused;\\n    emit PausedChange(_newPaused);\\n  }\\n\\n  function isPaused() external view override returns (bool) {\\n    return _paused;\\n  }\\n}\\n\",\"keccak256\":\"0xc37c14ad2cadb737480c38a2dbce79dd7bbe97bd0057accd481caaf08d0ad1e3\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISafeOwnable.sol\\\";\\n\\ncontract SafeOwnable is ISafeOwnable, Ownable {\\n  address private _nominee;\\n\\n  modifier onlyNominee() {\\n    require(_msgSender() == _nominee, \\\"msg.sender != nominee\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address _newNominee)\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    _setNominee(_newNominee);\\n  }\\n\\n  function acceptOwnership() public virtual override onlyNominee {\\n    _transferOwnership(_nominee);\\n    _setNominee(address(0));\\n  }\\n\\n  function renounceOwnership()\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    super.renounceOwnership();\\n    _setNominee(address(0));\\n  }\\n\\n  function getNominee() public view virtual override returns (address) {\\n    return _nominee;\\n  }\\n\\n  function _setNominee(address _newNominee) internal virtual {\\n    address _oldNominee = _nominee;\\n    _nominee = _newNominee;\\n    emit NomineeUpdate(_oldNominee, _newNominee);\\n  }\\n}\\n\",\"keccak256\":\"0xfcedda47c0b7fdc6504e8dcb6a0a5702b4496f8ec1f7b059405d002e9a68a30c\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/WithdrawERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IWithdrawERC20.sol\\\";\\nimport \\\"./SafeOwnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract WithdrawERC20 is IWithdrawERC20, SafeOwnable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  constructor() {}\\n\\n  function withdrawERC20(\\n    address[] calldata _erc20Tokens,\\n    uint256[] calldata _amounts\\n  ) external override onlyOwner nonReentrant {\\n    require(_erc20Tokens.length == _amounts.length, \\\"Array length mismatch\\\");\\n    address _owner = owner();\\n    uint256 _arrayLength = _erc20Tokens.length;\\n    for (uint256 i; i < _arrayLength; ) {\\n      IERC20(_erc20Tokens[i]).safeTransfer(_owner, _amounts[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x27f87e16239a6099c573d48335bf357bbeeef5ae2ea7e6406a822e7859d7dff4\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Allows a contract owner to pause their contract.\\n * @dev Pausing a contract will only affect functions using the included\\n * `whenNotPaused` modifier.\\n */\\ninterface IPausable {\\n  /**\\n   * @dev Emitted by `setPaused()`.\\n   * @param newPaused Whether the contract was paused\\n   */\\n  event PausedChange(bool newPaused);\\n\\n  /**\\n   * @notice Pauses or unpauses the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param newPaused Whether the contract is to be paused\\n   */\\n  function setPaused(bool newPaused) external;\\n\\n  /// @return Whether the contract is currently paused\\n  function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x92940f698b025fa14fecbab10b5ed4f2c7d648c67866282c17234b22650bc99c\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\\n * an address to be nominated, and then accept that nomination, before\\n * ownership is transferred.\\n */\\ninterface ISafeOwnable {\\n  /**\\n   * @dev Emitted via `transferOwnership()`.\\n   * @param previousNominee The previous nominee\\n   * @param newNominee The new nominee\\n   */\\n  event NomineeUpdate(\\n    address indexed previousNominee,\\n    address indexed newNominee\\n  );\\n\\n  /**\\n   * @notice Nominates an address to be owner of the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param nominee The address that will be nominated\\n   */\\n  function transferOwnership(address nominee) external;\\n\\n  /**\\n   * @notice Renounces ownership of contract and leaves the contract\\n   * without any owner.\\n   * @dev Only callable by `owner()`.\\n   * Sets nominee back to zero address.\\n   * It will not be possible to call `onlyOwner` functions anymore.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @notice Accepts ownership nomination.\\n   * @dev Only callable by the current nominee. Sets nominee back to zero\\n   * address.\\n   */\\n  function acceptOwnership() external;\\n\\n  /// @return The current nominee\\n  function getNominee() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f8ea0098b1205f0e346f320aed8ea83d2de8fcbf08264b2e4fcefcc25c7780\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IWithdrawERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Allows a contract owner to withdraw any ERC20 tokens residing\\n * within the contract to themselves.\\n */\\ninterface IWithdrawERC20 {\\n  /**\\n   * @notice Withdraws corresponding `amounts` of each ERC20 in `erc20Tokens`.\\n   * @dev Length of `erc20Tokens` and `amounts` must match.\\n   *\\n   * Only callable by `owner()`.\\n   * @param erc20Tokens ERC20 tokens to be withdrawn\\n   * @param amounts Amounts to be withdrawn\\n   */\\n  function withdrawERC20(\\n    address[] calldata erc20Tokens,\\n    uint256[] calldata amounts\\n  ) external;\\n}\\n\",\"keccak256\":\"0x78533c048e0b85b78fa937fce3a86dc24e178ec5543d329cab87145c24aeb31c\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610024565b6001600255610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611610806100836000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80637fa97e0a116100d8578063b6ca0b631161008c578063d7f7402811610066578063d7f7402814610321578063e12f3a6114610357578063f2fde38b1461036a57600080fd5b8063b6ca0b63146102e8578063d46e4bcd14610306578063d5a73fdd1461030e57600080fd5b80638da5cb5b116100bd5780638da5cb5b146102665780638df40be814610284578063b187bd26146102ba57600080fd5b80637fa97e0a1461024b5780638307dc981461025e57600080fd5b806321df0da71161012f5780634e71d92d116101145780634e71d92d14610233578063715018a61461023b57806379ba50971461024357600080fd5b806321df0da7146101dd5780633113076a1461022157600080fd5b8063188190221161016057806318819022146101a45780631c722a5b146101b75780631ff64acd146101ca57600080fd5b8063144fa6d71461017c57806316c38b3c14610191575b600080fd5b61018f61018a36600461131c565b61037d565b005b61018f61019f3660046113be565b6103cc565b61018f6101b2366004611352565b610458565b61018f6101c53660046113f8565b6105db565b61018f6101d8366004611352565b610653565b60035473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6005545b604051908152602001610218565b61018f6107d8565b61018f610b6f565b61018f610b8b565b61018f6102593660046113f8565b610c44565b600454610225565b60005473ffffffffffffffffffffffffffffffffffffffff166101f7565b61022561029236600461131c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205490565b60015474010000000000000000000000000000000000000000900460ff166040519015158152602001610218565b60015473ffffffffffffffffffffffffffffffffffffffff166101f7565b600854610225565b61022561031c36600461131c565b610cbc565b61022561032f36600461131c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205490565b61022561036536600461131c565b610d44565b61018f61037836600461131c565b610d9d565b610385610db1565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6103d4610db1565b6001805482151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517f9f0feb12ec37d0bafce34391846a3029957f297df0cdab56f163ad02591b87f39061044d90831515815260200190565b60405180910390a150565b610460610db1565b6002805414156104d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002805582811461053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4172726179206c656e677468206d69736d61746368000000000000000000000060448201526064016104c8565b6000805473ffffffffffffffffffffffffffffffffffffffff169084905b818110156105cd576105c58386868481811061057a5761057a61159d565b905060200201358989858181106105935761059361159d565b90506020020160208101906105a8919061131c565b73ffffffffffffffffffffffffffffffffffffffff169190610e32565b60010161055c565b505060016002555050505050565b6105e3610db1565b600554811061064e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f56657374696e672073746172742074696d65203e3d20656e642074696d65000060448201526064016104c8565b600455565b61065b610db1565b8281146106c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4172726179206c656e677468206d69736d61746368000000000000000000000060448201526064016104c8565b6008548360005b818110156107cd5760008585838181106106e7576106e761159d565b90506020020135905060008888848181106107045761070461159d565b9050602002016020810190610719919061131c565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604090205490915080831115610756578083038601955061075e565b828103860395505b73ffffffffffffffffffffffffffffffffffffffff8216600081815260066020908152604091829020869055815192835282018590527f7a994e2e422225102fed915394da80aeeea86e2c0ca3f41d6d48421252f83b92910160405180910390a18360010193505050506106cb565b505060085550505050565b600280541415610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c8565b6002805560015474010000000000000000000000000000000000000000900460ff16156108cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f506175736564000000000000000000000000000000000000000000000000000060448201526064016104c8565b60006108d833610d44565b60035490915073ffffffffffffffffffffffffffffffffffffffff168161095b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f436c61696d61626c6520616d6f756e74203d203000000000000000000000000060448201526064016104c8565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152829073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156109c257600080fd5b505afa1580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa9190611411565b1015610a62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f496e73756666696369656e742062616c616e636520696e20636f6e747261637460448201526064016104c8565b3360009081526007602052604081208054849290610a81908490611497565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff82169063a9059cbb90604401602060405180830381600087803b158015610af457600080fd5b505af1158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c91906113db565b5060408051338152602081018490527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910160405180910390a150506001600255565b610b77610db1565b610b7f610ec4565b610b896000610ed6565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e64657220213d206e6f6d696e6565000000000000000000000060448201526064016104c8565b600154610b7f9073ffffffffffffffffffffffffffffffffffffffff16610f4d565b610c4c610db1565b6004548111610cb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f56657374696e6720656e642074696d65203c3d2073746172742074696d65000060448201526064016104c8565b600555565b60045460055473ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120549092919042831115610cff57506000949350505050565b6000610d0b8484611527565b610d158542611527565b610d1f90846114ea565b610d2991906114af565b9050818110610d385781610d3a565b805b9695505050505050565b600080610d5083610cbc565b73ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090205490915080821115610d9357610d8b8183611527565b949350505050565b5060009392505050565b610da5610db1565b610dae81610ed6565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ebf908490610fc2565b505050565b610ecc610db1565b610b896000610f4d565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611024826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110ce9092919063ffffffff16565b805190915015610ebf578080602001905181019061104291906113db565b610ebf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b60606110dd84846000856110e7565b90505b9392505050565b606082471015611179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b73ffffffffffffffffffffffffffffffffffffffff85163b6111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611220919061142a565b60006040518083038185875af1925050503d806000811461125d576040519150601f19603f3d011682016040523d82523d6000602084013e611262565b606091505b509150915061127282828661127d565b979650505050505050565b6060831561128c5750816110e0565b82511561129c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c89190611446565b60008083601f8401126112e257600080fd5b50813567ffffffffffffffff8111156112fa57600080fd5b6020830191508360208260051b850101111561131557600080fd5b9250929050565b60006020828403121561132e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146110e057600080fd5b6000806000806040858703121561136857600080fd5b843567ffffffffffffffff8082111561138057600080fd5b61138c888389016112d0565b909650945060208701359150808211156113a557600080fd5b506113b2878288016112d0565b95989497509550505050565b6000602082840312156113d057600080fd5b81356110e0816115cc565b6000602082840312156113ed57600080fd5b81516110e0816115cc565b60006020828403121561140a57600080fd5b5035919050565b60006020828403121561142357600080fd5b5051919050565b6000825161143c81846020870161153e565b9190910192915050565b602081526000825180602084015261146581604085016020870161153e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156114aa576114aa61156e565b500190565b6000826114e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115225761152261156e565b500290565b6000828210156115395761153961156e565b500390565b60005b83811015611559578181015183820152602001611541565b83811115611568576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8015158114610dae57600080fdfea2646970667358221220e450035e410ad679ea4607a20947a0989f334c0aa4c35aea29c466b4c53c4f1d64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80637fa97e0a116100d8578063b6ca0b631161008c578063d7f7402811610066578063d7f7402814610321578063e12f3a6114610357578063f2fde38b1461036a57600080fd5b8063b6ca0b63146102e8578063d46e4bcd14610306578063d5a73fdd1461030e57600080fd5b80638da5cb5b116100bd5780638da5cb5b146102665780638df40be814610284578063b187bd26146102ba57600080fd5b80637fa97e0a1461024b5780638307dc981461025e57600080fd5b806321df0da71161012f5780634e71d92d116101145780634e71d92d14610233578063715018a61461023b57806379ba50971461024357600080fd5b806321df0da7146101dd5780633113076a1461022157600080fd5b8063188190221161016057806318819022146101a45780631c722a5b146101b75780631ff64acd146101ca57600080fd5b8063144fa6d71461017c57806316c38b3c14610191575b600080fd5b61018f61018a36600461131c565b61037d565b005b61018f61019f3660046113be565b6103cc565b61018f6101b2366004611352565b610458565b61018f6101c53660046113f8565b6105db565b61018f6101d8366004611352565b610653565b60035473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6005545b604051908152602001610218565b61018f6107d8565b61018f610b6f565b61018f610b8b565b61018f6102593660046113f8565b610c44565b600454610225565b60005473ffffffffffffffffffffffffffffffffffffffff166101f7565b61022561029236600461131c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205490565b60015474010000000000000000000000000000000000000000900460ff166040519015158152602001610218565b60015473ffffffffffffffffffffffffffffffffffffffff166101f7565b600854610225565b61022561031c36600461131c565b610cbc565b61022561032f36600461131c565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205490565b61022561036536600461131c565b610d44565b61018f61037836600461131c565b610d9d565b610385610db1565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6103d4610db1565b6001805482151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556040517f9f0feb12ec37d0bafce34391846a3029957f297df0cdab56f163ad02591b87f39061044d90831515815260200190565b60405180910390a150565b610460610db1565b6002805414156104d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002805582811461053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4172726179206c656e677468206d69736d61746368000000000000000000000060448201526064016104c8565b6000805473ffffffffffffffffffffffffffffffffffffffff169084905b818110156105cd576105c58386868481811061057a5761057a61159d565b905060200201358989858181106105935761059361159d565b90506020020160208101906105a8919061131c565b73ffffffffffffffffffffffffffffffffffffffff169190610e32565b60010161055c565b505060016002555050505050565b6105e3610db1565b600554811061064e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f56657374696e672073746172742074696d65203e3d20656e642074696d65000060448201526064016104c8565b600455565b61065b610db1565b8281146106c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4172726179206c656e677468206d69736d61746368000000000000000000000060448201526064016104c8565b6008548360005b818110156107cd5760008585838181106106e7576106e761159d565b90506020020135905060008888848181106107045761070461159d565b9050602002016020810190610719919061131c565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604090205490915080831115610756578083038601955061075e565b828103860395505b73ffffffffffffffffffffffffffffffffffffffff8216600081815260066020908152604091829020869055815192835282018590527f7a994e2e422225102fed915394da80aeeea86e2c0ca3f41d6d48421252f83b92910160405180910390a18360010193505050506106cb565b505060085550505050565b600280541415610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c8565b6002805560015474010000000000000000000000000000000000000000900460ff16156108cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f506175736564000000000000000000000000000000000000000000000000000060448201526064016104c8565b60006108d833610d44565b60035490915073ffffffffffffffffffffffffffffffffffffffff168161095b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f436c61696d61626c6520616d6f756e74203d203000000000000000000000000060448201526064016104c8565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152829073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156109c257600080fd5b505afa1580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa9190611411565b1015610a62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f496e73756666696369656e742062616c616e636520696e20636f6e747261637460448201526064016104c8565b3360009081526007602052604081208054849290610a81908490611497565b90915550506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff82169063a9059cbb90604401602060405180830381600087803b158015610af457600080fd5b505af1158015610b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2c91906113db565b5060408051338152602081018490527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910160405180910390a150506001600255565b610b77610db1565b610b7f610ec4565b610b896000610ed6565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e64657220213d206e6f6d696e6565000000000000000000000060448201526064016104c8565b600154610b7f9073ffffffffffffffffffffffffffffffffffffffff16610f4d565b610c4c610db1565b6004548111610cb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f56657374696e6720656e642074696d65203c3d2073746172742074696d65000060448201526064016104c8565b600555565b60045460055473ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120549092919042831115610cff57506000949350505050565b6000610d0b8484611527565b610d158542611527565b610d1f90846114ea565b610d2991906114af565b9050818110610d385781610d3a565b805b9695505050505050565b600080610d5083610cbc565b73ffffffffffffffffffffffffffffffffffffffff841660009081526007602052604090205490915080821115610d9357610d8b8183611527565b949350505050565b5060009392505050565b610da5610db1565b610dae81610ed6565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c8565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610ebf908490610fc2565b505050565b610ecc610db1565b610b896000610f4d565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611024826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110ce9092919063ffffffff16565b805190915015610ebf578080602001905181019061104291906113db565b610ebf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b60606110dd84846000856110e7565b90505b9392505050565b606082471015611179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b73ffffffffffffffffffffffffffffffffffffffff85163b6111f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611220919061142a565b60006040518083038185875af1925050503d806000811461125d576040519150601f19603f3d011682016040523d82523d6000602084013e611262565b606091505b509150915061127282828661127d565b979650505050505050565b6060831561128c5750816110e0565b82511561129c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c89190611446565b60008083601f8401126112e257600080fd5b50813567ffffffffffffffff8111156112fa57600080fd5b6020830191508360208260051b850101111561131557600080fd5b9250929050565b60006020828403121561132e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146110e057600080fd5b6000806000806040858703121561136857600080fd5b843567ffffffffffffffff8082111561138057600080fd5b61138c888389016112d0565b909650945060208701359150808211156113a557600080fd5b506113b2878288016112d0565b95989497509550505050565b6000602082840312156113d057600080fd5b81356110e0816115cc565b6000602082840312156113ed57600080fd5b81516110e0816115cc565b60006020828403121561140a57600080fd5b5035919050565b60006020828403121561142357600080fd5b5051919050565b6000825161143c81846020870161153e565b9190910192915050565b602081526000825180602084015261146581604085016020870161153e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156114aa576114aa61156e565b500190565b6000826114e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115225761152261156e565b500290565b6000828210156115395761153961156e565b500390565b60005b83811015611559578181015183820152602001611541565b83811115611568576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8015158114610dae57600080fdfea2646970667358221220e450035e410ad679ea4607a20947a0989f334c0aa4c35aea29c466b4c53c4f1d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by the current nominee. Sets nominee back to zero address."
      },
      "claim()": {
        "details": "Only claimable when not paused.Claimable amount will be 0 if the vested amount is less than the total claimed amount. This is possible if the recipient's allocation was adjusted to be lower."
      },
      "getNominee()": {
        "returns": {
          "_0": "The current nominee"
        }
      },
      "getToken()": {
        "returns": {
          "_0": "Address of the vested tokens"
        }
      },
      "getTotalAllocatedSupply()": {
        "returns": {
          "_0": "Total amount of tokens allocated to all recipients"
        }
      },
      "getVestingEndTime()": {
        "returns": {
          "_0": "Unix timestamp for when the vesting ends"
        }
      },
      "getVestingStartTime()": {
        "returns": {
          "_0": "Unix timestamp for when the vesting starts"
        }
      },
      "isPaused()": {
        "returns": {
          "_0": "Whether the contract is currently paused"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts ownership nomination."
      },
      "claim()": {
        "notice": "Transfers vested amount of tokens to the caller."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3315,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47123,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_nominee",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 47072,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 4293,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 46544,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)6387"
      },
      {
        "astId": 46546,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_vestingStartTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 46548,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_vestingEndTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 46552,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_recipientToAllocatedAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46556,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_recipientToClaimedAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 46558,
        "contract": "contracts/vesting/Vesting.sol:Vesting",
        "label": "_totalAllocatedSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)6387": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
