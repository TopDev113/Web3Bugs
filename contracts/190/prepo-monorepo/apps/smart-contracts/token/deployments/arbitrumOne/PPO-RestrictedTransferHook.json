{
  "address": "0xC1c2e69b607D3A64DA9a9112d37020fC32254543",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "newBlocklist",
          "type": "address"
        }
      ],
      "name": "BlocklistChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "newDestinationAllowlist",
          "type": "address"
        }
      ],
      "name": "DestinationAllowlistChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousNominee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newNominee",
          "type": "address"
        }
      ],
      "name": "NomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "newSourceAllowlist",
          "type": "address"
        }
      ],
      "name": "SourceAllowlistChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlocklist",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDestinationAllowlist",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSourceAllowlist",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "hook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "_newBlocklist",
          "type": "address"
        }
      ],
      "name": "setBlocklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "_newDestinationAllowlist",
          "type": "address"
        }
      ],
      "name": "setDestinationAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "_newSourceAllowlist",
          "type": "address"
        }
      ],
      "name": "setSourceAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newNominee",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c207c79602771f8118c2f9246c980acc4f9c223b1442479a1b45dccfd269363",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0xC1c2e69b607D3A64DA9a9112d37020fC32254543",
    "transactionIndex": 1,
    "gasUsed": "1014092",
    "logsBloom": "0x
    "blockHash": "0x56c444c9324eb200d7ababb6e93c4f945513fc463b6b8871fc1f1966d58cc315",
    "transactionHash": "0x1c207c79602771f8118c2f9246c980acc4f9c223b1442479a1b45dccfd269363",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24840003,
        "transactionHash": "0x1c207c79602771f8118c2f9246c980acc4f9c223b1442479a1b45dccfd269363",
        "address": "0xC1c2e69b607D3A64DA9a9112d37020fC32254543",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x56c444c9324eb200d7ababb6e93c4f945513fc463b6b8871fc1f1966d58cc315"
      }
    ],
    "blockNumber": 24840003,
    "cumulativeGasUsed": "1014092",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "92797c126852f255b62c4db0ee32d1ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"newBlocklist\",\"type\":\"address\"}],\"name\":\"BlocklistChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"newDestinationAllowlist\",\"type\":\"address\"}],\"name\":\"DestinationAllowlistChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNominee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNominee\",\"type\":\"address\"}],\"name\":\"NomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"newSourceAllowlist\",\"type\":\"address\"}],\"name\":\"SourceAllowlistChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlocklist\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDestinationAllowlist\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSourceAllowlist\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"hook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"_newBlocklist\",\"type\":\"address\"}],\"name\":\"setBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"_newDestinationAllowlist\",\"type\":\"address\"}],\"name\":\"setDestinationAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"_newSourceAllowlist\",\"type\":\"address\"}],\"name\":\"setSourceAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNominee\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by the current nominee. Sets nominee back to zero address.\"},\"getBlocklist()\":{\"returns\":{\"_0\":\"The blocklist contract\"}},\"getDestinationAllowlist()\":{\"returns\":{\"_0\":\"The destination allowlist contract\"}},\"getNominee()\":{\"returns\":{\"_0\":\"The current nominee\"}},\"getSourceAllowlist()\":{\"returns\":{\"_0\":\"The source allowlist contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts ownership nomination.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ppo/RestrictedTransferHook.sol\":\"RestrictedTransferHook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":25000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ppo/BlocklistTransferHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IBlocklistTransferHook.sol\\\";\\nimport \\\"./interfaces/IAccountList.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/SafeOwnable.sol\\\";\\n\\ncontract BlocklistTransferHook is IBlocklistTransferHook, SafeOwnable {\\n  IAccountList private _blocklist;\\n\\n  constructor() {}\\n\\n  function hook(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) public virtual override {\\n    IAccountList _list = _blocklist;\\n    require(!_list.isIncluded(_from), \\\"Sender blocked\\\");\\n    require(!_list.isIncluded(_to), \\\"Recipient blocked\\\");\\n  }\\n\\n  function setBlocklist(IAccountList _newBlocklist)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    _blocklist = _newBlocklist;\\n    emit BlocklistChange(_newBlocklist);\\n  }\\n\\n  function getBlocklist() external view override returns (IAccountList) {\\n    return _blocklist;\\n  }\\n}\\n\",\"keccak256\":\"0xfd1746d2c33dc614c89a0516e498b2d22eeb349d2a54194481ff231def86853e\",\"license\":\"AGPL-3.0\"},\"contracts/ppo/RestrictedTransferHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IRestrictedTransferHook.sol\\\";\\nimport \\\"./interfaces/IAccountList.sol\\\";\\nimport \\\"./BlocklistTransferHook.sol\\\";\\n\\ncontract RestrictedTransferHook is\\n  IRestrictedTransferHook,\\n  BlocklistTransferHook\\n{\\n  IAccountList private _sourceAllowlist;\\n  IAccountList private _destinationAllowlist;\\n\\n  constructor() {}\\n\\n  function hook(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) public virtual override(BlocklistTransferHook, ITransferHook) {\\n    super.hook(_from, _to, _amount);\\n    if (_sourceAllowlist.isIncluded(_from)) return;\\n    require(_destinationAllowlist.isIncluded(_to), \\\"Destination not allowed\\\");\\n  }\\n\\n  function setSourceAllowlist(IAccountList _newSourceAllowlist)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    _sourceAllowlist = _newSourceAllowlist;\\n    emit SourceAllowlistChange(_newSourceAllowlist);\\n  }\\n\\n  function setDestinationAllowlist(IAccountList _newDestinationAllowlist)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    _destinationAllowlist = _newDestinationAllowlist;\\n    emit DestinationAllowlistChange(_newDestinationAllowlist);\\n  }\\n\\n  function getSourceAllowlist() external view override returns (IAccountList) {\\n    return _sourceAllowlist;\\n  }\\n\\n  function getDestinationAllowlist()\\n    external\\n    view\\n    override\\n    returns (IAccountList)\\n  {\\n    return _destinationAllowlist;\\n  }\\n}\\n\",\"keccak256\":\"0x179a8930dacc43957802d0dd044615f41d80fac2a23d39bcf82672e602415f18\",\"license\":\"AGPL-3.0\"},\"contracts/ppo/interfaces/IAccountList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Stores whether an address is included in a set.\\n */\\ninterface IAccountList {\\n  /**\\n   * @notice Sets whether an address in `accounts` is included.\\n   * @dev Whether an account is included is based on the boolean value at its\\n   * respective index in `included`. This function will only edit the\\n   * inclusion of addresses in `accounts`.\\n   *\\n   * The length of `accounts` and `included` must match.\\n   *\\n   * Only callable by `owner()`.\\n   * @param accounts Addresses to change inclusion for\\n   * @param included Whether to include corresponding address in `accounts`\\n   */\\n  function set(address[] calldata accounts, bool[] calldata included) external;\\n\\n  /**\\n   * @notice Removes every address from the set. Atomically includes any\\n   * addresses in `newIncludedAccounts`.\\n   * @dev Only callable by `owner()`.\\n   * @param newIncludedAccounts Addresses to include after reset\\n   */\\n  function reset(address[] calldata newIncludedAccounts) external;\\n\\n  /**\\n   * @param account Address to check inclusion for\\n   * @return Whether `account` is included\\n   */\\n  function isIncluded(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1b3106d24b0118c197ca46f5ea24f2a5c703b12a9bc781a4d5430ffdfb4bc9d5\",\"license\":\"AGPL-3.0\"},\"contracts/ppo/interfaces/IBlocklistTransferHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./ITransferHook.sol\\\";\\nimport \\\"./IAccountList.sol\\\";\\n\\n/**\\n * @notice Hook that provides blocklist functionality for token transfers.\\n * A blocked address cannot send or receive the specified ERC20 token.\\n */\\ninterface IBlocklistTransferHook is ITransferHook {\\n  /**\\n   * @dev Emitted via `setBlocklist()`.\\n   * @param newBlocklist Address of the `IAccountList` contract\\n   */\\n  event BlocklistChange(IAccountList newBlocklist);\\n\\n  /**\\n   * @notice Sets the `IAccountList` contract that specifies the addresses to\\n   * block.\\n   * @param newBlocklist Address of the `IAccountList` contract\\n   */\\n  function setBlocklist(IAccountList newBlocklist) external;\\n\\n  ///@return The blocklist contract\\n  function getBlocklist() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0x15999b8c9808458e6cb335619f306aae73449ba384c8931625ed2a4e2e9da7d6\",\"license\":\"AGPL-3.0\"},\"contracts/ppo/interfaces/IRestrictedTransferHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./IBlocklistTransferHook.sol\\\";\\nimport \\\"./IAccountList.sol\\\";\\n\\n/**\\n * @notice Hook for restricting transfers of an ERC20 token.\\n * @dev Transfers of the specified token are restricted by default.\\n *\\n * Any address can send to an allowlisted destination address.\\n *\\n * Allowlisted source addresses are able to send to any other address\\n * (including addresses not on the destination allowlist).\\n *\\n * Blocklisted addresses cannot send or receive tokens, even if allowlisted.\\n */\\ninterface IRestrictedTransferHook is IBlocklistTransferHook {\\n  /**\\n   * @dev Emitted via `setSourceAllowlist()`.\\n   * @param newSourceAllowlist Address of the `IAccountList` contract\\n   */\\n  event SourceAllowlistChange(IAccountList newSourceAllowlist);\\n\\n  /**\\n   * @dev Emitted via `setDestinationAllowlist()`.\\n   * @param newDestinationAllowlist Address of the `IAccountList` contract\\n   */\\n  event DestinationAllowlistChange(IAccountList newDestinationAllowlist);\\n\\n  /**\\n   * @notice Sets the external `IAccountList` contract that specifies the\\n   * allowlisted source addresses.\\n   * @param newSourceAllowlist Address of the `IAccountList` contract\\n   */\\n  function setSourceAllowlist(IAccountList newSourceAllowlist) external;\\n\\n  /**\\n   * @notice Sets the external `IAccountList` contract that specifies the\\n   * allowlisted destination addresses.\\n   * @param newDestinationAllowlist Address of the `IAccountList` contract\\n   */\\n  function setDestinationAllowlist(IAccountList newDestinationAllowlist)\\n    external;\\n\\n  ///@return The source allowlist contract\\n  function getSourceAllowlist() external view returns (IAccountList);\\n\\n  ///@return The destination allowlist contract\\n  function getDestinationAllowlist() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0xbc2fc6e9f00361f1d053712f5250fdc70b5cfecc9268d3dd40406c9747a490bd\",\"license\":\"AGPL-3.0\"},\"contracts/ppo/interfaces/ITransferHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n///@notice External hook to be called before or after an ERC20 token transfer.\\ninterface ITransferHook {\\n  /**\\n   * @notice A generic hook function, to be called before or after a token\\n   * transfer.\\n   * @dev This function should reside in an ERC20's `_beforeTokenTransfer()`\\n   * or `_afterTokenTransfer()` internal functions.\\n   * @param from Address tokens are coming from\\n   * @param to Address tokens are going to\\n   * @param amount Token amount being transferred\\n   */\\n  function hook(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf70b34ddac359961e50beafd4ff9b14502b4485436277abfebcec26ed10c2d70\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISafeOwnable.sol\\\";\\n\\ncontract SafeOwnable is ISafeOwnable, Ownable {\\n  address private _nominee;\\n\\n  modifier onlyNominee() {\\n    require(_msgSender() == _nominee, \\\"msg.sender != nominee\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address _newNominee)\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    _setNominee(_newNominee);\\n  }\\n\\n  function acceptOwnership() public virtual override onlyNominee {\\n    _transferOwnership(_nominee);\\n    _setNominee(address(0));\\n  }\\n\\n  function renounceOwnership()\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    super.renounceOwnership();\\n    _setNominee(address(0));\\n  }\\n\\n  function getNominee() public view virtual override returns (address) {\\n    return _nominee;\\n  }\\n\\n  function _setNominee(address _newNominee) internal virtual {\\n    address _oldNominee = _nominee;\\n    _nominee = _newNominee;\\n    emit NomineeUpdate(_oldNominee, _newNominee);\\n  }\\n}\\n\",\"keccak256\":\"0xfcedda47c0b7fdc6504e8dcb6a0a5702b4496f8ec1f7b059405d002e9a68a30c\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\\n * an address to be nominated, and then accept that nomination, before\\n * ownership is transferred.\\n */\\ninterface ISafeOwnable {\\n  /**\\n   * @dev Emitted via `transferOwnership()`.\\n   * @param previousNominee The previous nominee\\n   * @param newNominee The new nominee\\n   */\\n  event NomineeUpdate(\\n    address indexed previousNominee,\\n    address indexed newNominee\\n  );\\n\\n  /**\\n   * @notice Nominates an address to be owner of the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param nominee The address that will be nominated\\n   */\\n  function transferOwnership(address nominee) external;\\n\\n  /**\\n   * @notice Renounces ownership of contract and leaves the contract\\n   * without any owner.\\n   * @dev Only callable by `owner()`.\\n   * Sets nominee back to zero address.\\n   * It will not be possible to call `onlyOwner` functions anymore.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @notice Accepts ownership nomination.\\n   * @dev Only callable by the current nominee. Sets nominee back to zero\\n   * address.\\n   */\\n  function acceptOwnership() external;\\n\\n  /// @return The current nominee\\n  function getNominee() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f8ea0098b1205f0e346f320aed8ea83d2de8fcbf08264b2e4fcefcc25c7780\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610aa98061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b6ca0b6311610081578063c76bc9f51161005b578063c76bc9f5146101c1578063c7a93937146101d4578063f2fde38b146101f257600080fd5b8063b6ca0b6314610172578063c3456cf414610190578063c380b80a146101ae57600080fd5b806379ba5097116100b257806379ba5097146101395780638da5cb5b14610141578063aef18ae71461015f57600080fd5b80631631682d146100d95780631bcfb97c146100ee578063715018a614610131575b600080fd5b6100ec6100e73660046109ee565b610205565b005b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100ec6103d2565b6100ec6103ee565b60005473ffffffffffffffffffffffffffffffffffffffff16610108565b6100ec61016d3660046109ca565b6104a7565b60015473ffffffffffffffffffffffffffffffffffffffff16610108565b60035473ffffffffffffffffffffffffffffffffffffffff16610108565b6100ec6101bc3660046109ca565b610529565b6100ec6101cf3660046109ca565b6105a4565b60045473ffffffffffffffffffffffffffffffffffffffff16610108565b6100ec6102003660046109ca565b61061f565b610210838383610633565b6003546040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152909116906326c9ffa89060240160206040518083038186803b15801561027b57600080fd5b505afa15801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b39190610a2f565b156102bd57505050565b600480546040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116938201939093529116906326c9ffa89060240160206040518083038186803b15801561032a57600080fd5b505afa15801561033e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103629190610a2f565b6103cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f44657374696e6174696f6e206e6f7420616c6c6f77656400000000000000000060448201526064015b60405180910390fd5b505050565b6103da61084b565b6103e26108cc565b6103ec60006108de565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e64657220213d206e6f6d696e6565000000000000000000000060448201526064016103c4565b6001546103e29073ffffffffffffffffffffffffffffffffffffffff16610955565b6104af61084b565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3b47e749f0b9eec111f9d121bf0a3604a10d5d43fc4e220ea3149651c3aa3b68906020015b60405180910390a150565b61053161084b565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3bedf5a62a52b85cc3f37cc733805604a5afcc30edf8a354169344b19bd33cef9060200161051e565b6105ac61084b565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fd6b9905ff91c1b8648c68049dd3b211d795b4757aebe72a013bd8703e43bb8859060200161051e565b61062761084b565b610630816108de565b50565b6002546040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169081906326c9ffa89060240160206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190610a2f565b1561073f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f53656e64657220626c6f636b656400000000000000000000000000000000000060448201526064016103c4565b6040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528216906326c9ffa89060240160206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190610a2f565b15610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f526563697069656e7420626c6f636b656400000000000000000000000000000060448201526064016103c4565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c4565b6108d461084b565b6103ec6000610955565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109dc57600080fd5b81356109e781610a51565b9392505050565b600080600060608486031215610a0357600080fd5b8335610a0e81610a51565b92506020840135610a1e81610a51565b929592945050506040919091013590565b600060208284031215610a4157600080fd5b815180151581146109e757600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461063057600080fdfea2646970667358221220cf4dd485893c9ab29d0166c0601f1e4a68e7b08d8335990d782a94874729120464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b6ca0b6311610081578063c76bc9f51161005b578063c76bc9f5146101c1578063c7a93937146101d4578063f2fde38b146101f257600080fd5b8063b6ca0b6314610172578063c3456cf414610190578063c380b80a146101ae57600080fd5b806379ba5097116100b257806379ba5097146101395780638da5cb5b14610141578063aef18ae71461015f57600080fd5b80631631682d146100d95780631bcfb97c146100ee578063715018a614610131575b600080fd5b6100ec6100e73660046109ee565b610205565b005b60025473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100ec6103d2565b6100ec6103ee565b60005473ffffffffffffffffffffffffffffffffffffffff16610108565b6100ec61016d3660046109ca565b6104a7565b60015473ffffffffffffffffffffffffffffffffffffffff16610108565b60035473ffffffffffffffffffffffffffffffffffffffff16610108565b6100ec6101bc3660046109ca565b610529565b6100ec6101cf3660046109ca565b6105a4565b60045473ffffffffffffffffffffffffffffffffffffffff16610108565b6100ec6102003660046109ca565b61061f565b610210838383610633565b6003546040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152909116906326c9ffa89060240160206040518083038186803b15801561027b57600080fd5b505afa15801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b39190610a2f565b156102bd57505050565b600480546040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116938201939093529116906326c9ffa89060240160206040518083038186803b15801561032a57600080fd5b505afa15801561033e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103629190610a2f565b6103cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f44657374696e6174696f6e206e6f7420616c6c6f77656400000000000000000060448201526064015b60405180910390fd5b505050565b6103da61084b565b6103e26108cc565b6103ec60006108de565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e64657220213d206e6f6d696e6565000000000000000000000060448201526064016103c4565b6001546103e29073ffffffffffffffffffffffffffffffffffffffff16610955565b6104af61084b565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3b47e749f0b9eec111f9d121bf0a3604a10d5d43fc4e220ea3149651c3aa3b68906020015b60405180910390a150565b61053161084b565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3bedf5a62a52b85cc3f37cc733805604a5afcc30edf8a354169344b19bd33cef9060200161051e565b6105ac61084b565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fd6b9905ff91c1b8648c68049dd3b211d795b4757aebe72a013bd8703e43bb8859060200161051e565b61062761084b565b610630816108de565b50565b6002546040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169081906326c9ffa89060240160206040518083038186803b1580156106a057600080fd5b505afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190610a2f565b1561073f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f53656e64657220626c6f636b656400000000000000000000000000000000000060448201526064016103c4565b6040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528216906326c9ffa89060240160206040518083038186803b1580156107a657600080fd5b505afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190610a2f565b15610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f526563697069656e7420626c6f636b656400000000000000000000000000000060448201526064016103c4565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c4565b6108d461084b565b6103ec6000610955565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109dc57600080fd5b81356109e781610a51565b9392505050565b600080600060608486031215610a0357600080fd5b8335610a0e81610a51565b92506020840135610a1e81610a51565b929592945050506040919091013590565b600060208284031215610a4157600080fd5b815180151581146109e757600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461063057600080fdfea2646970667358221220cf4dd485893c9ab29d0166c0601f1e4a68e7b08d8335990d782a94874729120464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by the current nominee. Sets nominee back to zero address."
      },
      "getBlocklist()": {
        "returns": {
          "_0": "The blocklist contract"
        }
      },
      "getDestinationAllowlist()": {
        "returns": {
          "_0": "The destination allowlist contract"
        }
      },
      "getNominee()": {
        "returns": {
          "_0": "The current nominee"
        }
      },
      "getSourceAllowlist()": {
        "returns": {
          "_0": "The source allowlist contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts ownership nomination."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3315,
        "contract": "contracts/ppo/RestrictedTransferHook.sol:RestrictedTransferHook",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47123,
        "contract": "contracts/ppo/RestrictedTransferHook.sol:RestrictedTransferHook",
        "label": "_nominee",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 44550,
        "contract": "contracts/ppo/RestrictedTransferHook.sol:RestrictedTransferHook",
        "label": "_blocklist",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAccountList)44946"
      },
      {
        "astId": 44818,
        "contract": "contracts/ppo/RestrictedTransferHook.sol:RestrictedTransferHook",
        "label": "_sourceAllowlist",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IAccountList)44946"
      },
      {
        "astId": 44821,
        "contract": "contracts/ppo/RestrictedTransferHook.sol:RestrictedTransferHook",
        "label": "_destinationAllowlist",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IAccountList)44946"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAccountList)44946": {
        "encoding": "inplace",
        "label": "contract IAccountList",
        "numberOfBytes": "20"
      }
    }
  }
}
