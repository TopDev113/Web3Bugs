{
  "address": "0x831AFB428d3a8aD7e2316753cc0Ac3bb3DF883cB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "newAllowlist",
          "type": "address"
        }
      ],
      "name": "AllowlistChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousNominee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newNominee",
          "type": "address"
        }
      ],
      "name": "NomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowlist",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_purchaser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "hook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "_newAllowlist",
          "type": "address"
        }
      ],
      "name": "setAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newNominee",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf61e67804d109a5f95059b711ee99441855c7783b156f20f8271359343672398",
  "receipt": {
    "to": null,
    "from": "0x9eCaBd4dE914C0B6F924e354e8498b3e92AeAD04",
    "contractAddress": "0x831AFB428d3a8aD7e2316753cc0Ac3bb3DF883cB",
    "transactionIndex": 1,
    "gasUsed": "442035",
    "logsBloom": "0x
    "blockHash": "0x6887be187941d0d709e1e417abdf8e1092e1eded7c0d6fd843fd2b5b1e11d186",
    "transactionHash": "0xf61e67804d109a5f95059b711ee99441855c7783b156f20f8271359343672398",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14781714,
        "transactionHash": "0xf61e67804d109a5f95059b711ee99441855c7783b156f20f8271359343672398",
        "address": "0x831AFB428d3a8aD7e2316753cc0Ac3bb3DF883cB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009ecabd4de914c0b6f924e354e8498b3e92aead04"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6887be187941d0d709e1e417abdf8e1092e1eded7c0d6fd843fd2b5b1e11d186"
      }
    ],
    "blockNumber": 14781714,
    "cumulativeGasUsed": "442035",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "98c20857f2b957ca344caf2e1b2d45f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"newAllowlist\",\"type\":\"address\"}],\"name\":\"AllowlistChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNominee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNominee\",\"type\":\"address\"}],\"name\":\"NomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowlist\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"hook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"_newAllowlist\",\"type\":\"address\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNominee\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by the current nominee. Sets nominee back to zero address.\"},\"getAllowlist()\":{\"returns\":{\"_0\":\"The allowlist contract\"}},\"getNominee()\":{\"returns\":{\"_0\":\"The current nominee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts ownership nomination.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mini-sales/AllowlistPurchaseHook.sol\":\"AllowlistPurchaseHook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":25000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/mini-sales/AllowlistPurchaseHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IAllowlistPurchaseHook.sol\\\";\\nimport \\\"../ppo/interfaces/IAccountList.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/SafeOwnable.sol\\\";\\n\\ncontract AllowlistPurchaseHook is IAllowlistPurchaseHook, SafeOwnable {\\n  IAccountList private _allowlist;\\n\\n  constructor() {}\\n\\n  function hook(\\n    address _purchaser,\\n    address _recipient,\\n    uint256 _amount,\\n    uint256 _price,\\n    bytes calldata _data\\n  ) public virtual override {\\n    require(_allowlist.isIncluded(_recipient), \\\"Recipient not allowed\\\");\\n  }\\n\\n  function setAllowlist(IAccountList _newAllowlist)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    _allowlist = _newAllowlist;\\n    emit AllowlistChange(_newAllowlist);\\n  }\\n\\n  function getAllowlist() external view override returns (IAccountList) {\\n    return _allowlist;\\n  }\\n}\\n\",\"keccak256\":\"0x3ecb32571ff464a79b14f9ae3b184844a6846ef8d51bc465e9fe10f32ee11fa5\",\"license\":\"AGPL-3.0\"},\"contracts/mini-sales/interfaces/IAllowlistPurchaseHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./IPurchaseHook.sol\\\";\\nimport \\\"../../ppo/interfaces/IAccountList.sol\\\";\\n\\n/**\\n * @notice Hook that provides allowlist functionality for a `MiniSales`\\n * purchase. Only allowed addresses can participate in a sale with this hook\\n * enabled.\\n */\\ninterface IAllowlistPurchaseHook is IPurchaseHook {\\n  /**\\n   * @dev Emitted via `setAllowlist()`.\\n   * @param newAllowlist Address of the new allowlist\\n   */\\n  event AllowlistChange(IAccountList newAllowlist);\\n\\n  /**\\n   * @notice Sets the allowlist containing addresses that are allowed to\\n   * purchase.\\n   * @dev Only callable by `owner()`.\\n   * @param newAllowlist Address of the new allowlist\\n   */\\n  function setAllowlist(IAccountList newAllowlist) external;\\n\\n  /// @return The allowlist contract\\n  function getAllowlist() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0x78770854d8601435d5795d76f16460b6db5fe4392c4c89c726fb4f91ee393fa7\",\"license\":\"AGPL-3.0\"},\"contracts/mini-sales/interfaces/IPurchaseHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Hook to be called when a user makes a `MiniSales` purchase.\\n * @dev A hook could contain purchase restriction logic and/or update\\n * auxiliary data.\\n */\\ninterface IPurchaseHook {\\n  /**\\n   * @notice Hook to be called when a user makes a `MiniSales` purchase.\\n   * @param purchaser Address that payment token was taken from\\n   * @param recipient Address that sale token was delivered to\\n   * @param amount Amount of sale token purchased\\n   * @param price Sale token price in terms of payment token\\n   * @param data Data payload for supporting additional hook functionality\\n   */\\n  function hook(\\n    address purchaser,\\n    address recipient,\\n    uint256 amount,\\n    uint256 price,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x431acad04473e349a78a2cfd31648734e5e25ff84276044ad2f052d051fd4a2a\",\"license\":\"AGPL-3.0\"},\"contracts/ppo/interfaces/IAccountList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Stores whether an address is included in a set.\\n */\\ninterface IAccountList {\\n  /**\\n   * @notice Sets whether an address in `accounts` is included.\\n   * @dev Whether an account is included is based on the boolean value at its\\n   * respective index in `included`. This function will only edit the\\n   * inclusion of addresses in `accounts`.\\n   *\\n   * The length of `accounts` and `included` must match.\\n   *\\n   * Only callable by `owner()`.\\n   * @param accounts Addresses to change inclusion for\\n   * @param included Whether to include corresponding address in `accounts`\\n   */\\n  function set(address[] calldata accounts, bool[] calldata included) external;\\n\\n  /**\\n   * @notice Removes every address from the set. Atomically includes any\\n   * addresses in `newIncludedAccounts`.\\n   * @dev Only callable by `owner()`.\\n   * @param newIncludedAccounts Addresses to include after reset\\n   */\\n  function reset(address[] calldata newIncludedAccounts) external;\\n\\n  /**\\n   * @param account Address to check inclusion for\\n   * @return Whether `account` is included\\n   */\\n  function isIncluded(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1b3106d24b0118c197ca46f5ea24f2a5c703b12a9bc781a4d5430ffdfb4bc9d5\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISafeOwnable.sol\\\";\\n\\ncontract SafeOwnable is ISafeOwnable, Ownable {\\n  address private _nominee;\\n\\n  modifier onlyNominee() {\\n    require(_msgSender() == _nominee, \\\"msg.sender != nominee\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address _newNominee)\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    _setNominee(_newNominee);\\n  }\\n\\n  function acceptOwnership() public virtual override onlyNominee {\\n    _transferOwnership(_nominee);\\n    _setNominee(address(0));\\n  }\\n\\n  function renounceOwnership()\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    super.renounceOwnership();\\n    _setNominee(address(0));\\n  }\\n\\n  function getNominee() public view virtual override returns (address) {\\n    return _nominee;\\n  }\\n\\n  function _setNominee(address _newNominee) internal virtual {\\n    address _oldNominee = _nominee;\\n    _nominee = _newNominee;\\n    emit NomineeUpdate(_oldNominee, _newNominee);\\n  }\\n}\\n\",\"keccak256\":\"0xfcedda47c0b7fdc6504e8dcb6a0a5702b4496f8ec1f7b059405d002e9a68a30c\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\\n * an address to be nominated, and then accept that nomination, before\\n * ownership is transferred.\\n */\\ninterface ISafeOwnable {\\n  /**\\n   * @dev Emitted via `transferOwnership()`.\\n   * @param previousNominee The previous nominee\\n   * @param newNominee The new nominee\\n   */\\n  event NomineeUpdate(\\n    address indexed previousNominee,\\n    address indexed newNominee\\n  );\\n\\n  /**\\n   * @notice Nominates an address to be owner of the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param nominee The address that will be nominated\\n   */\\n  function transferOwnership(address nominee) external;\\n\\n  /**\\n   * @notice Renounces ownership of contract and leaves the contract\\n   * without any owner.\\n   * @dev Only callable by `owner()`.\\n   * Sets nominee back to zero address.\\n   * It will not be possible to call `onlyOwner` functions anymore.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @notice Accepts ownership nomination.\\n   * @dev Only callable by the current nominee. Sets nominee back to zero\\n   * address.\\n   */\\n  function acceptOwnership() external;\\n\\n  /// @return The current nominee\\n  function getNominee() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f8ea0098b1205f0e346f320aed8ea83d2de8fcbf08264b2e4fcefcc25c7780\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61069e8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c5578063b6ca0b6314610108578063c5eff3d014610126578063f2fde38b1461014457600080fd5b806358bf3c7f1461008d5780636813ced4146100a2578063715018a6146100b557806379ba5097146100bd575b600080fd5b6100a061009b366004610556565b610157565b005b6100a06100b036600461057a565b6101d8565b6100a06102ee565b6100a061030a565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60015473ffffffffffffffffffffffffffffffffffffffff166100df565b60025473ffffffffffffffffffffffffffffffffffffffff166100df565b6100a0610152366004610556565b6103c3565b61015f6103d7565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f4b7ae0bfa9ee2ccf7c1d19931b772d3060ff246c77dc5b2a96c18e05308daf219060200160405180910390a150565b6002546040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906326c9ffa89060240160206040518083038186803b15801561024357600080fd5b505afa158015610257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027b9190610624565b6102e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f526563697069656e74206e6f7420616c6c6f776564000000000000000000000060448201526064015b60405180910390fd5b505050505050565b6102f66103d7565b6102fe610458565b610308600061046a565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e64657220213d206e6f6d696e6565000000000000000000000060448201526064016102dd565b6001546102fe9073ffffffffffffffffffffffffffffffffffffffff166104e1565b6103cb6103d7565b6103d48161046a565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610308576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dd565b6104606103d7565b61030860006104e1565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561056857600080fd5b813561057381610646565b9392505050565b60008060008060008060a0878903121561059357600080fd5b863561059e81610646565b955060208701356105ae81610646565b94506040870135935060608701359250608087013567ffffffffffffffff808211156105d957600080fd5b818901915089601f8301126105ed57600080fd5b8135818111156105fc57600080fd5b8a602082850101111561060e57600080fd5b6020830194508093505050509295509295509295565b60006020828403121561063657600080fd5b8151801515811461057357600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146103d457600080fdfea2646970667358221220102499047b4b969044b089faeeedb910d6695190dce9fd60d20ce3e8afdb3e4d64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c5578063b6ca0b6314610108578063c5eff3d014610126578063f2fde38b1461014457600080fd5b806358bf3c7f1461008d5780636813ced4146100a2578063715018a6146100b557806379ba5097146100bd575b600080fd5b6100a061009b366004610556565b610157565b005b6100a06100b036600461057a565b6101d8565b6100a06102ee565b6100a061030a565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60015473ffffffffffffffffffffffffffffffffffffffff166100df565b60025473ffffffffffffffffffffffffffffffffffffffff166100df565b6100a0610152366004610556565b6103c3565b61015f6103d7565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f4b7ae0bfa9ee2ccf7c1d19931b772d3060ff246c77dc5b2a96c18e05308daf219060200160405180910390a150565b6002546040517f26c9ffa800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906326c9ffa89060240160206040518083038186803b15801561024357600080fd5b505afa158015610257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027b9190610624565b6102e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f526563697069656e74206e6f7420616c6c6f776564000000000000000000000060448201526064015b60405180910390fd5b505050505050565b6102f66103d7565b6102fe610458565b610308600061046a565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d73672e73656e64657220213d206e6f6d696e6565000000000000000000000060448201526064016102dd565b6001546102fe9073ffffffffffffffffffffffffffffffffffffffff166104e1565b6103cb6103d7565b6103d48161046a565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610308576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dd565b6104606103d7565b61030860006104e1565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561056857600080fd5b813561057381610646565b9392505050565b60008060008060008060a0878903121561059357600080fd5b863561059e81610646565b955060208701356105ae81610646565b94506040870135935060608701359250608087013567ffffffffffffffff808211156105d957600080fd5b818901915089601f8301126105ed57600080fd5b8135818111156105fc57600080fd5b8a602082850101111561060e57600080fd5b6020830194508093505050509295509295509295565b60006020828403121561063657600080fd5b8151801515811461057357600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146103d457600080fdfea2646970667358221220102499047b4b969044b089faeeedb910d6695190dce9fd60d20ce3e8afdb3e4d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by the current nominee. Sets nominee back to zero address."
      },
      "getAllowlist()": {
        "returns": {
          "_0": "The allowlist contract"
        }
      },
      "getNominee()": {
        "returns": {
          "_0": "The current nominee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts ownership nomination."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3334,
        "contract": "contracts/mini-sales/AllowlistPurchaseHook.sol:AllowlistPurchaseHook",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 46994,
        "contract": "contracts/mini-sales/AllowlistPurchaseHook.sol:AllowlistPurchaseHook",
        "label": "_nominee",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11193,
        "contract": "contracts/mini-sales/AllowlistPurchaseHook.sol:AllowlistPurchaseHook",
        "label": "_allowlist",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAccountList)44899"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAccountList)44899": {
        "encoding": "inplace",
        "label": "contract IAccountList",
        "numberOfBytes": "20"
      }
    }
  }
}
