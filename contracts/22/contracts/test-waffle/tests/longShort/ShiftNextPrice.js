// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var Curry = require("rescript/lib/js/curry.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var HelperActions = require("../../library/HelperActions.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");
var Smock = require("@eth-optimism/smock");
var SyntheticTokenSmocked = require("../../library/smock/SyntheticTokenSmocked.js");

function testIntegration(contracts, accounts) {
  describe("nextPriceShiftPosition", (function () {
          var isShiftFromLong = true;
          it("should work as expected happy path for token shifting " + (
                isShiftFromLong ? "Long" : "Short"
              ), (function () {
                  var testUser = accounts.contents[8];
                  var amountToNextPriceMint = Helpers.randomTokenAmount(undefined);
                  var match = contracts.contents;
                  var longShort = match.longShort;
                  var longShortUserConnected = longShort.connect(testUser);
                  var match$1 = match.markets[0];
                  var marketIndex = match$1.marketIndex;
                  var shortSynth = match$1.shortSynth;
                  var longSynth = match$1.longSynth;
                  var oracleManager = match$1.oracleManager;
                  var paymentToken = match$1.paymentToken;
                  var fromSynth = isShiftFromLong ? longSynth : shortSynth;
                  var toSynth = isShiftFromLong ? shortSynth : longSynth;
                  var redeemNextPriceFunction = isShiftFromLong ? (function (prim0, prim1, prim2) {
                        return prim0.shiftPositionFromLongNextPrice(prim1, prim2);
                      }) : (function (prim0, prim1, prim2) {
                        return prim0.shiftPositionFromShortNextPrice(prim1, prim2);
                      });
                  return LetOps.AwaitThen.let_(longShort.marketSideValueInPaymentToken(marketIndex, isShiftFromLong), (function (_longValueBefore) {
                                return LetOps.AwaitThen.let_(paymentToken.mint(testUser.address, amountToNextPriceMint), (function (param) {
                                              return LetOps.AwaitThen.let_(paymentToken.setShouldMockTransfer(false), (function (param) {
                                                            return LetOps.AwaitThen.let_(paymentToken.connect(testUser).approve(longShort.address, amountToNextPriceMint), (function (param) {
                                                                          return LetOps.AwaitThen.let_(HelperActions.mintDirect(marketIndex, amountToNextPriceMint, paymentToken, testUser, longShort, oracleManager, isShiftFromLong), (function (param) {
                                                                                        return LetOps.AwaitThen.let_(fromSynth.balanceOf(testUser.address), (function (usersBalanceAvailableForShift) {
                                                                                                      return LetOps.AwaitThen.let_(Curry._3(redeemNextPriceFunction, longShortUserConnected, marketIndex, usersBalanceAvailableForShift), (function (param) {
                                                                                                                    return LetOps.AwaitThen.let_(fromSynth.balanceOf(testUser.address), (function (usersBalanceAfterNextPriceShift) {
                                                                                                                                  Chai.bnEqual("Balance after price system update but before user settlement should be the same as after settlement", usersBalanceAfterNextPriceShift, CONSTANTS.zeroBn);
                                                                                                                                  return LetOps.AwaitThen.let_(toSynth.balanceOf(testUser.address), (function (otherSyntheticTokenBalanceBeforeShift) {
                                                                                                                                                return LetOps.AwaitThen.let_(oracleManager.getLatestPrice(), (function (previousPrice) {
                                                                                                                                                              var nextPrice = Globals.div(Globals.mul(previousPrice, Globals.bnFromInt(12)), Globals.bnFromInt(10));
                                                                                                                                                              return LetOps.AwaitThen.let_(oracleManager.setPrice(nextPrice), (function (param) {
                                                                                                                                                                            return LetOps.AwaitThen.let_(longShort.updateSystemState(marketIndex), (function (param) {
                                                                                                                                                                                          return LetOps.AwaitThen.let_(longShort.marketUpdateIndex(marketIndex), (function (latestUpdateIndex) {
                                                                                                                                                                                                        return LetOps.AwaitThen.let_(longShort.syntheticToken_priceSnapshot(marketIndex, isShiftFromLong, latestUpdateIndex), (function (shiftPriceFromSynth) {
                                                                                                                                                                                                                      return LetOps.AwaitThen.let_(longShort.syntheticToken_priceSnapshot(marketIndex, !isShiftFromLong, latestUpdateIndex), (function (shiftPriceToSynth) {
                                                                                                                                                                                                                                    var amountSyntheticTokenExpectedToRecieveOnOtherSide = Globals.div(Globals.mul(usersBalanceAvailableForShift, shiftPriceFromSynth), shiftPriceToSynth);
                                                                                                                                                                                                                                    return LetOps.AwaitThen.let_(longShort.executeOutstandingNextPriceSettlementsUser(testUser.address, marketIndex), (function (param) {
                                                                                                                                                                                                                                                  return LetOps.Await.let_(toSynth.balanceOf(testUser.address), (function (toSynthBalanceAfterShift) {
                                                                                                                                                                                                                                                                var deltaBalanceChange = Globals.sub(toSynthBalanceAfterShift, otherSyntheticTokenBalanceBeforeShift);
                                                                                                                                                                                                                                                                return Chai.bnEqual("Balance of paymentToken didn't update correctly", deltaBalanceChange, amountSyntheticTokenExpectedToRecieveOnOtherSide);
                                                                                                                                                                                                                                                              }));
                                                                                                                                                                                                                                                }));
                                                                                                                                                                                                                                  }));
                                                                                                                                                                                                                    }));
                                                                                                                                                                                                      }));
                                                                                                                                                                                        }));
                                                                                                                                                                          }));
                                                                                                                                                            }));
                                                                                                                                              }));
                                                                                                                                }));
                                                                                                                  }));
                                                                                                    }));
                                                                                      }));
                                                                        }));
                                                          }));
                                            }));
                              }));
                }));
          
        }));
  
}

function testUnit(contracts, accounts) {
  describe("shiftNextPrice external functions", (function () {
          var amountSyntheticTokensToShift = Helpers.randomTokenAmount(undefined);
          var setup = function (param) {
            return LongShortSmocked.InternalMock.setup(contracts.contents.longShort);
          };
          describe("shiftPositionFromLongNextPrice", (function () {
                  it("calls _shiftPositionNextPrice with isShiftFromLong==true", (function () {
                          return LetOps.Await.let_(setup(undefined), (function (param) {
                                        return LetOps.Await.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.longShort, "shiftPositionFromLongNextPrice"), (function (param) {
                                                      return LetOps.Await.let_(contracts.contents.longShort.shiftPositionFromLongNextPrice(1, amountSyntheticTokensToShift), (function (param) {
                                                                    var shiftPositionNextPriceCalls = LongShortSmocked.InternalMock._shiftPositionNextPriceCalls(undefined);
                                                                    return Chai.recordArrayDeepEqualFlat(undefined, shiftPositionNextPriceCalls, [{
                                                                                  marketIndex: 1,
                                                                                  amountSyntheticTokensToShift: amountSyntheticTokensToShift,
                                                                                  isShiftFromLong: true
                                                                                }]);
                                                                  }));
                                                    }));
                                      }));
                        }));
                  
                }));
          describe("shiftPositionFromShortNextPrice", (function () {
                  it("calls _shiftPositionNextPrice with isShiftFromLong==false", (function () {
                          return LetOps.Await.let_(setup(undefined), (function (param) {
                                        return LetOps.Await.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.longShort, "shiftPositionFromShortNextPrice"), (function (param) {
                                                      return LetOps.Await.let_(contracts.contents.longShort.shiftPositionFromShortNextPrice(1, amountSyntheticTokensToShift), (function (param) {
                                                                    var shiftPositionNextPriceCalls = LongShortSmocked.InternalMock._shiftPositionNextPriceCalls(undefined);
                                                                    return Chai.recordArrayDeepEqualFlat(undefined, shiftPositionNextPriceCalls, [{
                                                                                  marketIndex: 1,
                                                                                  amountSyntheticTokensToShift: amountSyntheticTokensToShift,
                                                                                  isShiftFromLong: false
                                                                                }]);
                                                                  }));
                                                    }));
                                      }));
                        }));
                  
                }));
          
        }));
  describe("_shiftPositionNextPrice internal function", (function () {
          var marketUpdateIndex = Helpers.randomInteger(undefined);
          var amount = Helpers.randomTokenAmount(undefined);
          var smockedSyntheticToken = {
            contents: undefined
          };
          var setup = function (isShiftFromLong, testWallet) {
            var match = contracts.contents;
            var longShort = match.longShort;
            var match$1 = match.markets[0];
            return LetOps.AwaitThen.let_(Smock.smockit(match$1.longSynth), (function (longSynthSmocked) {
                          SyntheticTokenSmocked.mockTransferFromToReturn(longSynthSmocked, true);
                          smockedSyntheticToken.contents = longSynthSmocked;
                          return LetOps.AwaitThen.let_(LongShortSmocked.InternalMock.setup(longShort), (function (param) {
                                        return LetOps.AwaitThen.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(longShort, "_shiftPositionNextPrice"), (function (param) {
                                                      return LetOps.AwaitThen.let_(longShort.setShiftNextPriceGlobals(1, marketUpdateIndex, longSynthSmocked.address, isShiftFromLong), (function (param) {
                                                                    var longShort$1 = longShort.connect(testWallet);
                                                                    return longShort$1._shiftPositionNextPriceExposed(1, amount, isShiftFromLong);
                                                                  }));
                                                    }));
                                      }));
                        }));
          };
          var testMarketSide = function (isShiftFromLong) {
            it("calls the executeOutstandingNextPriceSettlements modifier", (function () {
                    var testWallet = accounts.contents[1];
                    return LetOps.Await.let_(setup(isShiftFromLong, testWallet), (function (param) {
                                  var executeOutstandingNextPriceSettlementsCalls = LongShortSmocked.InternalMock._executeOutstandingNextPriceSettlementsCalls(undefined);
                                  return Chai.recordArrayDeepEqualFlat(undefined, executeOutstandingNextPriceSettlementsCalls, [{
                                                user: testWallet.address,
                                                marketIndex: 1
                                              }]);
                                }));
                  }));
            it("emits the NextPriceSyntheticPositionShift event", (function () {
                    var testWallet = accounts.contents[1];
                    return Chai.callEmitEvents(setup(isShiftFromLong, testWallet), contracts.contents.longShort, "NextPriceSyntheticPositionShift").withArgs(1, isShiftFromLong, amount, testWallet.address, Globals.add(marketUpdateIndex, Globals.oneBn));
                  }));
            it("transfers synthetic tokens (calls transferFrom with the correct parameters)", (function () {
                    var testWallet = accounts.contents[1];
                    return LetOps.Await.let_(setup(isShiftFromLong, testWallet), (function (param) {
                                  var transferFrom = SyntheticTokenSmocked.transferFromCalls(smockedSyntheticToken.contents);
                                  return Chai.recordArrayDeepEqualFlat(undefined, transferFrom, [{
                                                sender: testWallet.address,
                                                recipient: contracts.contents.longShort.address,
                                                amount: amount
                                              }]);
                                }));
                  }));
            it("updates the correct state variables with correct values", (function () {
                    var testWallet = accounts.contents[1];
                    return LetOps.AwaitThen.let_(setup(isShiftFromLong, testWallet), (function (param) {
                                  return LetOps.AwaitThen.let_(contracts.contents.longShort.batched_amountSyntheticToken_toShiftAwayFrom_marketSide(1, isShiftFromLong), (function (updatedbatched_amountSyntheticTokenToShiftMarketSide) {
                                                return LetOps.AwaitThen.let_(contracts.contents.longShort.userNextPrice_syntheticToken_toShiftAwayFrom_marketSide(1, isShiftFromLong, testWallet.address), (function (updateduserNextPrice_syntheticToken_toShiftAwayFrom_marketSide) {
                                                              return LetOps.Await.let_(contracts.contents.longShort.userNextPrice_currentUpdateIndex(1, testWallet.address), (function (updateduserNextPrice_currentUpdateIndex) {
                                                                            Chai.bnEqual("batched_amountSyntheticTokenToShiftMarketSide not updated correctly", updatedbatched_amountSyntheticTokenToShiftMarketSide, amount);
                                                                            Chai.bnEqual("userNextPrice_syntheticToken_toShiftAwayFrom_marketSide not updated correctly", updateduserNextPrice_syntheticToken_toShiftAwayFrom_marketSide, amount);
                                                                            return Chai.bnEqual("userNextPrice_currentUpdateIndex not updated correctly", updateduserNextPrice_currentUpdateIndex, Globals.add(marketUpdateIndex, Globals.oneBn));
                                                                          }));
                                                            }));
                                              }));
                                }));
                  }));
            
          };
          describe("long", (function () {
                  return testMarketSide(true);
                }));
          describe("short", (function () {
                  return testMarketSide(false);
                }));
          
        }));
  
}

exports.testIntegration = testIntegration;
exports.testUnit = testUnit;
/* Chai Not a pure module */
