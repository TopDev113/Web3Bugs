// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var CONSTANTS = require("../../CONSTANTS.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");
var Smock = require("@eth-optimism/smock");

function testUnit(contracts, accounts) {
  describe("initializeMarket", (function () {
          var stakerSmockedRef = {
            contents: undefined
          };
          var longShortRef = {
            contents: ""
          };
          var sampleAddress = ethers.Wallet.createRandom().address;
          var setup = function (marketIndex, marketIndexValue, latestMarket) {
            var match = contracts.contents;
            longShortRef.contents = match.longShort;
            return LetOps.Await.let_(Smock.smockit(contracts.contents.staker), (function (smocked) {
                          StakerSmocked.mockAddNewStakingFundToReturn(smocked);
                          stakerSmockedRef.contents = smocked;
                          return LetOps.Await.let_(LongShortSmocked.InternalMock.setup(longShortRef.contents), (function (param) {
                                        return LetOps.Await.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(longShortRef.contents, "initializeMarket"), (function (param) {
                                                      LongShortSmocked.InternalMock.mock_seedMarketInitiallyToReturn(undefined);
                                                      return longShortRef.contents.setInitializeMarketParams(marketIndex, marketIndexValue, latestMarket, stakerSmockedRef.contents.address, sampleAddress, sampleAddress);
                                                    }));
                                      }));
                        }));
          };
          it("calls all functions (staker.addNewStakingFund, adminOnly, seedMarketInitially) and mutates state (marketExists) correctly", (function () {
                  return LetOps.Await.let_(setup(1, false, 1), (function (param) {
                                return LetOps.Await.let_(longShortRef.contents.connect(accounts.contents[0]).initializeMarket(1, ethers.BigNumber.from("60000000000000000"), ethers.BigNumber.from("4"), ethers.BigNumber.from("5000000000000000"), CONSTANTS.tenToThe18, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1)), (function (param) {
                                              var stakerCalls = StakerSmocked.addNewStakingFundCalls(stakerSmockedRef.contents);
                                              Chai.recordEqualFlatLabeled(Belt_Array.getExn(stakerCalls, 0), {
                                                    marketIndex: 1,
                                                    longToken: sampleAddress,
                                                    shortToken: sampleAddress,
                                                    kInitialMultiplier: ethers.BigNumber.from("60000000000000000"),
                                                    kPeriod: ethers.BigNumber.from("4"),
                                                    unstakeFee_e18: ethers.BigNumber.from("5000000000000000"),
                                                    balanceIncentiveCurve_exponent: Globals.bnFromInt(5),
                                                    balanceIncentiveCurve_equilibriumOffset: Globals.bnFromInt(0)
                                                  });
                                              var seedMarketInitiallyCalls = LongShortSmocked.InternalMock._seedMarketInitiallyCalls(undefined);
                                              Chai.recordEqualFlatLabeled(Belt_Array.getExn(seedMarketInitiallyCalls, 0), {
                                                    initialMarketSeedForEachMarketSide: CONSTANTS.tenToThe18,
                                                    marketIndex: 1
                                                  });
                                              return LetOps.Await.let_(longShortRef.contents.marketExists(1), (function (isMarket) {
                                                            return Chai.boolEqual(undefined, isMarket, true);
                                                          }));
                                            }));
                              }));
                }));
          it("reverts if market exists", (function () {
                  return LetOps.Await.let_(setup(1, true, 1), (function (param) {
                                return LetOps.Await.let_(Chai.expectRevertNoReason(longShortRef.contents.connect(accounts.contents[0]).initializeMarket(1, ethers.BigNumber.from("60000000000000000"), ethers.BigNumber.from("4"), ethers.BigNumber.from("5000000000000000"), CONSTANTS.tenToThe18, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1))), (function (param) {
                                              
                                            }));
                              }));
                }));
          it("reverts if market index is greater than latest market index", (function () {
                  return LetOps.Await.let_(setup(1, false, 1), (function (param) {
                                return LetOps.Await.let_(Chai.expectRevertNoReason(longShortRef.contents.connect(accounts.contents[0]).initializeMarket(2, ethers.BigNumber.from("60000000000000000"), ethers.BigNumber.from("4"), ethers.BigNumber.from("5000000000000000"), CONSTANTS.tenToThe18, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1))), (function (param) {
                                              
                                            }));
                              }));
                }));
          
        }));
  
}

function testIntegration(contracts, param) {
  describe("initializeMarket", (function () {
          it("Shouldn't allow initialization of a market that doesn't exist", (function () {
                  return Chai.expectRevert(contracts.contents.longShort.initializeMarket(654654, CONSTANTS.oneBn, CONSTANTS.oneBn, ethers.BigNumber.from("5000000000000000"), CONSTANTS.tenToThe18, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1)), "index too high");
                }));
          it("Shouldn't allow initialization of a market that has already been initialized", (function () {
                  var match = contracts.contents;
                  var match$1 = match.markets[0];
                  return Chai.expectRevert(match.longShort.initializeMarket(match$1.marketIndex, CONSTANTS.oneBn, CONSTANTS.oneBn, ethers.BigNumber.from("5000000000000000"), CONSTANTS.tenToThe18, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1)), "already initialized");
                }));
          it("Shouldn't allow initialization with less than 0.1 eth units of payment token", (function () {
                  var match = contracts.contents;
                  var longShort = match.longShort;
                  var match$1 = match.markets[0];
                  return LetOps.Await.let_(longShort.createNewSyntheticMarket("Test", "T", match$1.paymentToken.address, match$1.oracleManager.address, match$1.yieldManager.address), (function (param) {
                                return LetOps.Await.let_(longShort.latestMarket(), (function (latestMarket) {
                                              return Chai.expectRevert(longShort.initializeMarket(latestMarket, CONSTANTS.tenToThe18, CONSTANTS.oneBn, ethers.BigNumber.from("5000000000000000"), CONSTANTS.oneBn, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1)), "Insufficient market seed");
                                            }));
                              }));
                }));
          
        }));
  
}

exports.testUnit = testUnit;
exports.testIntegration = testIntegration;
/* Chai Not a pure module */
