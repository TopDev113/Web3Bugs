// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var StakerHelpers = require("./StakerHelpers.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function testUnit(contracts, accounts) {
  describe("Staker Admin Functions", (function () {
          var marketIndex = Helpers.randomJsInteger(undefined);
          var randomAddress1 = Helpers.randomAddress(undefined);
          describe("changeAdmin", (function () {
                  var txPromiseRef = {
                    contents: Promise.resolve(undefined)
                  };
                  Globals.before_once$p(function (param) {
                        return LetOps.Await.let_(StakerHelpers.deployAndSetupStakerToUnitTest("changeAdmin", contracts, accounts), (function (param) {
                                      txPromiseRef.contents = contracts.contents.staker.changeAdmin(randomAddress1);
                                      return txPromiseRef.contents;
                                    }));
                      });
                  it("should call the onlyAdmin modifier", (function () {
                          return Chai.intEqual(undefined, StakerSmocked.InternalMock.onlyAdminModifierLogicCalls(undefined).length, 1);
                        }));
                  it("emits ChangeAdmin with correct argument", (function () {
                          var partial_arg = Chai.callEmitEvents(txPromiseRef.contents, contracts.contents.staker, "ChangeAdmin");
                          return function (param) {
                            return partial_arg.withArgs(randomAddress1, param);
                          };
                        }));
                  it("should allow admin to change admin correctly", (function () {
                          var newAdmin = Helpers.randomAddress(undefined);
                          var currentAdmin = accounts.contents[0];
                          return LetOps.Await.let_(contracts.contents.staker.connect(currentAdmin).changeAdmin(newAdmin), (function (param) {
                                        return LetOps.Await.let_(contracts.contents.staker.admin(), (function (updatedAdmin) {
                                                      return Chai.addressEqual("staker admin is not newAdmin", newAdmin, updatedAdmin);
                                                    }));
                                      }));
                        }));
                  
                }));
          describe("changeFloatPercentage", (function () {
                  var newFloatPerc = Globals.bnFromString("42000000000000000");
                  var txPromiseRef = {
                    contents: Promise.resolve(undefined)
                  };
                  Globals.before_once$p(function (param) {
                        return LetOps.Await.let_(StakerHelpers.deployAndSetupStakerToUnitTest("changeFloatPercentage", contracts, accounts), (function (param) {
                                      txPromiseRef.contents = contracts.contents.staker.changeFloatPercentage(newFloatPerc);
                                      return txPromiseRef.contents;
                                    }));
                      });
                  it("should call the onlyAdmin modifier", (function () {
                          return Chai.intEqual(undefined, StakerSmocked.InternalMock.onlyAdminModifierLogicCalls(undefined).length, 1);
                        }));
                  it("should call _changeFloatPercentage with correct argument", (function () {
                          return Chai.recordEqualFlat(StakerSmocked.InternalMock._changeFloatPercentageCalls(undefined)[0], {
                                      newFloatPercentage: newFloatPerc
                                    });
                        }));
                  it("emits FloatPercentageUpdated with correct argument", (function () {
                          var partial_arg = Chai.callEmitEvents(txPromiseRef.contents, contracts.contents.staker, "FloatPercentageUpdated");
                          return function (param) {
                            return partial_arg.withArgs(newFloatPerc, param);
                          };
                        }));
                  it("should revert if !(0 < newFloatPercentage <= 100 percent)", (function () {
                          var testValueWithinBounds = Globals.bnFromString("420000000000000000");
                          var testValueOutOfBoundsLowSide = Globals.bnFromInt(0);
                          var testValueOutOfBoundsHighSide = Globals.bnFromString("1010000000000000000");
                          return LetOps.Await.let_(contracts.contents.staker._changeFloatPercentageExposed(testValueWithinBounds), (function (param) {
                                        return LetOps.Await.let_(Chai.expectRevert(contracts.contents.staker._changeFloatPercentageExposed(testValueOutOfBoundsLowSide), ""), (function (param) {
                                                      return Chai.expectRevert(contracts.contents.staker._changeFloatPercentageExposed(testValueOutOfBoundsHighSide), "");
                                                    }));
                                      }));
                        }));
                  it("should update floatPercentage correctly", (function () {
                          var randomNewFloatPerc = Globals.mul(Helpers.randomInteger(undefined), Globals.bnFromString("10000000"));
                          return LetOps.Await.let_(contracts.contents.staker._changeFloatPercentageExposed(randomNewFloatPerc), (function (param) {
                                        return LetOps.Await.let_(contracts.contents.staker.floatPercentage(), (function (floatPercAfterCall) {
                                                      return Chai.bnEqual(undefined, randomNewFloatPerc, floatPercAfterCall);
                                                    }));
                                      }));
                        }));
                  
                }));
          describe("changeUnstakeFee", (function () {
                  var unstakeFeeBasisPoints = Helpers.randomInteger(undefined);
                  var txPromiseRef = {
                    contents: Promise.resolve(undefined)
                  };
                  Globals.before_once$p(function (param) {
                        return LetOps.Await.let_(StakerHelpers.deployAndSetupStakerToUnitTest("changeUnstakeFee", contracts, accounts), (function (param) {
                                      txPromiseRef.contents = contracts.contents.staker.changeUnstakeFee(marketIndex, unstakeFeeBasisPoints);
                                      return txPromiseRef.contents;
                                    }));
                      });
                  it("should call _changeUnstakeFee with correct arguments", (function () {
                          return Chai.recordEqualFlat(StakerSmocked.InternalMock._changeUnstakeFeeCalls(undefined)[0], {
                                      marketIndex: marketIndex,
                                      newMarketUnstakeFee_e18: unstakeFeeBasisPoints
                                    });
                        }));
                  it("should emit StakeWithdrawalFeeUpdated with correct arguments", (function () {
                          return Chai.callEmitEvents(txPromiseRef.contents, contracts.contents.staker, "StakeWithdrawalFeeUpdated").withArgs(marketIndex, unstakeFeeBasisPoints);
                        }));
                  it("should not allow new unstake fee greater than 5 percent", (function () {
                          var adminWallet = accounts.contents[0];
                          var sixPercent = Globals.bnFromString("60000000000000000");
                          return LetOps.Await.let_(Chai.expectRevert(contracts.contents.staker.connect(adminWallet)._changeUnstakeFeeExposed(marketIndex, sixPercent), ""), (function (param) {
                                        
                                      }));
                        }));
                  it("should update unstake fee correctly", (function () {
                          var adminWallet = accounts.contents[0];
                          var newFeePercentageRandom = Globals.mul(Helpers.randomInteger(undefined), Globals.bnFromString("10000000"));
                          return LetOps.Await.let_(contracts.contents.staker.connect(adminWallet)._changeUnstakeFeeExposed(1, newFeePercentageRandom), (function (param) {
                                        return LetOps.Await.let_(contracts.contents.staker.marketUnstakeFee_e18(1), (function (feeAfterCall) {
                                                      return Chai.bnEqual(undefined, feeAfterCall, newFeePercentageRandom);
                                                    }));
                                      }));
                        }));
                  
                }));
          describe("changeBalanceIncentiveExponent", (function () {
                  var startingTestExponent = Globals.bnFromInt(1);
                  var updatedExponent = Globals.bnFromInt(2);
                  var txPromiseRef = {
                    contents: Promise.resolve(undefined)
                  };
                  Globals.before_once$p(function (param) {
                        return LetOps.Await.let_(StakerHelpers.deployAndSetupStakerToUnitTest("changeBalanceIncentiveExponent", contracts, accounts), (function (param) {
                                      StakerSmocked.InternalMock.mock_changeBalanceIncentiveExponentToReturn(undefined);
                                      var stakerAddress = accounts.contents[5];
                                      txPromiseRef.contents = contracts.contents.staker.connect(stakerAddress).changeBalanceIncentiveExponent(23, startingTestExponent);
                                      return txPromiseRef.contents;
                                    }));
                      });
                  it("should call the onlyAdmin Modifier", (function () {
                          return LetOps.Await.let_(contracts.contents.staker.changeBalanceIncentiveExponent(23, updatedExponent), (function (param) {
                                        return Chai.intEqual(undefined, StakerSmocked.InternalMock.onlyAdminModifierLogicCalls(undefined).length, 1);
                                      }));
                        }));
                  it("should call _changeBalanceIncentiveExponent with correct arguments", (function () {
                          return Chai.recordEqualFlat(StakerSmocked.InternalMock._changeBalanceIncentiveExponentCalls(undefined)[0], {
                                      marketIndex: 23,
                                      balanceIncentiveCurve_exponent: updatedExponent
                                    });
                        }));
                  it("should emit BalanceIncentiveExponentUpdated with correct arguments", (function () {
                          return Chai.callEmitEvents(txPromiseRef.contents, contracts.contents.staker, "BalanceIncentiveExponentUpdated").withArgs(23, startingTestExponent);
                        }));
                  it("should only allow (0 < new exponent < 6 percent)", (function () {
                          var adminWallet = accounts.contents[0];
                          var newExponentOutOfBoundsHighSide = Globals.bnFromInt(6);
                          var newExponentOutOfBoundsLowSide = Globals.bnFromInt(0);
                          return LetOps.Await.let_(Chai.expectRevert(contracts.contents.staker.connect(adminWallet)._changeBalanceIncentiveExponentExposed(23, newExponentOutOfBoundsHighSide), ""), (function (param) {
                                        return Chai.expectRevert(contracts.contents.staker.connect(adminWallet)._changeBalanceIncentiveExponentExposed(23, newExponentOutOfBoundsLowSide), "");
                                      }));
                        }));
                  it("should update incentive exponent correctly", (function () {
                          var adminWallet = accounts.contents[0];
                          var newExponent = Globals.bnFromInt(4);
                          return LetOps.Await.let_(contracts.contents.staker.connect(adminWallet)._changeBalanceIncentiveExponentExposed(23, newExponent), (function (param) {
                                        return LetOps.Await.let_(contracts.contents.staker.balanceIncentiveCurve_exponent(23), (function (exponentAfterCall) {
                                                      return Chai.bnEqual(undefined, exponentAfterCall, newExponent);
                                                    }));
                                      }));
                        }));
                  
                }));
          describe("changeBalanceIncentiveEquilibriumOffset", (function () {
                  var startingEquilibriumOffset = Helpers.randomInteger(undefined);
                  var updatedEquilibriumOffset = Helpers.randomInteger(undefined);
                  var txPromiseRef = {
                    contents: Promise.resolve(undefined)
                  };
                  Globals.before_once$p(function (param) {
                        return LetOps.Await.let_(StakerHelpers.deployAndSetupStakerToUnitTest("changeBalanceIncentiveEquilibriumOffset", contracts, accounts), (function (param) {
                                      StakerSmocked.InternalMock.mock_changeBalanceIncentiveEquilibriumOffsetToReturn(undefined);
                                      var stakerAddress = accounts.contents[5];
                                      txPromiseRef.contents = contracts.contents.staker.connect(stakerAddress).changeBalanceIncentiveEquilibriumOffset(15, startingEquilibriumOffset);
                                      return txPromiseRef.contents;
                                    }));
                      });
                  it("should call the onlyAdmin Modifier", (function () {
                          return LetOps.Await.let_(contracts.contents.staker.changeBalanceIncentiveEquilibriumOffset(15, updatedEquilibriumOffset), (function (param) {
                                        return Chai.intEqual(undefined, StakerSmocked.InternalMock.onlyAdminModifierLogicCalls(undefined).length, 1);
                                      }));
                        }));
                  it("should call _changeBalanceIncentiveEquilibriumOffset with correct arguments", (function () {
                          return Chai.recordEqualFlat(StakerSmocked.InternalMock._changeBalanceIncentiveEquilibriumOffsetCalls(undefined)[0], {
                                      marketIndex: 15,
                                      balanceIncentiveCurve_equilibriumOffset: updatedEquilibriumOffset
                                    });
                        }));
                  it("should emit BalanceIncentiveEquilibriumOffsetUpdated with correct arguments", (function () {
                          return Chai.callEmitEvents(txPromiseRef.contents, contracts.contents.staker, "BalanceIncentiveEquilibriumOffsetUpdated").withArgs(15, startingEquilibriumOffset);
                        }));
                  it("should ensure (-9e17 < new equilibrium offset < 9e17)", (function () {
                          var adminWallet = accounts.contents[0];
                          var newOffsetOutOfBoundsHighSide = Globals.add(Globals.bnFromString("900000000000000000"), Helpers.randomTokenAmount(undefined));
                          var newOffsetOutOfBoundsLowSide = Globals.sub(Globals.bnFromString("-900000000000000000"), Helpers.randomTokenAmount(undefined));
                          return LetOps.Await.let_(Chai.expectRevert(contracts.contents.staker.connect(adminWallet)._changeBalanceIncentiveEquilibriumOffsetExposed(15, newOffsetOutOfBoundsHighSide), ""), (function (param) {
                                        return LetOps.Await.let_(Chai.expectRevert(contracts.contents.staker.connect(adminWallet)._changeBalanceIncentiveEquilibriumOffsetExposed(15, newOffsetOutOfBoundsLowSide), ""), (function (param) {
                                                      
                                                    }));
                                      }));
                        }));
                  it("should update incentive equilibrium offset correctly", (function () {
                          var adminWallet = accounts.contents[0];
                          var updatedEquilibriumOffset2 = Helpers.randomInteger(undefined);
                          return LetOps.Await.let_(contracts.contents.staker.connect(adminWallet)._changeBalanceIncentiveEquilibriumOffsetExposed(15, updatedEquilibriumOffset2), (function (param) {
                                        return LetOps.Await.let_(contracts.contents.staker.balanceIncentiveCurve_equilibriumOffset(15), (function (exponentAfterCall) {
                                                      return Chai.bnEqual(undefined, exponentAfterCall, updatedEquilibriumOffset2);
                                                    }));
                                      }));
                        }));
                  
                }));
          
        }));
  
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
