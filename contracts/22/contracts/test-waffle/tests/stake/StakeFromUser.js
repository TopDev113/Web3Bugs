// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var StakerHelpers = require("./StakerHelpers.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");
var Smock = require("@eth-optimism/smock");

function test(contracts, accounts) {
  describe("stakeFromUser", (function () {
          var longShortSmockedRef = {
            contents: undefined
          };
          var marketIndexForToken = Helpers.randomJsInteger(undefined);
          var from = Helpers.randomAddress(undefined);
          var amount = Helpers.randomTokenAmount(undefined);
          var mockTokenWalletRef = {
            contents: undefined
          };
          Globals.before_once$p(function (param) {
                return LetOps.Await.let_(StakerHelpers.deployAndSetupStakerToUnitTest("stakeFromUser", contracts, accounts), (function (param) {
                              var match = contracts.contents;
                              return LetOps.Await.let_(Smock.smockit(match.longShort), (function (longShortSmocked) {
                                            LongShortSmocked.mockUpdateSystemStateToReturn(longShortSmocked);
                                            longShortSmockedRef.contents = longShortSmocked;
                                            mockTokenWalletRef.contents = Belt_Array.getExn(accounts.contents, 6);
                                            return LetOps.Await.let_(contracts.contents.staker.setStakeFromUserParams(longShortSmocked.address, mockTokenWalletRef.contents.address, marketIndexForToken), (function (param) {
                                                          StakerSmocked.InternalMock.mock_stakeToReturn(undefined);
                                                          return contracts.contents.staker.connect(mockTokenWalletRef.contents).stakeFromUser(from, amount);
                                                        }));
                                          }));
                            }));
              });
          it.skip("calls onlyValidSynthetic with correct args", (function () {
                  
                }));
          it("calls _stake with correct args", (function () {
                  return Chai.recordEqualFlat(Belt_Array.getExn(StakerSmocked.InternalMock._stakeCalls(undefined), 0), {
                              token: mockTokenWalletRef.contents.address,
                              amount: amount,
                              user: from
                            });
                }));
          it("calls updateSystemState on longshort with correct args", (function () {
                  return Chai.recordEqualFlat(Belt_Array.getExn(LongShortSmocked.updateSystemStateCalls(longShortSmockedRef.contents), 0), {
                              marketIndex: marketIndexForToken
                            });
                }));
          
        }));
  
}

exports.test = test;
/* Chai Not a pure module */
