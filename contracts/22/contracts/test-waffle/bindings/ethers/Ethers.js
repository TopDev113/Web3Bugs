// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Belt_Float = require("rescript/lib/js/belt_Float.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function unsafeToOption(unsafeFunc) {
  try {
    return Caml_option.some(Curry._1(unsafeFunc, undefined));
  }
  catch (raw__obj){
    var _obj = Caml_js_exceptions.internalToOCamlException(raw__obj);
    if (_obj.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw _obj;
  }
}

var Misc = {
  unsafeToOption: unsafeToOption
};

function makeAbi(abiArray) {
  return abiArray;
}

var BigNumber = {};

var Wallet = {};

var Providers = {};

function make(address, abi, providerSigner) {
  return new (ethers.Contract)(address, abi, providerSigner._0);
}

var Contract = {
  make: make
};

function parseUnits(amount, unit) {
  return unsafeToOption(function (param) {
              return ethers.utils.parseUnits(amount, unit);
            });
}

function parseEther(amount) {
  return parseUnits(amount, "ether");
}

function parseEtherUnsafe(amount) {
  return ethers.utils.parseUnits(amount, "ether");
}

function getAddress(addressString) {
  return unsafeToOption(function (param) {
              return ethers.utils.getAddress(addressString);
            });
}

function formatEther(__x) {
  return ethers.utils.formatUnits(__x, "ether");
}

function formatEtherToPrecision(number, digits) {
  var digitMultiplier = Math.pow(10.0, digits);
  return String(Math.floor(Belt_Option.getExn(Belt_Float.fromString(ethers.utils.formatUnits(number, "ether"))) * digitMultiplier) / digitMultiplier);
}

function ethAdrToStr(prim) {
  return prim;
}

function ethAdrToLowerStr(address) {
  return address.toLowerCase();
}

var Utils = {
  parseUnits: parseUnits,
  parseEther: parseEther,
  parseEtherUnsafe: parseEtherUnsafe,
  getAddress: getAddress,
  formatEther: formatEther,
  formatEtherToPrecision: formatEtherToPrecision,
  ethAdrToStr: ethAdrToStr,
  ethAdrToLowerStr: ethAdrToLowerStr
};

exports.Misc = Misc;
exports.makeAbi = makeAbi;
exports.BigNumber = BigNumber;
exports.Wallet = Wallet;
exports.Providers = Providers;
exports.Contract = Contract;
exports.Utils = Utils;
/* No side effect */
