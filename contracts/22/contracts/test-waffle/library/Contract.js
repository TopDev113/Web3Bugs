// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var LetOps = require("./LetOps.js");
var Staker = require("./contracts/Staker.js");
var Globals = require("./Globals.js");
var CONSTANTS = require("../CONSTANTS.js");
var ContractHelpers = require("./ContractHelpers.js");

function mintAndApprove(t, user, amount, spender) {
  return t.mint(user.address, amount).then(function (param) {
              return t.connect(user).approve(spender, amount);
            });
}

var PaymentTokenHelpers = {
  mintAndApprove: mintAndApprove
};

function marketIndexOfSynth(longShort, syntheticToken) {
  return longShort.staker().then(Staker.at).then(function (__x) {
              return __x.marketIndexOfToken(syntheticToken.address);
            });
}

var DataFetchers = {
  marketIndexOfSynth: marketIndexOfSynth
};

function getMarketBalance(longShort, marketIndex) {
  return LetOps.AwaitThen.let_(longShort.marketSideValueInPaymentToken(marketIndex, true), (function (longValue) {
                return LetOps.Await.let_(longShort.marketSideValueInPaymentToken(marketIndex, false), (function (shortValue) {
                              return {
                                      longValue: longValue,
                                      shortValue: shortValue
                                    };
                            }));
              }));
}

function getSyntheticTokenPrice(longShort, marketIndex, isLong) {
  return LetOps.AwaitThen.let_(longShort.syntheticTokens(marketIndex, isLong), (function (syntheticTokenAddress) {
                return LetOps.AwaitThen.let_(ContractHelpers.attachToContract("SyntheticToken", syntheticTokenAddress), (function (synthContract) {
                              return LetOps.AwaitThen.let_(synthContract.totalSupply(), (function (totalSupply) {
                                            return LetOps.Await.let_(longShort.marketSideValueInPaymentToken(marketIndex, isLong), (function (marketSideValueInPaymentToken) {
                                                          return Globals.div(Globals.mul(marketSideValueInPaymentToken, CONSTANTS.tenToThe18), totalSupply);
                                                        }));
                                          }));
                            }));
              }));
}

function calcSyntheticTokenPrice(amountPaymentToken, amountSyntheticToken) {
  return Globals.div(Globals.mul(amountPaymentToken, CONSTANTS.tenToThe18), amountSyntheticToken);
}

function calcAmountPaymentToken(amountSyntheticToken, price) {
  return Globals.div(Globals.mul(amountSyntheticToken, price), CONSTANTS.tenToThe18);
}

function calcAmountSyntheticToken(amountPaymentToken, price) {
  return Globals.div(Globals.mul(amountPaymentToken, CONSTANTS.tenToThe18), price);
}

function calcEquivalentAmountSyntheticTokensOnTargetSide(amountSyntheticTokenOriginSide, priceOriginSide, priceTargetSide) {
  return Globals.div(Globals.mul(amountSyntheticTokenOriginSide, priceOriginSide), priceTargetSide);
}

var LongShortHelpers = {
  getMarketBalance: getMarketBalance,
  getSyntheticTokenPrice: getSyntheticTokenPrice,
  calcSyntheticTokenPrice: calcSyntheticTokenPrice,
  calcAmountPaymentToken: calcAmountPaymentToken,
  calcAmountSyntheticToken: calcAmountSyntheticToken,
  calcEquivalentAmountSyntheticTokensOnTargetSide: calcEquivalentAmountSyntheticTokensOnTargetSide
};

function getIsLong(syntheticToken) {
  return LetOps.Await.let_(syntheticToken.isLong(), (function (isLong) {
                return isLong === true;
              }));
}

var SyntheticTokenHelpers = {
  getIsLong: getIsLong
};

var YieldManagerAaveHelpers = {};

exports.PaymentTokenHelpers = PaymentTokenHelpers;
exports.DataFetchers = DataFetchers;
exports.LongShortHelpers = LongShortHelpers;
exports.SyntheticTokenHelpers = SyntheticTokenHelpers;
exports.YieldManagerAaveHelpers = YieldManagerAaveHelpers;
/* Globals Not a pure module */
