// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_int = require("rescript/lib/js/js_int.js");
var Staker = require("./contracts/Staker.js");
var Globals = require("./Globals.js");
var Js_math = require("rescript/lib/js/js_math.js");
var CONSTANTS = require("../CONSTANTS.js");
var ERC20Mock = require("./contracts/ERC20Mock.js");
var LongShort = require("./contracts/LongShort.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var FloatToken = require("./contracts/FloatToken.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Treasury_v0 = require("./contracts/Treasury_v0.js");
var TokenFactory = require("./contracts/TokenFactory.js");
var StakerSmocked = require("./smock/StakerSmocked.js");
var SyntheticToken = require("./contracts/SyntheticToken.js");
var FloatCapital_v0 = require("./contracts/FloatCapital_v0.js");
var LongShortSmocked = require("./smock/LongShortSmocked.js");
var YieldManagerAave = require("./contracts/YieldManagerAave.js");
var YieldManagerMock = require("./contracts/YieldManagerMock.js");
var OracleManagerMock = require("./contracts/OracleManagerMock.js");
var Smock = require("@eth-optimism/smock");

function make2(fn) {
  return [
          Curry._1(fn, undefined),
          Curry._1(fn, undefined)
        ];
}

function make3(fn) {
  return [
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined)
        ];
}

function make4(fn) {
  return [
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined)
        ];
}

function make5(fn) {
  return [
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined)
        ];
}

function make6(fn) {
  return [
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined)
        ];
}

function make7(fn) {
  return [
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined)
        ];
}

function make8(fn) {
  return [
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined),
          Curry._1(fn, undefined)
        ];
}

var Tuple = {
  make2: make2,
  make3: make3,
  make4: make4,
  make5: make5,
  make6: make6,
  make7: make7,
  make8: make8
};

function randomInteger(param) {
  return ethers.BigNumber.from(Js_math.random_int(1, Js_int.max));
}

function randomJsInteger(param) {
  return Js_math.random_int(0, Js_int.max);
}

function randomRatio1e18(param) {
  return Globals.bnFromString(String(Js_math.random_int(0, 1000000000)) + String(Js_math.random_int(0, 1000000000)));
}

function adjustNumberRandomlyWithinRange(basisPointsMin, basisPointsMax, number) {
  var numerator = Globals.bnFromInt(Js_math.random_int(basisPointsMin, basisPointsMax));
  return Globals.add(number, Globals.div(Globals.mul(number, numerator), Globals.bnFromInt(100000)));
}

function randomTokenAmount(param) {
  return ethers.BigNumber.from(Js_math.random_int(1, Js_int.max)).mul(ethers.BigNumber.from("10000000000000000"));
}

function randomMintLongShort(param) {
  var match = Js_math.random_int(0, 3);
  switch (match) {
    case 0 :
        return {
                TAG: /* Long */0,
                _0: randomTokenAmount(undefined)
              };
    case 1 :
        return {
                TAG: /* Short */1,
                _0: randomTokenAmount(undefined)
              };
    case 2 :
        return {
                TAG: /* Both */2,
                _0: randomTokenAmount(undefined),
                _1: randomTokenAmount(undefined)
              };
    default:
      return {
              TAG: /* Both */2,
              _0: randomTokenAmount(undefined),
              _1: randomTokenAmount(undefined)
            };
  }
}

function randomAddress(param) {
  return ethers.Wallet.createRandom().address;
}

function createSyntheticMarket(admin, initialMarketSeedForEachMarketSideOpt, paymentToken, treasury, marketName, marketSymbol, longShort) {
  var initialMarketSeedForEachMarketSide = initialMarketSeedForEachMarketSideOpt !== undefined ? Caml_option.valFromOption(initialMarketSeedForEachMarketSideOpt) : CONSTANTS.tenToThe18;
  return Promise.all([
                OracleManagerMock.make(admin),
                YieldManagerMock.make(longShort.address, treasury, paymentToken.address),
                paymentToken.mint(admin, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(100))).then(function (param) {
                      return paymentToken.approve(longShort.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(100)));
                    })
              ]).then(function (param) {
              var yieldManager = param[1];
              paymentToken.MINTER_ROLE().then(function (minterRole) {
                    return paymentToken.grantRole(minterRole, yieldManager.address);
                  });
              return longShort.createNewSyntheticMarket(marketName, marketSymbol, paymentToken.address, param[0].address, yieldManager.address).then(function (param) {
                            return longShort.latestMarket();
                          }).then(function (marketIndex) {
                          return longShort.initializeMarket(marketIndex, ethers.BigNumber.from("1000000000000000000"), ethers.BigNumber.from(0), ethers.BigNumber.from(50), initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1));
                        });
            });
}

function getAllMarkets(longShort) {
  return longShort.latestMarket().then(function (nextMarketIndex) {
              return Promise.all(Belt_Array.map(Belt_Array.range(1, nextMarketIndex), (function (marketIndex) {
                                return Promise.all([
                                              longShort.syntheticTokens(marketIndex, true).then(SyntheticToken.at),
                                              longShort.syntheticTokens(marketIndex, false).then(SyntheticToken.at),
                                              longShort.paymentTokens(marketIndex).then(ERC20Mock.at),
                                              longShort.oracleManagers(marketIndex).then(OracleManagerMock.at),
                                              longShort.yieldManagers(marketIndex).then(YieldManagerMock.at)
                                            ]).then(function (param) {
                                            return {
                                                    paymentToken: param[2],
                                                    oracleManager: param[3],
                                                    yieldManager: param[4],
                                                    longSynth: param[0],
                                                    shortSynth: param[1],
                                                    marketIndex: marketIndex
                                                  };
                                          });
                              })));
            });
}

function initialize(admin, exposeInternals) {
  return Promise.all([
                FloatCapital_v0.make(undefined),
                Treasury_v0.make(undefined),
                FloatToken.make(undefined),
                exposeInternals ? Staker.Exposed.make(undefined) : Staker.make(undefined),
                exposeInternals ? LongShort.Exposed.make(undefined) : LongShort.make(undefined),
                Promise.all([
                      ERC20Mock.make("Pay Token 1", "PT1"),
                      ERC20Mock.make("Pay Token 2", "PT2")
                    ])
              ]).then(function (param) {
              var match = param[5];
              var payToken2 = match[1];
              var payToken1 = match[0];
              var longShort = param[4];
              var staker = param[3];
              var floatToken = param[2];
              var treasury = param[1];
              var floatCapital = param[0];
              return TokenFactory.make(longShort.address).then(function (tokenFactory) {
                          return Promise.all([
                                          floatToken.initializeFloatToken("Float token", "FLOAT TOKEN", staker.address),
                                          treasury.initialize(admin.address),
                                          longShort.initialize(admin.address, treasury.address, tokenFactory.address, staker.address),
                                          staker.initialize(admin.address, longShort.address, floatToken.address, floatCapital.address, floatCapital.address, Globals.bnFromString("250000000000000000"))
                                        ]).then(function (param) {
                                        return Belt_Array.reduceWithIndex([
                                                      payToken1,
                                                      payToken1,
                                                      payToken2,
                                                      payToken1
                                                    ], Promise.resolve(undefined), (function (previousPromise, paymentToken, index) {
                                                        return previousPromise.then(function (param) {
                                                                    return createSyntheticMarket(admin.address, undefined, paymentToken, treasury.address, "Test Market " + String(index), "TM" + String(index), longShort);
                                                                  });
                                                      })).then(function (param) {
                                                    return getAllMarkets(longShort);
                                                  });
                                      }).then(function (markets) {
                                      return {
                                              floatCapital_v0: floatCapital,
                                              tokenFactory: tokenFactory,
                                              treasury: treasury,
                                              floatToken: floatToken,
                                              staker: staker,
                                              longShort: longShort,
                                              markets: markets
                                            };
                                    });
                        });
            });
}

function initializeStakerUnit(param) {
  return Promise.all([
                Staker.Exposed.make(undefined),
                LongShort.make(undefined),
                FloatToken.make(undefined),
                SyntheticToken.make("baseTestSyntheticToken", "BTST", CONSTANTS.zeroAddress, CONSTANTS.zeroAddress, 0, false)
              ]).then(function (param) {
              var syntheticToken = param[3];
              var floatToken = param[2];
              var longShort = param[1];
              var staker = param[0];
              return Promise.all([
                            StakerSmocked.InternalMock.setup(staker),
                            Smock.smockit(longShort),
                            Smock.smockit(floatToken),
                            Smock.smockit(syntheticToken)
                          ]).then(function (param) {
                          return {
                                  staker: staker,
                                  longShort: longShort,
                                  floatToken: floatToken,
                                  syntheticToken: syntheticToken,
                                  longShortSmocked: param[1],
                                  floatTokenSmocked: param[2],
                                  syntheticTokenSmocked: param[3]
                                };
                        });
            });
}

function initializeLongShortUnit(param) {
  return ERC20Mock.make("Pay Token 1", "PT1").then(function (paymentToken) {
              return Promise.all([
                            LongShort.Exposed.make(undefined),
                            Staker.make(undefined),
                            FloatToken.make(undefined),
                            TokenFactory.make(CONSTANTS.zeroAddress),
                            YieldManagerAave.make(CONSTANTS.zeroAddress, CONSTANTS.zeroAddress, paymentToken.address, CONSTANTS.zeroAddress, ethers.Wallet.createRandom().address, ethers.Wallet.createRandom().address, 0),
                            OracleManagerMock.make(CONSTANTS.zeroAddress),
                            SyntheticToken.make("baseTestSyntheticToken", "BTST", CONSTANTS.zeroAddress, CONSTANTS.zeroAddress, 0, false)
                          ]).then(function (param) {
                          var syntheticToken = param[6];
                          var oracleManager = param[5];
                          var yieldManager = param[4];
                          var tokenFactory = param[3];
                          var floatToken = param[2];
                          var staker = param[1];
                          var longShort = param[0];
                          return Promise.all([
                                        LongShortSmocked.InternalMock.setup(longShort),
                                        Smock.smockit(staker),
                                        Smock.smockit(floatToken),
                                        Smock.smockit(syntheticToken),
                                        Smock.smockit(tokenFactory),
                                        Smock.smockit(yieldManager),
                                        Smock.smockit(oracleManager)
                                      ]).then(function (param) {
                                      return {
                                              staker: staker,
                                              longShort: longShort,
                                              floatToken: floatToken,
                                              syntheticToken: syntheticToken,
                                              tokenFactory: tokenFactory,
                                              yieldManager: yieldManager,
                                              oracleManager: oracleManager,
                                              stakerSmocked: param[1],
                                              floatTokenSmocked: param[2],
                                              syntheticTokenSmocked: param[3],
                                              tokenFactorySmocked: param[4],
                                              yieldManagerSmocked: param[5],
                                              oracleManagerSmocked: param[6]
                                            };
                                    });
                        });
            });
}

var increaseTime = ((seconds) => ethers.provider.send("evm_increaseTime", [seconds]));

var getBlock = (() => ethers.provider.getBlock());

function getRandomTimestampInPast(param) {
  return Curry._1(getBlock, undefined).then(function (param) {
              return Promise.resolve(ethers.BigNumber.from(param.timestamp - Js_math.random_int(200, 630720000) | 0));
            });
}

exports.Tuple = Tuple;
exports.randomInteger = randomInteger;
exports.randomJsInteger = randomJsInteger;
exports.randomRatio1e18 = randomRatio1e18;
exports.adjustNumberRandomlyWithinRange = adjustNumberRandomlyWithinRange;
exports.randomTokenAmount = randomTokenAmount;
exports.randomMintLongShort = randomMintLongShort;
exports.randomAddress = randomAddress;
exports.createSyntheticMarket = createSyntheticMarket;
exports.getAllMarkets = getAllMarkets;
exports.initialize = initialize;
exports.initializeStakerUnit = initializeStakerUnit;
exports.initializeLongShortUnit = initializeLongShortUnit;
exports.increaseTime = increaseTime;
exports.getBlock = getBlock;
exports.getRandomTimestampInPast = getRandomTimestampInPast;
/* Globals Not a pure module */
