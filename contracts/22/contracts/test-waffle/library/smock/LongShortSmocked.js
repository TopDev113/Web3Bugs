// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var ContractHelpers = require("../ContractHelpers.js");
var Smock = require("@eth-optimism/smock");

function mockPERMANENT_INITIAL_LIQUIDITY_HOLDERToReturn(_r, _param0) {
  ((_r.smocked.PERMANENT_INITIAL_LIQUIDITY_HOLDER.will.return.with([_param0])));
  
}

function pERMANENT_INITIAL_LIQUIDITY_HOLDERCalls(_r) {
  var array = _r.smocked.PERMANENT_INITIAL_LIQUIDITY_HOLDER.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockAdminToReturn(_r, _param0) {
  ((_r.smocked.admin.will.return.with([_param0])));
  
}

function adminCalls(_r) {
  var array = _r.smocked.admin.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockAssetPriceToReturn(_r, _param0) {
  ((_r.smocked.assetPrice.will.return.with([_param0])));
  
}

function assetPriceCalls(_r) {
  var array = _r.smocked.assetPrice.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockBatched_amountPaymentToken_depositToReturn(_r, _param0) {
  ((_r.smocked.batched_amountPaymentToken_deposit.will.return.with([_param0])));
  
}

function batched_amountPaymentToken_depositCalls(_r) {
  var array = _r.smocked.batched_amountPaymentToken_deposit.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockBatched_amountSyntheticToken_redeemToReturn(_r, _param0) {
  ((_r.smocked.batched_amountSyntheticToken_redeem.will.return.with([_param0])));
  
}

function batched_amountSyntheticToken_redeemCalls(_r) {
  var array = _r.smocked.batched_amountSyntheticToken_redeem.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockBatched_amountSyntheticToken_toShiftAwayFrom_marketSideToReturn(_r, _param0) {
  ((_r.smocked.batched_amountSyntheticToken_toShiftAwayFrom_marketSide.will.return.with([_param0])));
  
}

function batched_amountSyntheticToken_toShiftAwayFrom_marketSideCalls(_r) {
  var array = _r.smocked.batched_amountSyntheticToken_toShiftAwayFrom_marketSide.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockChangeAdminToReturn(_r) {
  ((_r.smocked.changeAdmin.will.return()));
  
}

function changeAdminCalls(_r) {
  var array = _r.smocked.changeAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var admin = _m[0];
                return {
                        admin: admin
                      };
              }));
}

function mockChangeMarketTreasurySplitGradientToReturn(_r) {
  ((_r.smocked.changeMarketTreasurySplitGradient.will.return()));
  
}

function changeMarketTreasurySplitGradientCalls(_r) {
  var array = _r.smocked.changeMarketTreasurySplitGradient.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        marketTreasurySplitGradient_e18: param[1]
                      };
              }));
}

function mockChangeTreasuryToReturn(_r) {
  ((_r.smocked.changeTreasury.will.return()));
  
}

function changeTreasuryCalls(_r) {
  var array = _r.smocked.changeTreasury.calls;
  return Belt_Array.map(array, (function (_m) {
                var treasury = _m[0];
                return {
                        treasury: treasury
                      };
              }));
}

function mockCreateNewSyntheticMarketToReturn(_r) {
  ((_r.smocked.createNewSyntheticMarket.will.return()));
  
}

function createNewSyntheticMarketCalls(_r) {
  var array = _r.smocked.createNewSyntheticMarket.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        syntheticName: param[0],
                        syntheticSymbol: param[1],
                        paymentToken: param[2],
                        oracleManager: param[3],
                        yieldManager: param[4]
                      };
              }));
}

function mockExecuteOutstandingNextPriceSettlementsUserToReturn(_r) {
  ((_r.smocked.executeOutstandingNextPriceSettlementsUser.will.return()));
  
}

function executeOutstandingNextPriceSettlementsUserCalls(_r) {
  var array = _r.smocked.executeOutstandingNextPriceSettlementsUser.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        marketIndex: param[1]
                      };
              }));
}

function mockExecuteOutstandingNextPriceSettlementsUserMultiToReturn(_r) {
  ((_r.smocked.executeOutstandingNextPriceSettlementsUserMulti.will.return()));
  
}

function executeOutstandingNextPriceSettlementsUserMultiCalls(_r) {
  var array = _r.smocked.executeOutstandingNextPriceSettlementsUserMulti.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        marketIndexes: param[1]
                      };
              }));
}

function mockGetAmountSyntheticTokenToMintOnTargetSideToReturn(_r, _param0) {
  ((_r.smocked.getAmountSyntheticTokenToMintOnTargetSide.will.return.with([_param0])));
  
}

function getAmountSyntheticTokenToMintOnTargetSideCalls(_r) {
  var array = _r.smocked.getAmountSyntheticTokenToMintOnTargetSide.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amountSyntheticToken_redeemOnOriginSide: param[1],
                        isShiftFromLong: param[2],
                        priceSnapshotIndex: param[3]
                      };
              }));
}

function mockGetUsersConfirmedButNotSettledSynthBalanceToReturn(_r, _param0) {
  ((_r.smocked.getUsersConfirmedButNotSettledSynthBalance.will.return.with([_param0])));
  
}

function getUsersConfirmedButNotSettledSynthBalanceCalls(_r) {
  var array = _r.smocked.getUsersConfirmedButNotSettledSynthBalance.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        marketIndex: param[1],
                        isLong: param[2]
                      };
              }));
}

function mockInitializeToReturn(_r) {
  ((_r.smocked.initialize.will.return()));
  
}

function initializeCalls(_r) {
  var array = _r.smocked.initialize.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        admin: param[0],
                        treasury: param[1],
                        tokenFactory: param[2],
                        staker: param[3]
                      };
              }));
}

function mockInitializeMarketToReturn(_r) {
  ((_r.smocked.initializeMarket.will.return()));
  
}

function initializeMarketCalls(_r) {
  var array = _r.smocked.initializeMarket.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        kInitialMultiplier: param[1],
                        kPeriod: param[2],
                        unstakeFee_e18: param[3],
                        initialMarketSeedForEachMarketSide: param[4],
                        balanceIncentiveCurve_exponent: param[5],
                        balanceIncentiveCurve_equilibriumOffset: param[6],
                        marketTreasurySplitGradient_e18: param[7]
                      };
              }));
}

function mockLatestMarketToReturn(_r, _param0) {
  ((_r.smocked.latestMarket.will.return.with([_param0])));
  
}

function latestMarketCalls(_r) {
  var array = _r.smocked.latestMarket.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockMarketExistsToReturn(_r, _param0) {
  ((_r.smocked.marketExists.will.return.with([_param0])));
  
}

function marketExistsCalls(_r) {
  var array = _r.smocked.marketExists.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMarketSideValueInPaymentTokenToReturn(_r, _param0) {
  ((_r.smocked.marketSideValueInPaymentToken.will.return.with([_param0])));
  
}

function marketSideValueInPaymentTokenCalls(_r) {
  var array = _r.smocked.marketSideValueInPaymentToken.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockMarketTreasurySplitGradient_e18ToReturn(_r, _param0) {
  ((_r.smocked.marketTreasurySplitGradient_e18.will.return.with([_param0])));
  
}

function marketTreasurySplitGradient_e18Calls(_r) {
  var array = (_r.smocked.marketTreasurySplitGradient_e18.calls);
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMarketUpdateIndexToReturn(_r, _param0) {
  ((_r.smocked.marketUpdateIndex.will.return.with([_param0])));
  
}

function marketUpdateIndexCalls(_r) {
  var array = _r.smocked.marketUpdateIndex.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMintLongNextPriceToReturn(_r) {
  ((_r.smocked.mintLongNextPrice.will.return()));
  
}

function mintLongNextPriceCalls(_r) {
  var array = _r.smocked.mintLongNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amount: param[1]
                      };
              }));
}

function mockMintShortNextPriceToReturn(_r) {
  ((_r.smocked.mintShortNextPrice.will.return()));
  
}

function mintShortNextPriceCalls(_r) {
  var array = _r.smocked.mintShortNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amount: param[1]
                      };
              }));
}

function mockOracleManagersToReturn(_r, _param0) {
  ((_r.smocked.oracleManagers.will.return.with([_param0])));
  
}

function oracleManagersCalls(_r) {
  var array = _r.smocked.oracleManagers.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockPaymentTokensToReturn(_r, _param0) {
  ((_r.smocked.paymentTokens.will.return.with([_param0])));
  
}

function paymentTokensCalls(_r) {
  var array = _r.smocked.paymentTokens.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockRedeemLongNextPriceToReturn(_r) {
  ((_r.smocked.redeemLongNextPrice.will.return()));
  
}

function redeemLongNextPriceCalls(_r) {
  var array = _r.smocked.redeemLongNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        tokens_redeem: param[1]
                      };
              }));
}

function mockRedeemShortNextPriceToReturn(_r) {
  ((_r.smocked.redeemShortNextPrice.will.return()));
  
}

function redeemShortNextPriceCalls(_r) {
  var array = _r.smocked.redeemShortNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        tokens_redeem: param[1]
                      };
              }));
}

function mockShiftPositionFromLongNextPriceToReturn(_r) {
  ((_r.smocked.shiftPositionFromLongNextPrice.will.return()));
  
}

function shiftPositionFromLongNextPriceCalls(_r) {
  var array = _r.smocked.shiftPositionFromLongNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amountSyntheticTokensToShift: param[1]
                      };
              }));
}

function mockShiftPositionFromShortNextPriceToReturn(_r) {
  ((_r.smocked.shiftPositionFromShortNextPrice.will.return()));
  
}

function shiftPositionFromShortNextPriceCalls(_r) {
  var array = _r.smocked.shiftPositionFromShortNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amountSyntheticTokensToShift: param[1]
                      };
              }));
}

function mockStakerToReturn(_r, _param0) {
  ((_r.smocked.staker.will.return.with([_param0])));
  
}

function stakerCalls(_r) {
  var array = _r.smocked.staker.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockSyntheticToken_priceSnapshotToReturn(_r, _param0) {
  ((_r.smocked.syntheticToken_priceSnapshot.will.return.with([_param0])));
  
}

function syntheticToken_priceSnapshotCalls(_r) {
  var array = _r.smocked.syntheticToken_priceSnapshot.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function mockSyntheticTokensToReturn(_r, _param0) {
  ((_r.smocked.syntheticTokens.will.return.with([_param0])));
  
}

function syntheticTokensCalls(_r) {
  var array = _r.smocked.syntheticTokens.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockTokenFactoryToReturn(_r, _param0) {
  ((_r.smocked.tokenFactory.will.return.with([_param0])));
  
}

function tokenFactoryCalls(_r) {
  var array = _r.smocked.tokenFactory.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTreasuryToReturn(_r, _param0) {
  ((_r.smocked.treasury.will.return.with([_param0])));
  
}

function treasuryCalls(_r) {
  var array = _r.smocked.treasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockUpdateMarketOracleToReturn(_r) {
  ((_r.smocked.updateMarketOracle.will.return()));
  
}

function updateMarketOracleCalls(_r) {
  var array = _r.smocked.updateMarketOracle.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        newOracleManager: param[1]
                      };
              }));
}

function mockUpdateSystemStateToReturn(_r) {
  ((_r.smocked.updateSystemState.will.return()));
  
}

function updateSystemStateCalls(_r) {
  var array = _r.smocked.updateSystemState.calls;
  return Belt_Array.map(array, (function (_m) {
                var marketIndex = _m[0];
                return {
                        marketIndex: marketIndex
                      };
              }));
}

function mockUpdateSystemStateMultiToReturn(_r) {
  ((_r.smocked.updateSystemStateMulti.will.return()));
  
}

function updateSystemStateMultiCalls(_r) {
  var array = _r.smocked.updateSystemStateMulti.calls;
  return Belt_Array.map(array, (function (_m) {
                var marketIndexes = _m[0];
                return {
                        marketIndexes: marketIndexes
                      };
              }));
}

function mockUserNextPrice_currentUpdateIndexToReturn(_r, _param0) {
  ((_r.smocked.userNextPrice_currentUpdateIndex.will.return.with([_param0])));
  
}

function userNextPrice_currentUpdateIndexCalls(_r) {
  var array = _r.smocked.userNextPrice_currentUpdateIndex.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockUserNextPrice_paymentToken_depositAmountToReturn(_r, _param0) {
  ((_r.smocked.userNextPrice_paymentToken_depositAmount.will.return.with([_param0])));
  
}

function userNextPrice_paymentToken_depositAmountCalls(_r) {
  var array = _r.smocked.userNextPrice_paymentToken_depositAmount.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function mockUserNextPrice_syntheticToken_redeemAmountToReturn(_r, _param0) {
  ((_r.smocked.userNextPrice_syntheticToken_redeemAmount.will.return.with([_param0])));
  
}

function userNextPrice_syntheticToken_redeemAmountCalls(_r) {
  var array = _r.smocked.userNextPrice_syntheticToken_redeemAmount.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function mockUserNextPrice_syntheticToken_toShiftAwayFrom_marketSideToReturn(_r, _param0) {
  ((_r.smocked.userNextPrice_syntheticToken_toShiftAwayFrom_marketSide.will.return.with([_param0])));
  
}

function userNextPrice_syntheticToken_toShiftAwayFrom_marketSideCalls(_r) {
  var array = _r.smocked.userNextPrice_syntheticToken_toShiftAwayFrom_marketSide.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function mockYieldManagersToReturn(_r, _param0) {
  ((_r.smocked.yieldManagers.will.return.with([_param0])));
  
}

function yieldManagersCalls(_r) {
  var array = _r.smocked.yieldManagers.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

var mockContractName = "LongShortForInternalMocking";

var internalRef = {
  contents: undefined
};

var functionToNotMock = {
  contents: ""
};

function setup(contract) {
  return ContractHelpers.deployContract0(mockContractName).then(function (a) {
                return Smock.smockit(a);
              }).then(function (b) {
              internalRef.contents = b;
              return contract.setMocker(b.address);
            });
}

function setFunctionForUnitTesting(contract, functionName) {
  functionToNotMock.contents = functionName;
  return contract.setFunctionToNotMock(functionName);
}

function setupFunctionForUnitTesting(contract, functionName) {
  return ContractHelpers.deployContract0(mockContractName).then(function (a) {
                return Smock.smockit(a);
              }).then(function (b) {
              internalRef.contents = b;
              return Promise.all([
                          contract.setMocker(b.address),
                          contract.setFunctionToNotMock(functionName)
                        ]);
            });
}

var MockingAFunctionThatYouShouldntBe = /* @__PURE__ */Caml_exceptions.create("LongShortSmocked.InternalMock.MockingAFunctionThatYouShouldntBe");

var HaventSetupInternalMockingForLongShort = /* @__PURE__ */Caml_exceptions.create("LongShortSmocked.InternalMock.HaventSetupInternalMockingForLongShort");

function checkForExceptions(functionName) {
  if (functionToNotMock.contents === functionName) {
    throw {
          RE_EXN_ID: MockingAFunctionThatYouShouldntBe,
          Error: new Error()
        };
  }
  if (internalRef.contents !== undefined) {
    return ;
  }
  throw {
        RE_EXN_ID: HaventSetupInternalMockingForLongShort,
        Error: new Error()
      };
}

function mockAdminOnlyModifierLogicToReturn(param) {
  checkForExceptions("adminOnlyModifierLogic");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.adminOnlyModifierLogicMock.will.return()));
          
        }));
  
}

function adminOnlyModifierLogicCalls(param) {
  checkForExceptions("adminOnlyModifierLogic");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.adminOnlyModifierLogicMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  
                                }));
                  })));
}

function mockRequireMarketExistsModifierLogicToReturn(param) {
  checkForExceptions("requireMarketExistsModifierLogic");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.requireMarketExistsModifierLogicMock.will.return()));
          
        }));
  
}

function requireMarketExistsModifierLogicCalls(param) {
  checkForExceptions("requireMarketExistsModifierLogic");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.requireMarketExistsModifierLogicMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mockInitializeToReturn$1(param) {
  checkForExceptions("initialize");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.initializeMock.will.return()));
          
        }));
  
}

function initializeCalls$1(param) {
  checkForExceptions("initialize");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.initializeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          admin: param[0],
                                          treasury: param[1],
                                          tokenFactory: param[2],
                                          staker: param[3]
                                        };
                                }));
                  })));
}

function mock_seedMarketInitiallyToReturn(param) {
  checkForExceptions("_seedMarketInitially");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._seedMarketInitiallyMock.will.return()));
          
        }));
  
}

function _seedMarketInitiallyCalls(param) {
  checkForExceptions("_seedMarketInitially");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._seedMarketInitiallyMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          initialMarketSeedForEachMarketSide: param[0],
                                          marketIndex: param[1]
                                        };
                                }));
                  })));
}

function mock_getMinToReturn(_param0) {
  checkForExceptions("_getMin");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._getMinMock.will.return.with([_param0])));
          
        }));
  
}

function _getMinCalls(param) {
  checkForExceptions("_getMin");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._getMinMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          a: param[0],
                                          b: param[1]
                                        };
                                }));
                  })));
}

function mock_getSyntheticTokenPriceToReturn(_param0) {
  checkForExceptions("_getSyntheticTokenPrice");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._getSyntheticTokenPriceMock.will.return.with([_param0])));
          
        }));
  
}

function _getSyntheticTokenPriceCalls(param) {
  checkForExceptions("_getSyntheticTokenPrice");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._getSyntheticTokenPriceMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          amountPaymentTokenBackingSynth: param[0],
                                          amountSyntheticToken: param[1]
                                        };
                                }));
                  })));
}

function mock_getAmountPaymentTokenToReturn(_param0) {
  checkForExceptions("_getAmountPaymentToken");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._getAmountPaymentTokenMock.will.return.with([_param0])));
          
        }));
  
}

function _getAmountPaymentTokenCalls(param) {
  checkForExceptions("_getAmountPaymentToken");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._getAmountPaymentTokenMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          amountSyntheticToken: param[0],
                                          syntheticTokenPriceInPaymentTokens: param[1]
                                        };
                                }));
                  })));
}

function mock_getAmountSyntheticTokenToReturn(_param0) {
  checkForExceptions("_getAmountSyntheticToken");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._getAmountSyntheticTokenMock.will.return.with([_param0])));
          
        }));
  
}

function _getAmountSyntheticTokenCalls(param) {
  checkForExceptions("_getAmountSyntheticToken");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._getAmountSyntheticTokenMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          amountPaymentTokenBackingSynth: param[0],
                                          syntheticTokenPriceInPaymentTokens: param[1]
                                        };
                                }));
                  })));
}

function mock_getEquivalentAmountSyntheticTokensOnTargetSideToReturn(_param0) {
  checkForExceptions("_getEquivalentAmountSyntheticTokensOnTargetSide");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._getEquivalentAmountSyntheticTokensOnTargetSideMock.will.return.with([_param0])));
          
        }));
  
}

function _getEquivalentAmountSyntheticTokensOnTargetSideCalls(param) {
  checkForExceptions("_getEquivalentAmountSyntheticTokensOnTargetSide");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._getEquivalentAmountSyntheticTokensOnTargetSideMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          amountSyntheticTokens_originSide: param[0],
                                          syntheticTokenPrice_originSide: param[1],
                                          syntheticTokenPrice_targetSide: param[2]
                                        };
                                }));
                  })));
}

function mockGetAmountSyntheticTokenToMintOnTargetSideToReturn$1(_param0) {
  checkForExceptions("getAmountSyntheticTokenToMintOnTargetSide");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.getAmountSyntheticTokenToMintOnTargetSideMock.will.return.with([_param0])));
          
        }));
  
}

function getAmountSyntheticTokenToMintOnTargetSideCalls$1(param) {
  checkForExceptions("getAmountSyntheticTokenToMintOnTargetSide");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.getAmountSyntheticTokenToMintOnTargetSideMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          amountSyntheticToken_redeemOnOriginSide: param[1],
                                          isShiftFromLong: param[2],
                                          priceSnapshotIndex: param[3]
                                        };
                                }));
                  })));
}

function mockGetUsersConfirmedButNotSettledSynthBalanceToReturn$1(_param0) {
  checkForExceptions("getUsersConfirmedButNotSettledSynthBalance");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.getUsersConfirmedButNotSettledSynthBalanceMock.will.return.with([_param0])));
          
        }));
  
}

function getUsersConfirmedButNotSettledSynthBalanceCalls$1(param) {
  checkForExceptions("getUsersConfirmedButNotSettledSynthBalance");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.getUsersConfirmedButNotSettledSynthBalanceMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          user: param[0],
                                          marketIndex: param[1],
                                          isLong: param[2]
                                        };
                                }));
                  })));
}

function mock_getYieldSplitToReturn(_param0, _param1) {
  checkForExceptions("_getYieldSplit");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._getYieldSplitMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function _getYieldSplitCalls(param) {
  checkForExceptions("_getYieldSplit");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._getYieldSplitMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longValue: param[1],
                                          shortValue: param[2],
                                          totalValueLockedInMarket: param[3]
                                        };
                                }));
                  })));
}

function mock_claimAndDistributeYieldThenRebalanceMarketToReturn(_param0, _param1) {
  checkForExceptions("_claimAndDistributeYieldThenRebalanceMarket");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._claimAndDistributeYieldThenRebalanceMarketMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function _claimAndDistributeYieldThenRebalanceMarketCalls(param) {
  checkForExceptions("_claimAndDistributeYieldThenRebalanceMarket");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._claimAndDistributeYieldThenRebalanceMarketMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          newAssetPrice: param[1],
                                          oldAssetPrice: param[2]
                                        };
                                }));
                  })));
}

function mock_updateSystemStateInternalToReturn(param) {
  checkForExceptions("_updateSystemStateInternal");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._updateSystemStateInternalMock.will.return()));
          
        }));
  
}

function _updateSystemStateInternalCalls(param) {
  checkForExceptions("_updateSystemStateInternal");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._updateSystemStateInternalMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mock_transferPaymentTokensFromUserToYieldManagerToReturn(param) {
  checkForExceptions("_transferPaymentTokensFromUserToYieldManager");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._transferPaymentTokensFromUserToYieldManagerMock.will.return()));
          
        }));
  
}

function _transferPaymentTokensFromUserToYieldManagerCalls(param) {
  checkForExceptions("_transferPaymentTokensFromUserToYieldManager");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._transferPaymentTokensFromUserToYieldManagerMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          amount: param[1]
                                        };
                                }));
                  })));
}

function mock_mintNextPriceToReturn(param) {
  checkForExceptions("_mintNextPrice");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._mintNextPriceMock.will.return()));
          
        }));
  
}

function _mintNextPriceCalls(param) {
  checkForExceptions("_mintNextPrice");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._mintNextPriceMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          amount: param[1],
                                          isLong: param[2]
                                        };
                                }));
                  })));
}

function mock_redeemNextPriceToReturn(param) {
  checkForExceptions("_redeemNextPrice");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._redeemNextPriceMock.will.return()));
          
        }));
  
}

function _redeemNextPriceCalls(param) {
  checkForExceptions("_redeemNextPrice");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._redeemNextPriceMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          tokens_redeem: param[1],
                                          isLong: param[2]
                                        };
                                }));
                  })));
}

function mock_shiftPositionNextPriceToReturn(param) {
  checkForExceptions("_shiftPositionNextPrice");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._shiftPositionNextPriceMock.will.return()));
          
        }));
  
}

function _shiftPositionNextPriceCalls(param) {
  checkForExceptions("_shiftPositionNextPrice");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._shiftPositionNextPriceMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          amountSyntheticTokensToShift: param[1],
                                          isShiftFromLong: param[2]
                                        };
                                }));
                  })));
}

function mock_executeOutstandingNextPriceMintsToReturn(param) {
  checkForExceptions("_executeOutstandingNextPriceMints");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._executeOutstandingNextPriceMintsMock.will.return()));
          
        }));
  
}

function _executeOutstandingNextPriceMintsCalls(param) {
  checkForExceptions("_executeOutstandingNextPriceMints");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._executeOutstandingNextPriceMintsMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          user: param[1],
                                          isLong: param[2]
                                        };
                                }));
                  })));
}

function mock_executeOutstandingNextPriceRedeemsToReturn(param) {
  checkForExceptions("_executeOutstandingNextPriceRedeems");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._executeOutstandingNextPriceRedeemsMock.will.return()));
          
        }));
  
}

function _executeOutstandingNextPriceRedeemsCalls(param) {
  checkForExceptions("_executeOutstandingNextPriceRedeems");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._executeOutstandingNextPriceRedeemsMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          user: param[1],
                                          isLong: param[2]
                                        };
                                }));
                  })));
}

function mock_executeOutstandingNextPriceTokenShiftsToReturn(param) {
  checkForExceptions("_executeOutstandingNextPriceTokenShifts");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._executeOutstandingNextPriceTokenShiftsMock.will.return()));
          
        }));
  
}

function _executeOutstandingNextPriceTokenShiftsCalls(param) {
  checkForExceptions("_executeOutstandingNextPriceTokenShifts");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._executeOutstandingNextPriceTokenShiftsMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          user: param[1],
                                          isShiftFromLong: param[2]
                                        };
                                }));
                  })));
}

function mock_executeOutstandingNextPriceSettlementsToReturn(param) {
  checkForExceptions("_executeOutstandingNextPriceSettlements");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._executeOutstandingNextPriceSettlementsMock.will.return()));
          
        }));
  
}

function _executeOutstandingNextPriceSettlementsCalls(param) {
  checkForExceptions("_executeOutstandingNextPriceSettlements");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._executeOutstandingNextPriceSettlementsMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          user: param[0],
                                          marketIndex: param[1]
                                        };
                                }));
                  })));
}

function mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToReturn(param) {
  checkForExceptions("_handleTotalPaymentTokenValueChangeForMarketWithYieldManager");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerMock.will.return()));
          
        }));
  
}

function _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerCalls(param) {
  checkForExceptions("_handleTotalPaymentTokenValueChangeForMarketWithYieldManager");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          totalPaymentTokenValueChangeForMarket: param[1]
                                        };
                                }));
                  })));
}

function mock_handleChangeInSyntheticTokensTotalSupplyToReturn(param) {
  checkForExceptions("_handleChangeInSyntheticTokensTotalSupply");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._handleChangeInSyntheticTokensTotalSupplyMock.will.return()));
          
        }));
  
}

function _handleChangeInSyntheticTokensTotalSupplyCalls(param) {
  checkForExceptions("_handleChangeInSyntheticTokensTotalSupply");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._handleChangeInSyntheticTokensTotalSupplyMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          isLong: param[1],
                                          changeInSyntheticTokensTotalSupply: param[2]
                                        };
                                }));
                  })));
}

function mock_batchConfirmOutstandingPendingActionsToReturn(_param0, _param1) {
  checkForExceptions("_batchConfirmOutstandingPendingActions");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._batchConfirmOutstandingPendingActionsMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function _batchConfirmOutstandingPendingActionsCalls(param) {
  checkForExceptions("_batchConfirmOutstandingPendingActions");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._batchConfirmOutstandingPendingActionsMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          syntheticTokenPrice_inPaymentTokens_long: param[1],
                                          syntheticTokenPrice_inPaymentTokens_short: param[2]
                                        };
                                }));
                  })));
}

var InternalMock = {
  mockContractName: mockContractName,
  internalRef: internalRef,
  functionToNotMock: functionToNotMock,
  setup: setup,
  setFunctionForUnitTesting: setFunctionForUnitTesting,
  setupFunctionForUnitTesting: setupFunctionForUnitTesting,
  MockingAFunctionThatYouShouldntBe: MockingAFunctionThatYouShouldntBe,
  HaventSetupInternalMockingForLongShort: HaventSetupInternalMockingForLongShort,
  checkForExceptions: checkForExceptions,
  mockAdminOnlyModifierLogicToReturn: mockAdminOnlyModifierLogicToReturn,
  adminOnlyModifierLogicCalls: adminOnlyModifierLogicCalls,
  mockRequireMarketExistsModifierLogicToReturn: mockRequireMarketExistsModifierLogicToReturn,
  requireMarketExistsModifierLogicCalls: requireMarketExistsModifierLogicCalls,
  mockInitializeToReturn: mockInitializeToReturn$1,
  initializeCalls: initializeCalls$1,
  mock_seedMarketInitiallyToReturn: mock_seedMarketInitiallyToReturn,
  _seedMarketInitiallyCalls: _seedMarketInitiallyCalls,
  mock_getMinToReturn: mock_getMinToReturn,
  _getMinCalls: _getMinCalls,
  mock_getSyntheticTokenPriceToReturn: mock_getSyntheticTokenPriceToReturn,
  _getSyntheticTokenPriceCalls: _getSyntheticTokenPriceCalls,
  mock_getAmountPaymentTokenToReturn: mock_getAmountPaymentTokenToReturn,
  _getAmountPaymentTokenCalls: _getAmountPaymentTokenCalls,
  mock_getAmountSyntheticTokenToReturn: mock_getAmountSyntheticTokenToReturn,
  _getAmountSyntheticTokenCalls: _getAmountSyntheticTokenCalls,
  mock_getEquivalentAmountSyntheticTokensOnTargetSideToReturn: mock_getEquivalentAmountSyntheticTokensOnTargetSideToReturn,
  _getEquivalentAmountSyntheticTokensOnTargetSideCalls: _getEquivalentAmountSyntheticTokensOnTargetSideCalls,
  mockGetAmountSyntheticTokenToMintOnTargetSideToReturn: mockGetAmountSyntheticTokenToMintOnTargetSideToReturn$1,
  getAmountSyntheticTokenToMintOnTargetSideCalls: getAmountSyntheticTokenToMintOnTargetSideCalls$1,
  mockGetUsersConfirmedButNotSettledSynthBalanceToReturn: mockGetUsersConfirmedButNotSettledSynthBalanceToReturn$1,
  getUsersConfirmedButNotSettledSynthBalanceCalls: getUsersConfirmedButNotSettledSynthBalanceCalls$1,
  mock_getYieldSplitToReturn: mock_getYieldSplitToReturn,
  _getYieldSplitCalls: _getYieldSplitCalls,
  mock_claimAndDistributeYieldThenRebalanceMarketToReturn: mock_claimAndDistributeYieldThenRebalanceMarketToReturn,
  _claimAndDistributeYieldThenRebalanceMarketCalls: _claimAndDistributeYieldThenRebalanceMarketCalls,
  mock_updateSystemStateInternalToReturn: mock_updateSystemStateInternalToReturn,
  _updateSystemStateInternalCalls: _updateSystemStateInternalCalls,
  mock_transferPaymentTokensFromUserToYieldManagerToReturn: mock_transferPaymentTokensFromUserToYieldManagerToReturn,
  _transferPaymentTokensFromUserToYieldManagerCalls: _transferPaymentTokensFromUserToYieldManagerCalls,
  mock_mintNextPriceToReturn: mock_mintNextPriceToReturn,
  _mintNextPriceCalls: _mintNextPriceCalls,
  mock_redeemNextPriceToReturn: mock_redeemNextPriceToReturn,
  _redeemNextPriceCalls: _redeemNextPriceCalls,
  mock_shiftPositionNextPriceToReturn: mock_shiftPositionNextPriceToReturn,
  _shiftPositionNextPriceCalls: _shiftPositionNextPriceCalls,
  mock_executeOutstandingNextPriceMintsToReturn: mock_executeOutstandingNextPriceMintsToReturn,
  _executeOutstandingNextPriceMintsCalls: _executeOutstandingNextPriceMintsCalls,
  mock_executeOutstandingNextPriceRedeemsToReturn: mock_executeOutstandingNextPriceRedeemsToReturn,
  _executeOutstandingNextPriceRedeemsCalls: _executeOutstandingNextPriceRedeemsCalls,
  mock_executeOutstandingNextPriceTokenShiftsToReturn: mock_executeOutstandingNextPriceTokenShiftsToReturn,
  _executeOutstandingNextPriceTokenShiftsCalls: _executeOutstandingNextPriceTokenShiftsCalls,
  mock_executeOutstandingNextPriceSettlementsToReturn: mock_executeOutstandingNextPriceSettlementsToReturn,
  _executeOutstandingNextPriceSettlementsCalls: _executeOutstandingNextPriceSettlementsCalls,
  mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToReturn: mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToReturn,
  _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerCalls: _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerCalls,
  mock_handleChangeInSyntheticTokensTotalSupplyToReturn: mock_handleChangeInSyntheticTokensTotalSupplyToReturn,
  _handleChangeInSyntheticTokensTotalSupplyCalls: _handleChangeInSyntheticTokensTotalSupplyCalls,
  mock_batchConfirmOutstandingPendingActionsToReturn: mock_batchConfirmOutstandingPendingActionsToReturn,
  _batchConfirmOutstandingPendingActionsCalls: _batchConfirmOutstandingPendingActionsCalls
};

var uninitializedValue;

exports.uninitializedValue = uninitializedValue;
exports.mockPERMANENT_INITIAL_LIQUIDITY_HOLDERToReturn = mockPERMANENT_INITIAL_LIQUIDITY_HOLDERToReturn;
exports.pERMANENT_INITIAL_LIQUIDITY_HOLDERCalls = pERMANENT_INITIAL_LIQUIDITY_HOLDERCalls;
exports.mockAdminToReturn = mockAdminToReturn;
exports.adminCalls = adminCalls;
exports.mockAssetPriceToReturn = mockAssetPriceToReturn;
exports.assetPriceCalls = assetPriceCalls;
exports.mockBatched_amountPaymentToken_depositToReturn = mockBatched_amountPaymentToken_depositToReturn;
exports.batched_amountPaymentToken_depositCalls = batched_amountPaymentToken_depositCalls;
exports.mockBatched_amountSyntheticToken_redeemToReturn = mockBatched_amountSyntheticToken_redeemToReturn;
exports.batched_amountSyntheticToken_redeemCalls = batched_amountSyntheticToken_redeemCalls;
exports.mockBatched_amountSyntheticToken_toShiftAwayFrom_marketSideToReturn = mockBatched_amountSyntheticToken_toShiftAwayFrom_marketSideToReturn;
exports.batched_amountSyntheticToken_toShiftAwayFrom_marketSideCalls = batched_amountSyntheticToken_toShiftAwayFrom_marketSideCalls;
exports.mockChangeAdminToReturn = mockChangeAdminToReturn;
exports.changeAdminCalls = changeAdminCalls;
exports.mockChangeMarketTreasurySplitGradientToReturn = mockChangeMarketTreasurySplitGradientToReturn;
exports.changeMarketTreasurySplitGradientCalls = changeMarketTreasurySplitGradientCalls;
exports.mockChangeTreasuryToReturn = mockChangeTreasuryToReturn;
exports.changeTreasuryCalls = changeTreasuryCalls;
exports.mockCreateNewSyntheticMarketToReturn = mockCreateNewSyntheticMarketToReturn;
exports.createNewSyntheticMarketCalls = createNewSyntheticMarketCalls;
exports.mockExecuteOutstandingNextPriceSettlementsUserToReturn = mockExecuteOutstandingNextPriceSettlementsUserToReturn;
exports.executeOutstandingNextPriceSettlementsUserCalls = executeOutstandingNextPriceSettlementsUserCalls;
exports.mockExecuteOutstandingNextPriceSettlementsUserMultiToReturn = mockExecuteOutstandingNextPriceSettlementsUserMultiToReturn;
exports.executeOutstandingNextPriceSettlementsUserMultiCalls = executeOutstandingNextPriceSettlementsUserMultiCalls;
exports.mockGetAmountSyntheticTokenToMintOnTargetSideToReturn = mockGetAmountSyntheticTokenToMintOnTargetSideToReturn;
exports.getAmountSyntheticTokenToMintOnTargetSideCalls = getAmountSyntheticTokenToMintOnTargetSideCalls;
exports.mockGetUsersConfirmedButNotSettledSynthBalanceToReturn = mockGetUsersConfirmedButNotSettledSynthBalanceToReturn;
exports.getUsersConfirmedButNotSettledSynthBalanceCalls = getUsersConfirmedButNotSettledSynthBalanceCalls;
exports.mockInitializeToReturn = mockInitializeToReturn;
exports.initializeCalls = initializeCalls;
exports.mockInitializeMarketToReturn = mockInitializeMarketToReturn;
exports.initializeMarketCalls = initializeMarketCalls;
exports.mockLatestMarketToReturn = mockLatestMarketToReturn;
exports.latestMarketCalls = latestMarketCalls;
exports.mockMarketExistsToReturn = mockMarketExistsToReturn;
exports.marketExistsCalls = marketExistsCalls;
exports.mockMarketSideValueInPaymentTokenToReturn = mockMarketSideValueInPaymentTokenToReturn;
exports.marketSideValueInPaymentTokenCalls = marketSideValueInPaymentTokenCalls;
exports.mockMarketTreasurySplitGradient_e18ToReturn = mockMarketTreasurySplitGradient_e18ToReturn;
exports.marketTreasurySplitGradient_e18Calls = marketTreasurySplitGradient_e18Calls;
exports.mockMarketUpdateIndexToReturn = mockMarketUpdateIndexToReturn;
exports.marketUpdateIndexCalls = marketUpdateIndexCalls;
exports.mockMintLongNextPriceToReturn = mockMintLongNextPriceToReturn;
exports.mintLongNextPriceCalls = mintLongNextPriceCalls;
exports.mockMintShortNextPriceToReturn = mockMintShortNextPriceToReturn;
exports.mintShortNextPriceCalls = mintShortNextPriceCalls;
exports.mockOracleManagersToReturn = mockOracleManagersToReturn;
exports.oracleManagersCalls = oracleManagersCalls;
exports.mockPaymentTokensToReturn = mockPaymentTokensToReturn;
exports.paymentTokensCalls = paymentTokensCalls;
exports.mockRedeemLongNextPriceToReturn = mockRedeemLongNextPriceToReturn;
exports.redeemLongNextPriceCalls = redeemLongNextPriceCalls;
exports.mockRedeemShortNextPriceToReturn = mockRedeemShortNextPriceToReturn;
exports.redeemShortNextPriceCalls = redeemShortNextPriceCalls;
exports.mockShiftPositionFromLongNextPriceToReturn = mockShiftPositionFromLongNextPriceToReturn;
exports.shiftPositionFromLongNextPriceCalls = shiftPositionFromLongNextPriceCalls;
exports.mockShiftPositionFromShortNextPriceToReturn = mockShiftPositionFromShortNextPriceToReturn;
exports.shiftPositionFromShortNextPriceCalls = shiftPositionFromShortNextPriceCalls;
exports.mockStakerToReturn = mockStakerToReturn;
exports.stakerCalls = stakerCalls;
exports.mockSyntheticToken_priceSnapshotToReturn = mockSyntheticToken_priceSnapshotToReturn;
exports.syntheticToken_priceSnapshotCalls = syntheticToken_priceSnapshotCalls;
exports.mockSyntheticTokensToReturn = mockSyntheticTokensToReturn;
exports.syntheticTokensCalls = syntheticTokensCalls;
exports.mockTokenFactoryToReturn = mockTokenFactoryToReturn;
exports.tokenFactoryCalls = tokenFactoryCalls;
exports.mockTreasuryToReturn = mockTreasuryToReturn;
exports.treasuryCalls = treasuryCalls;
exports.mockUpdateMarketOracleToReturn = mockUpdateMarketOracleToReturn;
exports.updateMarketOracleCalls = updateMarketOracleCalls;
exports.mockUpdateSystemStateToReturn = mockUpdateSystemStateToReturn;
exports.updateSystemStateCalls = updateSystemStateCalls;
exports.mockUpdateSystemStateMultiToReturn = mockUpdateSystemStateMultiToReturn;
exports.updateSystemStateMultiCalls = updateSystemStateMultiCalls;
exports.mockUserNextPrice_currentUpdateIndexToReturn = mockUserNextPrice_currentUpdateIndexToReturn;
exports.userNextPrice_currentUpdateIndexCalls = userNextPrice_currentUpdateIndexCalls;
exports.mockUserNextPrice_paymentToken_depositAmountToReturn = mockUserNextPrice_paymentToken_depositAmountToReturn;
exports.userNextPrice_paymentToken_depositAmountCalls = userNextPrice_paymentToken_depositAmountCalls;
exports.mockUserNextPrice_syntheticToken_redeemAmountToReturn = mockUserNextPrice_syntheticToken_redeemAmountToReturn;
exports.userNextPrice_syntheticToken_redeemAmountCalls = userNextPrice_syntheticToken_redeemAmountCalls;
exports.mockUserNextPrice_syntheticToken_toShiftAwayFrom_marketSideToReturn = mockUserNextPrice_syntheticToken_toShiftAwayFrom_marketSideToReturn;
exports.userNextPrice_syntheticToken_toShiftAwayFrom_marketSideCalls = userNextPrice_syntheticToken_toShiftAwayFrom_marketSideCalls;
exports.mockYieldManagersToReturn = mockYieldManagersToReturn;
exports.yieldManagersCalls = yieldManagersCalls;
exports.InternalMock = InternalMock;
/* @eth-optimism/smock Not a pure module */
