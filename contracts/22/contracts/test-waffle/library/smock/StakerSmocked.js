// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var ContractHelpers = require("../ContractHelpers.js");
var Smock = require("@eth-optimism/smock");

function mockFLOAT_ISSUANCE_FIXED_DECIMALToReturn(_r, _param0) {
  ((_r.smocked.FLOAT_ISSUANCE_FIXED_DECIMAL.will.return.with([_param0])));
  
}

function fLOAT_ISSUANCE_FIXED_DECIMALCalls(_r) {
  var array = _r.smocked.FLOAT_ISSUANCE_FIXED_DECIMAL.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockAccumulativeFloatPerSyntheticTokenSnapshotsToReturn(_r, _param0, _param1, _param2) {
  ((_r.smocked.accumulativeFloatPerSyntheticTokenSnapshots.will.return.with([_param0,_param1,_param2])));
  
}

function accumulativeFloatPerSyntheticTokenSnapshotsCalls(_r) {
  var array = _r.smocked.accumulativeFloatPerSyntheticTokenSnapshots.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockAddNewStakingFundToReturn(_r) {
  ((_r.smocked.addNewStakingFund.will.return()));
  
}

function addNewStakingFundCalls(_r) {
  var array = _r.smocked.addNewStakingFund.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        longToken: param[1],
                        shortToken: param[2],
                        kInitialMultiplier: param[3],
                        kPeriod: param[4],
                        unstakeFee_e18: param[5],
                        balanceIncentiveCurve_exponent: param[6],
                        balanceIncentiveCurve_equilibriumOffset: param[7]
                      };
              }));
}

function mockAdminToReturn(_r, _param0) {
  ((_r.smocked.admin.will.return.with([_param0])));
  
}

function adminCalls(_r) {
  var array = _r.smocked.admin.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockBalanceIncentiveCurve_equilibriumOffsetToReturn(_r, _param0) {
  ((_r.smocked.balanceIncentiveCurve_equilibriumOffset.will.return.with([_param0])));
  
}

function balanceIncentiveCurve_equilibriumOffsetCalls(_r) {
  var array = _r.smocked.balanceIncentiveCurve_equilibriumOffset.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockBalanceIncentiveCurve_exponentToReturn(_r, _param0) {
  ((_r.smocked.balanceIncentiveCurve_exponent.will.return.with([_param0])));
  
}

function balanceIncentiveCurve_exponentCalls(_r) {
  var array = _r.smocked.balanceIncentiveCurve_exponent.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockBatched_stakerNextTokenShiftIndexToReturn(_r, _param0) {
  ((_r.smocked.batched_stakerNextTokenShiftIndex.will.return.with([_param0])));
  
}

function batched_stakerNextTokenShiftIndexCalls(_r) {
  var array = _r.smocked.batched_stakerNextTokenShiftIndex.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockChangeAdminToReturn(_r) {
  ((_r.smocked.changeAdmin.will.return()));
  
}

function changeAdminCalls(_r) {
  var array = _r.smocked.changeAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var admin = _m[0];
                return {
                        admin: admin
                      };
              }));
}

function mockChangeBalanceIncentiveEquilibriumOffsetToReturn(_r) {
  ((_r.smocked.changeBalanceIncentiveEquilibriumOffset.will.return()));
  
}

function changeBalanceIncentiveEquilibriumOffsetCalls(_r) {
  var array = _r.smocked.changeBalanceIncentiveEquilibriumOffset.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        balanceIncentiveCurve_equilibriumOffset: param[1]
                      };
              }));
}

function mockChangeBalanceIncentiveExponentToReturn(_r) {
  ((_r.smocked.changeBalanceIncentiveExponent.will.return()));
  
}

function changeBalanceIncentiveExponentCalls(_r) {
  var array = _r.smocked.changeBalanceIncentiveExponent.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        balanceIncentiveCurve_exponent: param[1]
                      };
              }));
}

function mockChangeFloatPercentageToReturn(_r) {
  ((_r.smocked.changeFloatPercentage.will.return()));
  
}

function changeFloatPercentageCalls(_r) {
  var array = _r.smocked.changeFloatPercentage.calls;
  return Belt_Array.map(array, (function (_m) {
                var newFloatPercentage = _m[0];
                return {
                        newFloatPercentage: newFloatPercentage
                      };
              }));
}

function mockChangeMarketLaunchIncentiveParametersToReturn(_r) {
  ((_r.smocked.changeMarketLaunchIncentiveParameters.will.return()));
  
}

function changeMarketLaunchIncentiveParametersCalls(_r) {
  var array = _r.smocked.changeMarketLaunchIncentiveParameters.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        period: param[1],
                        initialMultiplier: param[2]
                      };
              }));
}

function mockChangeUnstakeFeeToReturn(_r) {
  ((_r.smocked.changeUnstakeFee.will.return()));
  
}

function changeUnstakeFeeCalls(_r) {
  var array = _r.smocked.changeUnstakeFee.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        newMarketUnstakeFee_e18: param[1]
                      };
              }));
}

function mockClaimFloatCustomToReturn(_r) {
  ((_r.smocked.claimFloatCustom.will.return()));
  
}

function claimFloatCustomCalls(_r) {
  var array = _r.smocked.claimFloatCustom.calls;
  return Belt_Array.map(array, (function (_m) {
                var marketIndexes = _m[0];
                return {
                        marketIndexes: marketIndexes
                      };
              }));
}

function mockClaimFloatCustomForToReturn(_r) {
  ((_r.smocked.claimFloatCustomFor.will.return()));
  
}

function claimFloatCustomForCalls(_r) {
  var array = _r.smocked.claimFloatCustomFor.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndexes: param[0],
                        user: param[1]
                      };
              }));
}

function mockFloatCapitalToReturn(_r, _param0) {
  ((_r.smocked.floatCapital.will.return.with([_param0])));
  
}

function floatCapitalCalls(_r) {
  var array = _r.smocked.floatCapital.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockFloatPercentageToReturn(_r, _param0) {
  ((_r.smocked.floatPercentage.will.return.with([_param0])));
  
}

function floatPercentageCalls(_r) {
  var array = _r.smocked.floatPercentage.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockFloatTokenToReturn(_r, _param0) {
  ((_r.smocked.floatToken.will.return.with([_param0])));
  
}

function floatTokenCalls(_r) {
  var array = _r.smocked.floatToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockFloatTreasuryToReturn(_r, _param0) {
  ((_r.smocked.floatTreasury.will.return.with([_param0])));
  
}

function floatTreasuryCalls(_r) {
  var array = _r.smocked.floatTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockInitializeToReturn(_r) {
  ((_r.smocked.initialize.will.return()));
  
}

function initializeCalls(_r) {
  var array = _r.smocked.initialize.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        admin: param[0],
                        longShort: param[1],
                        floatToken: param[2],
                        floatTreasury: param[3],
                        floatCapital: param[4],
                        floatPercentage: param[5]
                      };
              }));
}

function mockLatestRewardIndexToReturn(_r, _param0) {
  ((_r.smocked.latestRewardIndex.will.return.with([_param0])));
  
}

function latestRewardIndexCalls(_r) {
  var array = _r.smocked.latestRewardIndex.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockLongShortToReturn(_r, _param0) {
  ((_r.smocked.longShort.will.return.with([_param0])));
  
}

function longShortCalls(_r) {
  var array = _r.smocked.longShort.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockMarketIndexOfTokenToReturn(_r, _param0) {
  ((_r.smocked.marketIndexOfToken.will.return.with([_param0])));
  
}

function marketIndexOfTokenCalls(_r) {
  var array = _r.smocked.marketIndexOfToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMarketLaunchIncentive_multipliersToReturn(_r, _param0) {
  ((_r.smocked.marketLaunchIncentive_multipliers.will.return.with([_param0])));
  
}

function marketLaunchIncentive_multipliersCalls(_r) {
  var array = _r.smocked.marketLaunchIncentive_multipliers.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMarketLaunchIncentive_periodToReturn(_r, _param0) {
  ((_r.smocked.marketLaunchIncentive_period.will.return.with([_param0])));
  
}

function marketLaunchIncentive_periodCalls(_r) {
  var array = _r.smocked.marketLaunchIncentive_period.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMarketUnstakeFee_e18ToReturn(_r, _param0) {
  ((_r.smocked.marketUnstakeFee_e18.will.return.with([_param0])));
  
}

function marketUnstakeFee_e18Calls(_r) {
  var array = (_r.smocked.marketUnstakeFee_e18.calls);
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockPushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsToReturn(_r) {
  ((_r.smocked.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations.will.return()));
  
}

function pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsCalls(_r) {
  var array = _r.smocked.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        longPrice: param[1],
                        shortPrice: param[2],
                        longValue: param[3],
                        shortValue: param[4],
                        stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mappingIfShiftExecuted: param[5]
                      };
              }));
}

function mockSafeExponentBitShiftingToReturn(_r, _param0) {
  ((_r.smocked.safeExponentBitShifting.will.return.with([_param0])));
  
}

function safeExponentBitShiftingCalls(_r) {
  var array = _r.smocked.safeExponentBitShifting.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockShiftTokensToReturn(_r) {
  ((_r.smocked.shiftTokens.will.return()));
  
}

function shiftTokensCalls(_r) {
  var array = _r.smocked.shiftTokens.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        amountSyntheticTokensToShift: param[0],
                        marketIndex: param[1],
                        isShiftFromLong: param[2]
                      };
              }));
}

function mockStakeFromUserToReturn(_r) {
  ((_r.smocked.stakeFromUser.will.return()));
  
}

function stakeFromUserCalls(_r) {
  var array = _r.smocked.stakeFromUser.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        from: param[0],
                        amount: param[1]
                      };
              }));
}

function mockStakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mappingToReturn(_r, _param0) {
  ((_r.smocked.stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mapping.will.return.with([_param0])));
  
}

function stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mappingCalls(_r) {
  var array = _r.smocked.stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mapping.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockStakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mappingToReturn(_r, _param0) {
  ((_r.smocked.stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mapping.will.return.with([_param0])));
  
}

function stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mappingCalls(_r) {
  var array = _r.smocked.stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mapping.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockSyntheticTokensToReturn(_r, _param0) {
  ((_r.smocked.syntheticTokens.will.return.with([_param0])));
  
}

function syntheticTokensCalls(_r) {
  var array = _r.smocked.syntheticTokens.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockUserAmountStakedToReturn(_r, _param0) {
  ((_r.smocked.userAmountStaked.will.return.with([_param0])));
  
}

function userAmountStakedCalls(_r) {
  var array = _r.smocked.userAmountStaked.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockUserIndexOfLastClaimedRewardToReturn(_r, _param0) {
  ((_r.smocked.userIndexOfLastClaimedReward.will.return.with([_param0])));
  
}

function userIndexOfLastClaimedRewardCalls(_r) {
  var array = _r.smocked.userIndexOfLastClaimedReward.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockUserNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_longToReturn(_r, _param0) {
  ((_r.smocked.userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_long.will.return.with([_param0])));
  
}

function userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_longCalls(_r) {
  var array = _r.smocked.userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_long.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockUserNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_shortToReturn(_r, _param0) {
  ((_r.smocked.userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_short.will.return.with([_param0])));
  
}

function userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_shortCalls(_r) {
  var array = _r.smocked.userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_short.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockUserNextPrice_stakedSyntheticTokenShiftIndexToReturn(_r, _param0) {
  ((_r.smocked.userNextPrice_stakedSyntheticTokenShiftIndex.will.return.with([_param0])));
  
}

function userNextPrice_stakedSyntheticTokenShiftIndexCalls(_r) {
  var array = _r.smocked.userNextPrice_stakedSyntheticTokenShiftIndex.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockWithdrawToReturn(_r) {
  ((_r.smocked.withdraw.will.return()));
  
}

function withdrawCalls(_r) {
  var array = _r.smocked.withdraw.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        token: param[0],
                        amount: param[1]
                      };
              }));
}

function mockWithdrawAllToReturn(_r) {
  ((_r.smocked.withdrawAll.will.return()));
  
}

function withdrawAllCalls(_r) {
  var array = _r.smocked.withdrawAll.calls;
  return Belt_Array.map(array, (function (_m) {
                var token = _m[0];
                return {
                        token: token
                      };
              }));
}

var mockContractName = "StakerForInternalMocking";

var internalRef = {
  contents: undefined
};

var functionToNotMock = {
  contents: ""
};

function setup(contract) {
  return ContractHelpers.deployContract0(mockContractName).then(function (a) {
                return Smock.smockit(a);
              }).then(function (b) {
              internalRef.contents = b;
              return contract.setMocker(b.address);
            });
}

function setFunctionForUnitTesting(contract, functionName) {
  functionToNotMock.contents = functionName;
  return contract.setFunctionToNotMock(functionName);
}

function setupFunctionForUnitTesting(contract, functionName) {
  return ContractHelpers.deployContract0(mockContractName).then(function (a) {
                return Smock.smockit(a);
              }).then(function (b) {
              internalRef.contents = b;
              return Promise.all([
                          contract.setMocker(b.address),
                          contract.setFunctionToNotMock(functionName)
                        ]);
            });
}

var MockingAFunctionThatYouShouldntBe = /* @__PURE__ */Caml_exceptions.create("StakerSmocked.InternalMock.MockingAFunctionThatYouShouldntBe");

var HaventSetupInternalMockingForStaker = /* @__PURE__ */Caml_exceptions.create("StakerSmocked.InternalMock.HaventSetupInternalMockingForStaker");

function checkForExceptions(functionName) {
  if (functionToNotMock.contents === functionName) {
    throw {
          RE_EXN_ID: MockingAFunctionThatYouShouldntBe,
          Error: new Error()
        };
  }
  if (internalRef.contents !== undefined) {
    return ;
  }
  throw {
        RE_EXN_ID: HaventSetupInternalMockingForStaker,
        Error: new Error()
      };
}

function mockOnlyAdminModifierLogicToReturn(param) {
  checkForExceptions("onlyAdminModifierLogic");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.onlyAdminModifierLogicMock.will.return()));
          
        }));
  
}

function onlyAdminModifierLogicCalls(param) {
  checkForExceptions("onlyAdminModifierLogic");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.onlyAdminModifierLogicMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  
                                }));
                  })));
}

function mockOnlyValidSyntheticModifierLogicToReturn(param) {
  checkForExceptions("onlyValidSyntheticModifierLogic");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.onlyValidSyntheticModifierLogicMock.will.return()));
          
        }));
  
}

function onlyValidSyntheticModifierLogicCalls(param) {
  checkForExceptions("onlyValidSyntheticModifierLogic");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.onlyValidSyntheticModifierLogicMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var synth = _m[0];
                                  return {
                                          synth: synth
                                        };
                                }));
                  })));
}

function mockOnlyValidMarketModifierLogicToReturn(param) {
  checkForExceptions("onlyValidMarketModifierLogic");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.onlyValidMarketModifierLogicMock.will.return()));
          
        }));
  
}

function onlyValidMarketModifierLogicCalls(param) {
  checkForExceptions("onlyValidMarketModifierLogic");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.onlyValidMarketModifierLogicMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mockOnlyLongShortModifierLogicToReturn(param) {
  checkForExceptions("onlyLongShortModifierLogic");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.onlyLongShortModifierLogicMock.will.return()));
          
        }));
  
}

function onlyLongShortModifierLogicCalls(param) {
  checkForExceptions("onlyLongShortModifierLogic");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.onlyLongShortModifierLogicMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  
                                }));
                  })));
}

function mockInitializeToReturn$1(param) {
  checkForExceptions("initialize");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.initializeMock.will.return()));
          
        }));
  
}

function initializeCalls$1(param) {
  checkForExceptions("initialize");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.initializeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          admin: param[0],
                                          longShort: param[1],
                                          floatToken: param[2],
                                          floatTreasury: param[3],
                                          floatCapital: param[4],
                                          floatPercentage: param[5]
                                        };
                                }));
                  })));
}

function mock_changeFloatPercentageToReturn(param) {
  checkForExceptions("_changeFloatPercentage");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeFloatPercentageMock.will.return()));
          
        }));
  
}

function _changeFloatPercentageCalls(param) {
  checkForExceptions("_changeFloatPercentage");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeFloatPercentageMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var newFloatPercentage = _m[0];
                                  return {
                                          newFloatPercentage: newFloatPercentage
                                        };
                                }));
                  })));
}

function mock_changeUnstakeFeeToReturn(param) {
  checkForExceptions("_changeUnstakeFee");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeUnstakeFeeMock.will.return()));
          
        }));
  
}

function _changeUnstakeFeeCalls(param) {
  checkForExceptions("_changeUnstakeFee");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeUnstakeFeeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          newMarketUnstakeFee_e18: param[1]
                                        };
                                }));
                  })));
}

function mock_changeMarketLaunchIncentiveParametersToReturn(param) {
  checkForExceptions("_changeMarketLaunchIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeMarketLaunchIncentiveParametersMock.will.return()));
          
        }));
  
}

function _changeMarketLaunchIncentiveParametersCalls(param) {
  checkForExceptions("_changeMarketLaunchIncentiveParameters");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeMarketLaunchIncentiveParametersMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          period: param[1],
                                          initialMultiplier: param[2]
                                        };
                                }));
                  })));
}

function mock_changeBalanceIncentiveExponentToReturn(param) {
  checkForExceptions("_changeBalanceIncentiveExponent");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeBalanceIncentiveExponentMock.will.return()));
          
        }));
  
}

function _changeBalanceIncentiveExponentCalls(param) {
  checkForExceptions("_changeBalanceIncentiveExponent");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeBalanceIncentiveExponentMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          balanceIncentiveCurve_exponent: param[1]
                                        };
                                }));
                  })));
}

function mock_changeBalanceIncentiveEquilibriumOffsetToReturn(param) {
  checkForExceptions("_changeBalanceIncentiveEquilibriumOffset");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeBalanceIncentiveEquilibriumOffsetMock.will.return()));
          
        }));
  
}

function _changeBalanceIncentiveEquilibriumOffsetCalls(param) {
  checkForExceptions("_changeBalanceIncentiveEquilibriumOffset");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeBalanceIncentiveEquilibriumOffsetMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          balanceIncentiveCurve_equilibriumOffset: param[1]
                                        };
                                }));
                  })));
}

function mock_getMarketLaunchIncentiveParametersToReturn(_param0, _param1) {
  checkForExceptions("_getMarketLaunchIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._getMarketLaunchIncentiveParametersMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function _getMarketLaunchIncentiveParametersCalls(param) {
  checkForExceptions("_getMarketLaunchIncentiveParameters");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._getMarketLaunchIncentiveParametersMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mock_getKValueToReturn(_param0) {
  checkForExceptions("_getKValue");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._getKValueMock.will.return.with([_param0])));
          
        }));
  
}

function _getKValueCalls(param) {
  checkForExceptions("_getKValue");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._getKValueMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mock_calculateFloatPerSecondToReturn(_param0, _param1) {
  checkForExceptions("_calculateFloatPerSecond");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._calculateFloatPerSecondMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function _calculateFloatPerSecondCalls(param) {
  checkForExceptions("_calculateFloatPerSecond");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._calculateFloatPerSecondMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longPrice: param[1],
                                          shortPrice: param[2],
                                          longValue: param[3],
                                          shortValue: param[4]
                                        };
                                }));
                  })));
}

function mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToReturn(_param0) {
  checkForExceptions("_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshot");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotMock.will.return.with([_param0])));
          
        }));
  
}

function _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotCalls(param) {
  checkForExceptions("_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshot");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mock_calculateNewCumulativeIssuancePerStakedSynthToReturn(_param0, _param1) {
  checkForExceptions("_calculateNewCumulativeIssuancePerStakedSynth");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._calculateNewCumulativeIssuancePerStakedSynthMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function _calculateNewCumulativeIssuancePerStakedSynthCalls(param) {
  checkForExceptions("_calculateNewCumulativeIssuancePerStakedSynth");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._calculateNewCumulativeIssuancePerStakedSynthMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longPrice: param[1],
                                          shortPrice: param[2],
                                          longValue: param[3],
                                          shortValue: param[4]
                                        };
                                }));
                  })));
}

function mock_setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshotToReturn(param) {
  checkForExceptions("_setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshot");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshotMock.will.return()));
          
        }));
  
}

function _setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshotCalls(param) {
  checkForExceptions("_setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshot");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshotMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longPrice: param[1],
                                          shortPrice: param[2],
                                          longValue: param[3],
                                          shortValue: param[4]
                                        };
                                }));
                  })));
}

function mock_calculateAccumulatedFloatInRangeToReturn(_param0) {
  checkForExceptions("_calculateAccumulatedFloatInRange");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._calculateAccumulatedFloatInRangeMock.will.return.with([_param0])));
          
        }));
  
}

function _calculateAccumulatedFloatInRangeCalls(param) {
  checkForExceptions("_calculateAccumulatedFloatInRange");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._calculateAccumulatedFloatInRangeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          amountStakedLong: param[1],
                                          amountStakedShort: param[2],
                                          rewardIndexFrom: param[3],
                                          rewardIndexTo: param[4]
                                        };
                                }));
                  })));
}

function mock_calculateAccumulatedFloatToReturn(_param0) {
  checkForExceptions("_calculateAccumulatedFloat");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._calculateAccumulatedFloatMock.will.return.with([_param0])));
          
        }));
  
}

function _calculateAccumulatedFloatCalls(param) {
  checkForExceptions("_calculateAccumulatedFloat");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._calculateAccumulatedFloatMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          user: param[1]
                                        };
                                }));
                  })));
}

function mock_mintFloatToReturn(param) {
  checkForExceptions("_mintFloat");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._mintFloatMock.will.return()));
          
        }));
  
}

function _mintFloatCalls(param) {
  checkForExceptions("_mintFloat");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._mintFloatMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          user: param[0],
                                          floatToMint: param[1]
                                        };
                                }));
                  })));
}

function mock_mintAccumulatedFloatToReturn(param) {
  checkForExceptions("_mintAccumulatedFloat");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._mintAccumulatedFloatMock.will.return()));
          
        }));
  
}

function _mintAccumulatedFloatCalls(param) {
  checkForExceptions("_mintAccumulatedFloat");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._mintAccumulatedFloatMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          user: param[1]
                                        };
                                }));
                  })));
}

function mock_mintAccumulatedFloatMultiToReturn(param) {
  checkForExceptions("_mintAccumulatedFloatMulti");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._mintAccumulatedFloatMultiMock.will.return()));
          
        }));
  
}

function _mintAccumulatedFloatMultiCalls(param) {
  checkForExceptions("_mintAccumulatedFloatMulti");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._mintAccumulatedFloatMultiMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndexes: param[0],
                                          user: param[1]
                                        };
                                }));
                  })));
}

function mockStakeFromUserToReturn$1(param) {
  checkForExceptions("stakeFromUser");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.stakeFromUserMock.will.return()));
          
        }));
  
}

function stakeFromUserCalls$1(param) {
  checkForExceptions("stakeFromUser");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.stakeFromUserMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          from: param[0],
                                          amount: param[1]
                                        };
                                }));
                  })));
}

function mock_stakeToReturn(param) {
  checkForExceptions("_stake");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._stakeMock.will.return()));
          
        }));
  
}

function _stakeCalls(param) {
  checkForExceptions("_stake");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._stakeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          token: param[0],
                                          amount: param[1],
                                          user: param[2]
                                        };
                                }));
                  })));
}

function mockShiftTokensToReturn$1(param) {
  checkForExceptions("shiftTokens");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.shiftTokensMock.will.return()));
          
        }));
  
}

function shiftTokensCalls$1(param) {
  checkForExceptions("shiftTokens");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.shiftTokensMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          amountSyntheticTokensToShift: param[0],
                                          marketIndex: param[1],
                                          isShiftFromLong: param[2]
                                        };
                                }));
                  })));
}

function mock_withdrawToReturn(param) {
  checkForExceptions("_withdraw");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._withdrawMock.will.return()));
          
        }));
  
}

function _withdrawCalls(param) {
  checkForExceptions("_withdraw");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._withdrawMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          token: param[1],
                                          amount: param[2]
                                        };
                                }));
                  })));
}

var InternalMock = {
  mockContractName: mockContractName,
  internalRef: internalRef,
  functionToNotMock: functionToNotMock,
  setup: setup,
  setFunctionForUnitTesting: setFunctionForUnitTesting,
  setupFunctionForUnitTesting: setupFunctionForUnitTesting,
  MockingAFunctionThatYouShouldntBe: MockingAFunctionThatYouShouldntBe,
  HaventSetupInternalMockingForStaker: HaventSetupInternalMockingForStaker,
  checkForExceptions: checkForExceptions,
  mockOnlyAdminModifierLogicToReturn: mockOnlyAdminModifierLogicToReturn,
  onlyAdminModifierLogicCalls: onlyAdminModifierLogicCalls,
  mockOnlyValidSyntheticModifierLogicToReturn: mockOnlyValidSyntheticModifierLogicToReturn,
  onlyValidSyntheticModifierLogicCalls: onlyValidSyntheticModifierLogicCalls,
  mockOnlyValidMarketModifierLogicToReturn: mockOnlyValidMarketModifierLogicToReturn,
  onlyValidMarketModifierLogicCalls: onlyValidMarketModifierLogicCalls,
  mockOnlyLongShortModifierLogicToReturn: mockOnlyLongShortModifierLogicToReturn,
  onlyLongShortModifierLogicCalls: onlyLongShortModifierLogicCalls,
  mockInitializeToReturn: mockInitializeToReturn$1,
  initializeCalls: initializeCalls$1,
  mock_changeFloatPercentageToReturn: mock_changeFloatPercentageToReturn,
  _changeFloatPercentageCalls: _changeFloatPercentageCalls,
  mock_changeUnstakeFeeToReturn: mock_changeUnstakeFeeToReturn,
  _changeUnstakeFeeCalls: _changeUnstakeFeeCalls,
  mock_changeMarketLaunchIncentiveParametersToReturn: mock_changeMarketLaunchIncentiveParametersToReturn,
  _changeMarketLaunchIncentiveParametersCalls: _changeMarketLaunchIncentiveParametersCalls,
  mock_changeBalanceIncentiveExponentToReturn: mock_changeBalanceIncentiveExponentToReturn,
  _changeBalanceIncentiveExponentCalls: _changeBalanceIncentiveExponentCalls,
  mock_changeBalanceIncentiveEquilibriumOffsetToReturn: mock_changeBalanceIncentiveEquilibriumOffsetToReturn,
  _changeBalanceIncentiveEquilibriumOffsetCalls: _changeBalanceIncentiveEquilibriumOffsetCalls,
  mock_getMarketLaunchIncentiveParametersToReturn: mock_getMarketLaunchIncentiveParametersToReturn,
  _getMarketLaunchIncentiveParametersCalls: _getMarketLaunchIncentiveParametersCalls,
  mock_getKValueToReturn: mock_getKValueToReturn,
  _getKValueCalls: _getKValueCalls,
  mock_calculateFloatPerSecondToReturn: mock_calculateFloatPerSecondToReturn,
  _calculateFloatPerSecondCalls: _calculateFloatPerSecondCalls,
  mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToReturn: mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToReturn,
  _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotCalls: _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotCalls,
  mock_calculateNewCumulativeIssuancePerStakedSynthToReturn: mock_calculateNewCumulativeIssuancePerStakedSynthToReturn,
  _calculateNewCumulativeIssuancePerStakedSynthCalls: _calculateNewCumulativeIssuancePerStakedSynthCalls,
  mock_setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshotToReturn: mock_setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshotToReturn,
  _setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshotCalls: _setCurrentAccumulativeIssuancePerStakeStakedSynthSnapshotCalls,
  mock_calculateAccumulatedFloatInRangeToReturn: mock_calculateAccumulatedFloatInRangeToReturn,
  _calculateAccumulatedFloatInRangeCalls: _calculateAccumulatedFloatInRangeCalls,
  mock_calculateAccumulatedFloatToReturn: mock_calculateAccumulatedFloatToReturn,
  _calculateAccumulatedFloatCalls: _calculateAccumulatedFloatCalls,
  mock_mintFloatToReturn: mock_mintFloatToReturn,
  _mintFloatCalls: _mintFloatCalls,
  mock_mintAccumulatedFloatToReturn: mock_mintAccumulatedFloatToReturn,
  _mintAccumulatedFloatCalls: _mintAccumulatedFloatCalls,
  mock_mintAccumulatedFloatMultiToReturn: mock_mintAccumulatedFloatMultiToReturn,
  _mintAccumulatedFloatMultiCalls: _mintAccumulatedFloatMultiCalls,
  mockStakeFromUserToReturn: mockStakeFromUserToReturn$1,
  stakeFromUserCalls: stakeFromUserCalls$1,
  mock_stakeToReturn: mock_stakeToReturn,
  _stakeCalls: _stakeCalls,
  mockShiftTokensToReturn: mockShiftTokensToReturn$1,
  shiftTokensCalls: shiftTokensCalls$1,
  mock_withdrawToReturn: mock_withdrawToReturn,
  _withdrawCalls: _withdrawCalls
};

var uninitializedValue;

exports.uninitializedValue = uninitializedValue;
exports.mockFLOAT_ISSUANCE_FIXED_DECIMALToReturn = mockFLOAT_ISSUANCE_FIXED_DECIMALToReturn;
exports.fLOAT_ISSUANCE_FIXED_DECIMALCalls = fLOAT_ISSUANCE_FIXED_DECIMALCalls;
exports.mockAccumulativeFloatPerSyntheticTokenSnapshotsToReturn = mockAccumulativeFloatPerSyntheticTokenSnapshotsToReturn;
exports.accumulativeFloatPerSyntheticTokenSnapshotsCalls = accumulativeFloatPerSyntheticTokenSnapshotsCalls;
exports.mockAddNewStakingFundToReturn = mockAddNewStakingFundToReturn;
exports.addNewStakingFundCalls = addNewStakingFundCalls;
exports.mockAdminToReturn = mockAdminToReturn;
exports.adminCalls = adminCalls;
exports.mockBalanceIncentiveCurve_equilibriumOffsetToReturn = mockBalanceIncentiveCurve_equilibriumOffsetToReturn;
exports.balanceIncentiveCurve_equilibriumOffsetCalls = balanceIncentiveCurve_equilibriumOffsetCalls;
exports.mockBalanceIncentiveCurve_exponentToReturn = mockBalanceIncentiveCurve_exponentToReturn;
exports.balanceIncentiveCurve_exponentCalls = balanceIncentiveCurve_exponentCalls;
exports.mockBatched_stakerNextTokenShiftIndexToReturn = mockBatched_stakerNextTokenShiftIndexToReturn;
exports.batched_stakerNextTokenShiftIndexCalls = batched_stakerNextTokenShiftIndexCalls;
exports.mockChangeAdminToReturn = mockChangeAdminToReturn;
exports.changeAdminCalls = changeAdminCalls;
exports.mockChangeBalanceIncentiveEquilibriumOffsetToReturn = mockChangeBalanceIncentiveEquilibriumOffsetToReturn;
exports.changeBalanceIncentiveEquilibriumOffsetCalls = changeBalanceIncentiveEquilibriumOffsetCalls;
exports.mockChangeBalanceIncentiveExponentToReturn = mockChangeBalanceIncentiveExponentToReturn;
exports.changeBalanceIncentiveExponentCalls = changeBalanceIncentiveExponentCalls;
exports.mockChangeFloatPercentageToReturn = mockChangeFloatPercentageToReturn;
exports.changeFloatPercentageCalls = changeFloatPercentageCalls;
exports.mockChangeMarketLaunchIncentiveParametersToReturn = mockChangeMarketLaunchIncentiveParametersToReturn;
exports.changeMarketLaunchIncentiveParametersCalls = changeMarketLaunchIncentiveParametersCalls;
exports.mockChangeUnstakeFeeToReturn = mockChangeUnstakeFeeToReturn;
exports.changeUnstakeFeeCalls = changeUnstakeFeeCalls;
exports.mockClaimFloatCustomToReturn = mockClaimFloatCustomToReturn;
exports.claimFloatCustomCalls = claimFloatCustomCalls;
exports.mockClaimFloatCustomForToReturn = mockClaimFloatCustomForToReturn;
exports.claimFloatCustomForCalls = claimFloatCustomForCalls;
exports.mockFloatCapitalToReturn = mockFloatCapitalToReturn;
exports.floatCapitalCalls = floatCapitalCalls;
exports.mockFloatPercentageToReturn = mockFloatPercentageToReturn;
exports.floatPercentageCalls = floatPercentageCalls;
exports.mockFloatTokenToReturn = mockFloatTokenToReturn;
exports.floatTokenCalls = floatTokenCalls;
exports.mockFloatTreasuryToReturn = mockFloatTreasuryToReturn;
exports.floatTreasuryCalls = floatTreasuryCalls;
exports.mockInitializeToReturn = mockInitializeToReturn;
exports.initializeCalls = initializeCalls;
exports.mockLatestRewardIndexToReturn = mockLatestRewardIndexToReturn;
exports.latestRewardIndexCalls = latestRewardIndexCalls;
exports.mockLongShortToReturn = mockLongShortToReturn;
exports.longShortCalls = longShortCalls;
exports.mockMarketIndexOfTokenToReturn = mockMarketIndexOfTokenToReturn;
exports.marketIndexOfTokenCalls = marketIndexOfTokenCalls;
exports.mockMarketLaunchIncentive_multipliersToReturn = mockMarketLaunchIncentive_multipliersToReturn;
exports.marketLaunchIncentive_multipliersCalls = marketLaunchIncentive_multipliersCalls;
exports.mockMarketLaunchIncentive_periodToReturn = mockMarketLaunchIncentive_periodToReturn;
exports.marketLaunchIncentive_periodCalls = marketLaunchIncentive_periodCalls;
exports.mockMarketUnstakeFee_e18ToReturn = mockMarketUnstakeFee_e18ToReturn;
exports.marketUnstakeFee_e18Calls = marketUnstakeFee_e18Calls;
exports.mockPushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsToReturn = mockPushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsToReturn;
exports.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsCalls = pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsCalls;
exports.mockSafeExponentBitShiftingToReturn = mockSafeExponentBitShiftingToReturn;
exports.safeExponentBitShiftingCalls = safeExponentBitShiftingCalls;
exports.mockShiftTokensToReturn = mockShiftTokensToReturn;
exports.shiftTokensCalls = shiftTokensCalls;
exports.mockStakeFromUserToReturn = mockStakeFromUserToReturn;
exports.stakeFromUserCalls = stakeFromUserCalls;
exports.mockStakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mappingToReturn = mockStakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mappingToReturn;
exports.stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mappingCalls = stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mappingCalls;
exports.mockStakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mappingToReturn = mockStakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mappingToReturn;
exports.stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mappingCalls = stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mappingCalls;
exports.mockSyntheticTokensToReturn = mockSyntheticTokensToReturn;
exports.syntheticTokensCalls = syntheticTokensCalls;
exports.mockUserAmountStakedToReturn = mockUserAmountStakedToReturn;
exports.userAmountStakedCalls = userAmountStakedCalls;
exports.mockUserIndexOfLastClaimedRewardToReturn = mockUserIndexOfLastClaimedRewardToReturn;
exports.userIndexOfLastClaimedRewardCalls = userIndexOfLastClaimedRewardCalls;
exports.mockUserNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_longToReturn = mockUserNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_longToReturn;
exports.userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_longCalls = userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_longCalls;
exports.mockUserNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_shortToReturn = mockUserNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_shortToReturn;
exports.userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_shortCalls = userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_shortCalls;
exports.mockUserNextPrice_stakedSyntheticTokenShiftIndexToReturn = mockUserNextPrice_stakedSyntheticTokenShiftIndexToReturn;
exports.userNextPrice_stakedSyntheticTokenShiftIndexCalls = userNextPrice_stakedSyntheticTokenShiftIndexCalls;
exports.mockWithdrawToReturn = mockWithdrawToReturn;
exports.withdrawCalls = withdrawCalls;
exports.mockWithdrawAllToReturn = mockWithdrawAllToReturn;
exports.withdrawAllCalls = withdrawAllCalls;
exports.InternalMock = InternalMock;
/* @eth-optimism/smock Not a pure module */
