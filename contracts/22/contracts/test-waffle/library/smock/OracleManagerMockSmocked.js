// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");

function mockAdminToReturn(_r, _param0) {
  ((_r.smocked.admin.will.return.with([_param0])));
  
}

function adminCalls(_r) {
  var array = _r.smocked.admin.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockGetLatestPriceToReturn(_r, _param0) {
  ((_r.smocked.getLatestPrice.will.return.with([_param0])));
  
}

function getLatestPriceCalls(_r) {
  var array = _r.smocked.getLatestPrice.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockSetPriceToReturn(_r) {
  ((_r.smocked.setPrice.will.return()));
  
}

function setPriceCalls(_r) {
  var array = _r.smocked.setPrice.calls;
  return Belt_Array.map(array, (function (_m) {
                var newPrice = _m[0];
                return {
                        newPrice: newPrice
                      };
              }));
}

function mockUpdatePriceToReturn(_r, _param0) {
  ((_r.smocked.updatePrice.will.return.with([_param0])));
  
}

function updatePriceCalls(_r) {
  var array = _r.smocked.updatePrice.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

var uninitializedValue;

exports.uninitializedValue = uninitializedValue;
exports.mockAdminToReturn = mockAdminToReturn;
exports.adminCalls = adminCalls;
exports.mockGetLatestPriceToReturn = mockGetLatestPriceToReturn;
exports.getLatestPriceCalls = getLatestPriceCalls;
exports.mockSetPriceToReturn = mockSetPriceToReturn;
exports.setPriceCalls = setPriceCalls;
exports.mockUpdatePriceToReturn = mockUpdatePriceToReturn;
exports.updatePriceCalls = updatePriceCalls;
/* No side effect */
