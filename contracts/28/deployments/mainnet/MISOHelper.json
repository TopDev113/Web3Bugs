{
  "address": "0xAea50fa0a2aB411807131ADC10016FE0FfB506b4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControls",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_launcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract MISOAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmFactory",
      "outputs": [
        {
          "internalType": "contract IMisoFarmFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_batchAuction",
          "type": "address"
        }
      ],
      "name": "getBatchAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "commitmentsTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumCommitmentAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.BatchAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crowdsale",
          "type": "address"
        }
      ],
      "name": "getCrowdsaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "goal",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.CrowdsaleInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_document",
          "type": "address"
        }
      ],
      "name": "getDocuments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "data",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastModified",
              "type": "uint256"
            }
          ],
          "internalType": "struct DocumentHepler.Document[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_dutchAuction",
          "type": "address"
        }
      ],
      "name": "getDutchAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "startPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "minimumPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.DutchAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFarmDetail",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusMultiplier",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "rewardToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "accRewardsPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct TokenHelper.TokenInfo",
                  "name": "stakingToken",
                  "type": "tuple"
                }
              ],
              "internalType": "struct FarmHelper.PoolInfo[]",
              "name": "pools",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FarmHelper.FarmInfo",
          "name": "farmInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "farm",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmHelper.UserPoolInfo[]",
          "name": "userInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFarms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusMultiplier",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "rewardToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "accRewardsPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct TokenHelper.TokenInfo",
                  "name": "stakingToken",
                  "type": "tuple"
                }
              ],
              "internalType": "struct FarmHelper.PoolInfo[]",
              "name": "pools",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FarmHelper.FarmInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_hyperbolicAuction",
          "type": "address"
        }
      ],
      "name": "getHyperbolicAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "minimumPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "alpha",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.HyperbolicAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "templateId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.MarketBaseInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farm",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accRewardsPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "stakingToken",
              "type": "tuple"
            }
          ],
          "internalType": "struct FarmHelper.PoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getTokensInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_action",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserMarketInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "commitments",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensClaimable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketHelper.UserMarketInfo",
          "name": "userInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPoolsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "farm",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "pids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "totalStaked",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "pendingRewards",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct FarmHelper.UserPoolsInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract IMisoMarketFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_launcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmFactory",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "contract IMisoTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xadf66123496e1a2681dd39af2c778f2046745caf082a79a3f5005f492495e34b",
  "receipt": {
    "to": null,
    "from": "0x08A736438df6c23e17CE2fBbc877A4CDC2DC7B84",
    "contractAddress": "0xAea50fa0a2aB411807131ADC10016FE0FfB506b4",
    "transactionIndex": 73,
    "gasUsed": "3671063",
    "logsBloom": "0x
    "blockHash": "0xe5faae40cdd42fe811b43b5d85094695ac706c62f7c497708970444102b2a99e",
    "transactionHash": "0xadf66123496e1a2681dd39af2c778f2046745caf082a79a3f5005f492495e34b",
    "logs": [],
    "blockNumber": 12453670,
    "cumulativeGasUsed": "11288402",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe5aa0215da6BDdA22127aF00A305d67bB06494d4",
    "0x1eC9e6f1aDF139A41B94d2590078103f7b8a09DD",
    "0x9d6c60d26B8f776B85d5731AD56b88973C3D370b",
    "0x77185e48DdC269B2d7D3b2938Df5862f8e601E0f",
    "0xC5cF1bdf2b4c03Ea53dbA6a529cbE7bF0bE65c0a"
  ],
  "solcInputHash": "d1b4fa5f316a6a8ee3524e1600e2925f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_launcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract MISOAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmFactory\",\"outputs\":[{\"internalType\":\"contract IMisoFarmFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_batchAuction\",\"type\":\"address\"}],\"name\":\"getBatchAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"commitmentsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCommitmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.BatchAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"getCrowdsaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"goal\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.CrowdsaleInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_document\",\"type\":\"address\"}],\"name\":\"getDocuments\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dutchAuction\",\"type\":\"address\"}],\"name\":\"getDutchAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minimumPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.DutchAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFarmDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"stakingToken\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmHelper.PoolInfo[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FarmHelper.FarmInfo\",\"name\":\"farmInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmHelper.UserPoolInfo[]\",\"name\":\"userInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarms\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"stakingToken\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmHelper.PoolInfo[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FarmHelper.FarmInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_hyperbolicAuction\",\"type\":\"address\"}],\"name\":\"getHyperbolicAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minimumPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"alpha\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.HyperbolicAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"templateId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.MarketBaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"stakingToken\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmHelper.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getTokensInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserMarketInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"commitments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct MarketHelper.UserMarketInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPoolsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalStaked\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingRewards\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FarmHelper.UserPoolsInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract IMisoMarketFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_launcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmFactory\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract IMisoTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accessControls()\":{\"notice\":\"Responsible for access rights to the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Helper/MISOHelper.sol\":\"MISOHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/MISOAccessControls.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"./MISOAdminAccess.sol\\\";\\n\\n/**\\n * @notice Access Controls\\n * @author Attr: BlockRocket.tech\\n */\\ncontract MISOAccessControls is MISOAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\\n     */\\n    constructor() public {\\n    }\\n\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9476e7c179105c22e86fd05a7acb441cba8566b1ca2d06f25197217c7ee2f2d8\"},\"contracts/Access/MISOAdminAccess.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\n\\ncontract MISOAdminAccess is AccessControl {\\n\\n    /// @dev Whether access is initialised.\\n    bool private initAccess;\\n\\n    /// @notice Events for adding and removing various roles.\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n\\n    /// @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses.\\n    constructor() public {\\n    }\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public  view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdba125b21dec233e2f695768b130c85b5c495407e350bfbf9d6f5d9b0f26ac4a\"},\"contracts/Helper/MISOHelper.sol\":{\"content\":\"pragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Access/MISOAccessControls.sol\\\";\\n\\n//==================\\n//    Uniswap V2       \\n//==================\\n\\ninterface IUniswapFactory {\\n    function getPair(address token0, address token1) external view returns (address);\\n}\\n\\ninterface IUniswapPair {\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner) external view returns (uint);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n}\\n\\n//==================\\n//    Documents       \\n//==================\\n\\ninterface IDocument {\\n    function getDocument(string calldata _name) external view returns (string memory, uint256);\\n    function getDocumentCount() external view returns (uint256);\\n    function getDocumentName(uint256 index) external view returns (string memory);    \\n}\\n\\ncontract DocumentHepler {\\n    struct Document {\\n        string name;\\n        string data;\\n        uint256 lastModified;\\n    }\\n\\n    function getDocuments(address _document) public view returns(Document[] memory) {\\n        IDocument document = IDocument(_document);\\n        uint256 documentCount = document.getDocumentCount();\\n\\n        Document[] memory documents = new Document[](documentCount);\\n\\n        for(uint256 i = 0; i < documentCount; i++) {\\n            string memory documentName = document.getDocumentName(i);\\n            (\\n                documents[i].data,\\n                documents[i].lastModified\\n            ) = document.getDocument(documentName);\\n            documents[i].name = documentName;\\n        }\\n        return documents;\\n    }\\n}\\n\\n\\n//==================\\n//     Tokens\\n//==================\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMisoTokenFactory {\\n    function getTokens() external view returns (address[] memory);\\n    function numberOfTokens() external view returns (uint256);\\n} \\n\\ncontract TokenHelper {\\n    struct TokenInfo {\\n        address addr;\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    function getTokensInfo(address[] memory addresses) public view returns (TokenInfo[] memory)\\n    {\\n        TokenInfo[] memory infos = new TokenInfo[](addresses.length);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            infos[i] = getTokenInfo(addresses[i]);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getTokenInfo(address _address) public view returns (TokenInfo memory) {\\n        TokenInfo memory info;\\n        IERC20 token = IERC20(_address);\\n\\n        info.addr = _address;\\n        info.name = token.name();\\n        info.symbol = token.symbol();\\n        info.decimals = token.decimals();\\n\\n        return info;\\n    }\\n\\n    function allowance(address _token, address _owner, address _spender) public view returns(uint256) {\\n        return IERC20(_token).allowance(_owner, _spender);\\n    }\\n\\n}\\n\\n\\n//==================\\n//      Base\\n//==================\\n\\ncontract BaseHelper {\\n    IMisoMarketFactory public market;\\n    IMisoTokenFactory public tokenFactory;\\n    IMisoFarmFactory public farmFactory;\\n    address public launcher;\\n\\n    /// @notice Responsible for access rights to the contract\\n    MISOAccessControls public accessControls;\\n\\n    function setContracts(\\n        address _tokenFactory,\\n        address _market,\\n        address _launcher,\\n        address _farmFactory\\n    ) public {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOHelper: Sender must be Admin\\\"\\n        );\\n        if (_market != address(0)) {\\n            market = IMisoMarketFactory(_market);\\n        }\\n        if (_tokenFactory != address(0)) {\\n            tokenFactory = IMisoTokenFactory(_tokenFactory);\\n        }\\n        if (_launcher != address(0)) {\\n            launcher = _launcher;\\n        }\\n        if (_farmFactory != address(0)) {\\n            farmFactory = IMisoFarmFactory(_farmFactory);\\n        }\\n    }\\n}\\n\\n\\n//==================\\n//      Farms       \\n//==================\\n\\ninterface IMisoFarmFactory {\\n    function getTemplateId(address _farm) external view returns(uint256);\\n    function numberOfFarms() external view returns(uint256);\\n    function farms(uint256 _farmId) external view returns(address);\\n}\\n\\ninterface IFarm {\\n    function poolInfo(uint256 pid) external view returns(\\n        address lpToken,\\n        uint256 allocPoint,\\n        uint256 lastRewardBlock,\\n        uint256 accRewardsPerShare\\n    );\\n    function rewards() external view returns(address);\\n    function poolLength() external view returns (uint256);\\n    function rewardsPerBlock() external view returns (uint256);\\n    function bonusMultiplier() external view returns (uint256);\\n    function userInfo(uint256 pid, address _user) external view returns (uint256, uint256);\\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256);\\n}\\n\\ncontract FarmHelper is BaseHelper, TokenHelper {\\n    struct FarmInfo {\\n        address addr;\\n        uint256 templateId;\\n        uint256 rewardsPerBlock;\\n        uint256 bonusMultiplier;\\n        TokenInfo rewardToken;\\n        PoolInfo[] pools;\\n    }\\n\\n    struct PoolInfo {\\n        address lpToken;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accRewardsPerShare;\\n        uint256 totalStaked;\\n        TokenInfo stakingToken;\\n    }\\n\\n    struct UserPoolInfo {\\n        address farm;\\n        uint256 pid;\\n        uint256 totalStaked;\\n        uint256 lpBalance;\\n        uint256 lpAllowance;\\n        uint256 rewardDebt;\\n        uint256 pendingRewards;\\n    }\\n\\n    struct UserPoolsInfo {\\n        address farm;\\n        uint256[] pids;\\n        uint256[] totalStaked;\\n        uint256[] pendingRewards;\\n    }\\n\\n    function getPools(address _farm) public view returns(PoolInfo[] memory) {\\n        IFarm farm = IFarm(_farm);\\n        uint256 poolLength = farm.poolLength();\\n        PoolInfo[] memory pools = new PoolInfo[](poolLength);\\n        \\n        for(uint256 i = 0; i < poolLength; i++) {\\n            (\\n                pools[i].lpToken,\\n                pools[i].allocPoint,\\n                pools[i].lastRewardBlock,\\n                pools[i].accRewardsPerShare\\n            ) = farm.poolInfo(i);\\n            pools[i].totalStaked = IERC20(pools[i].lpToken).balanceOf(_farm);\\n            pools[i].stakingToken = getTokenInfo(pools[i].lpToken);\\n        }\\n        return pools;\\n    }\\n\\n\\n    function getFarms() public view returns(FarmInfo[] memory) {\\n        uint256 numberOfFarms = farmFactory.numberOfFarms();\\n\\n        FarmInfo[] memory infos = new FarmInfo[](numberOfFarms);\\n\\n        for (uint256 i = 0; i < numberOfFarms; i++) {\\n            address farmAddr = farmFactory.farms(i);\\n            uint256 templateId = farmFactory.getTemplateId(farmAddr);\\n            IFarm farm = IFarm(farmAddr);\\n\\n            infos[i].addr = address(farm);\\n            infos[i].templateId = templateId;\\n            infos[i].rewardsPerBlock = farm.rewardsPerBlock();\\n            infos[i].bonusMultiplier = farm.bonusMultiplier();\\n            infos[i].rewardToken = getTokenInfo(farm.rewards());\\n            infos[i].pools = getPools(farmAddr);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getFarmDetail(address _farm, address _user) \\n        public\\n        view\\n        returns(FarmInfo memory farmInfo, UserPoolInfo[] memory userInfos) \\n    {\\n        IFarm farm = IFarm(_farm);\\n        farmInfo.addr = _farm;\\n        farmInfo.templateId = farmFactory.getTemplateId(_farm);\\n        farmInfo.rewardsPerBlock = farm.rewardsPerBlock();\\n        farmInfo.bonusMultiplier = farm.bonusMultiplier();\\n        farmInfo.rewardToken = getTokenInfo(farm.rewards());\\n        farmInfo.pools = getPools(_farm);\\n\\n        if(_user != address(0)) {\\n            PoolInfo[] memory pools = farmInfo.pools;\\n            userInfos = new UserPoolInfo[](pools.length);\\n            for(uint i = 0; i < pools.length; i++) {\\n                UserPoolInfo memory userInfo = userInfos[i];\\n                address stakingToken = pools[i].stakingToken.addr;\\n                (userInfo.totalStaked, userInfo.rewardDebt) = farm.userInfo(i, _user);\\n                userInfo.lpBalance = IERC20(stakingToken).balanceOf(_user);\\n                userInfo.lpAllowance = IERC20(stakingToken).allowance(_user, _farm);\\n                userInfo.pendingRewards = farm.pendingRewards(i, _user);\\n                (userInfo.totalStaked,) = farm.userInfo(i, _user);\\n                userInfo.farm = _farm;\\n                userInfo.pid = i;\\n                userInfos[i] = userInfo;\\n            }\\n        }\\n        return (farmInfo, userInfos);\\n    }\\n\\n    function getUserPoolsInfos(address _user) public view returns(UserPoolsInfo[] memory) {\\n        uint256 numberOfFarms = farmFactory.numberOfFarms();\\n\\n        UserPoolsInfo[] memory infos = new UserPoolsInfo[](numberOfFarms);\\n\\n        for (uint256 i = 0; i < numberOfFarms; i++) {\\n            address farmAddr = farmFactory.farms(i);\\n            IFarm farm = IFarm(farmAddr);\\n            uint256 poolLength = farm.poolLength();\\n            uint256[] memory totalStaked = new uint256[](poolLength);\\n            uint256[] memory pendingRewards = new uint256[](poolLength);\\n            uint256[] memory pids = new uint256[](poolLength);\\n\\n            for(uint256 j = 0; j < poolLength; j++) {\\n                (address stakingToken,,,) = farm.poolInfo(j);\\n                (totalStaked[j],) = farm.userInfo(j, _user);\\n                pendingRewards[j] = farm.pendingRewards(j, _user);\\n                pids[j] = j;\\n            }\\n            infos[i].totalStaked = totalStaked;\\n            infos[i].pendingRewards = pendingRewards;\\n            infos[i].pids = pids;\\n            infos[i].farm = farmAddr;\\n        }\\n        return infos;\\n    }\\n}\\n\\n//==================\\n//     Markets       \\n//==================\\n\\ninterface IBaseAuction {\\n    function getBaseInformation() external view returns (\\n            address auctionToken,\\n            uint64 startTime,\\n            uint64 endTime,\\n            bool finalized\\n        );\\n}\\n\\ninterface IMisoMarketFactory {\\n    function getMarketTemplateId(address _auction) external view returns(uint64);\\n    function getMarkets() external view returns(address[] memory);\\n}\\n\\ninterface IMisoMarket {\\n    function paymentCurrency() external view returns (address) ;\\n    function auctionToken() external view returns (address) ;\\n    function marketPrice() external view returns (uint128, uint128);\\n    function marketInfo()\\n        external\\n        view\\n        returns (\\n        uint64 startTime,\\n        uint64 endTime,\\n        uint128 totalTokens\\n        );\\n    function auctionSuccessful() external view returns (bool);\\n    function commitments(address user) external view returns (uint256);\\n    function claimed(address user) external view returns (uint256);\\n    function tokensClaimable(address user) external view returns (uint256);\\n    function hasAdminRole(address user) external view returns (bool);\\n}\\n\\ninterface ICrowdsale is IMisoMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ninterface IDutchAuction is IMisoMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n    // function totalTokensCommitted() external view returns (uint256);\\n    // function clearingPrice() external view returns (uint256);\\n}\\n\\ninterface IBatchAuction is IMisoMarket {\\n    function marketStatus() external view returns(\\n        uint256 commitmentsTotal,\\n        uint256 minimumCommitmentAmount,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ninterface IHyperbolicAuction is IMisoMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ncontract MarketHelper is BaseHelper, TokenHelper, DocumentHepler {\\n\\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    struct CrowdsaleInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint128 commitmentsTotal;\\n        uint128 totalTokens;\\n        uint128 rate;\\n        uint128 goal;\\n        uint64 startTime;\\n        uint64 endTime;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct DutchAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint128 startPrice;\\n        uint128 minimumPrice;\\n        uint128 commitmentsTotal;\\n        // uint256 totalTokensCommitted;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct BatchAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint256 commitmentsTotal;\\n        uint256 minimumCommitmentAmount;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct HyperbolicAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint128 minimumPrice;\\n        uint128 alpha;\\n        uint128 commitmentsTotal;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct MarketBaseInfo {\\n        address addr;\\n        uint64 templateId;\\n        uint64 startTime;\\n        uint64 endTime;\\n        bool finalized;\\n        TokenInfo tokenInfo;\\n    }\\n\\n    struct PLInfo {\\n        TokenInfo token0;\\n        TokenInfo token1;\\n        address pairToken;\\n        address operator;\\n        uint256 locktime;\\n        uint256 unlock;\\n        uint256 deadline;\\n        uint256 launchwindow;\\n        uint256 expiry;\\n        uint256 liquidityAdded;\\n        uint256 launched;\\n    }\\n\\n    struct UserMarketInfo {\\n        uint256 commitments;\\n        uint256 tokensClaimable;\\n        uint256 claimed;\\n        bool isAdmin;\\n    }\\n\\n    function getMarkets() public view returns (MarketBaseInfo[] memory) {\\n        address[] memory markets = market.getMarkets();\\n        MarketBaseInfo[] memory infos = new MarketBaseInfo[](markets.length);\\n\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            \\n            uint64 templateId = market.getMarketTemplateId(markets[i]);\\n            address auctionToken;\\n            uint64 startTime;\\n            uint64 endTime;\\n            bool finalized;\\n            (auctionToken, startTime, endTime, finalized) = IBaseAuction(markets[i])\\n                .getBaseInformation();\\n            TokenInfo memory tokenInfo = getTokenInfo(auctionToken);\\n\\n            infos[i].addr = markets[i];\\n            infos[i].templateId = templateId;\\n            infos[i].startTime = startTime;\\n            infos[i].endTime = endTime;\\n            infos[i].finalized = finalized;\\n            infos[i].tokenInfo = tokenInfo;\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getCrowdsaleInfo(address _crowdsale) public view returns (CrowdsaleInfo memory) {\\n        ICrowdsale crowdsale = ICrowdsale(_crowdsale);\\n        CrowdsaleInfo memory info;\\n\\n        info.addr = address(crowdsale);\\n        info.paymentCurrency = crowdsale.paymentCurrency();\\n        (info.commitmentsTotal, info.finalized, info.usePointList) = crowdsale.marketStatus();\\n        (info.startTime, info.endTime, info.totalTokens) = crowdsale.marketInfo();\\n        (info.rate, info.goal) = crowdsale.marketPrice();\\n        (info.auctionSuccessful) = crowdsale.auctionSuccessful();\\n        info.tokenInfo = getTokenInfo(crowdsale.auctionToken());\\n\\n        address paymentCurrency = crowdsale.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n\\n        info.documents = getDocuments(_crowdsale);\\n\\n        return info;\\n    }\\n\\n    function getDutchAuctionInfo(address payable _dutchAuction) public view returns (DutchAuctionInfo memory)\\n    {\\n        IDutchAuction dutchAuction = IDutchAuction(_dutchAuction);\\n        DutchAuctionInfo memory info;\\n\\n        info.addr = address(dutchAuction);\\n        // info.paymentCurrency = dutchAuction.paymentCurrency();\\n        (info.startTime, info.endTime, info.totalTokens) = dutchAuction.marketInfo();\\n        (info.startPrice, info.minimumPrice) = dutchAuction.marketPrice();\\n        (info.auctionSuccessful) = dutchAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.finalized,\\n            info.usePointList\\n        ) = dutchAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(dutchAuction.auctionToken());\\n\\n        address paymentCurrency = dutchAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_dutchAuction);\\n\\n        return info;\\n    }\\n\\n    function getBatchAuctionInfo(address payable _batchAuction) public view returns (BatchAuctionInfo memory) \\n    {\\n        IBatchAuction batchAuction = IBatchAuction(_batchAuction);\\n        BatchAuctionInfo memory info;\\n        \\n        info.addr = address(batchAuction);\\n        info.paymentCurrency = batchAuction.paymentCurrency();\\n        (info.startTime, info.endTime, info.totalTokens) = batchAuction.marketInfo();\\n        (info.auctionSuccessful) = batchAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.minimumCommitmentAmount,\\n            info.finalized,\\n            info.usePointList\\n        ) = batchAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(batchAuction.auctionToken());\\n        address paymentCurrency = batchAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_batchAuction);\\n\\n        return info;\\n    }\\n\\n    function getHyperbolicAuctionInfo(address payable _hyperbolicAuction) public view returns (HyperbolicAuctionInfo memory)\\n    {\\n        IHyperbolicAuction hyperbolicAuction = IHyperbolicAuction(_hyperbolicAuction);\\n        HyperbolicAuctionInfo memory info;\\n\\n        info.addr = address(hyperbolicAuction);\\n        info.paymentCurrency = hyperbolicAuction.paymentCurrency();\\n        (info.startTime, info.endTime, info.totalTokens) = hyperbolicAuction.marketInfo();\\n        (info.minimumPrice, info.alpha) = hyperbolicAuction.marketPrice();\\n        (info.auctionSuccessful) = hyperbolicAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.finalized,\\n            info.usePointList\\n        ) = hyperbolicAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(hyperbolicAuction.auctionToken());\\n        \\n        address paymentCurrency = hyperbolicAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_hyperbolicAuction);\\n\\n        return info;\\n    }\\n\\n    function getUserMarketInfo(address _action, address _user) public view returns(UserMarketInfo memory userInfo) {\\n        IMisoMarket market = IMisoMarket(_action);\\n        userInfo.commitments = market.commitments(_user);\\n        userInfo.tokensClaimable = market.tokensClaimable(_user);\\n        userInfo.claimed = market.claimed(_user);\\n        userInfo.isAdmin = market.hasAdminRole(_user);\\n    }\\n\\n    function _getETHInfo() private pure returns(TokenInfo memory token) {\\n            token.addr = ETH_ADDRESS;\\n            token.name = \\\"ETHEREUM\\\";\\n            token.symbol = \\\"ETH\\\";\\n            token.decimals = 18;\\n    }\\n\\n}\\n\\ncontract MISOHelper is MarketHelper, FarmHelper {\\n\\n    constructor(\\n        address _accessControls,\\n        address _tokenFactory,\\n        address _market,\\n        address _launcher,\\n        address _farmFactory\\n    ) public { \\n        require(_accessControls != address(0));\\n        accessControls = MISOAccessControls(_accessControls);\\n        tokenFactory = IMisoTokenFactory(_tokenFactory);\\n        market = IMisoMarketFactory(_market);\\n        launcher = _launcher;\\n        farmFactory = IMisoFarmFactory(_farmFactory);\\n    }\\n\\n    function getTokens() public view returns(TokenInfo[] memory) {\\n        address[] memory tokens = tokenFactory.getTokens();\\n        TokenInfo[] memory infos = getTokensInfo(tokens);\\n\\n        infos = getTokensInfo(tokens);\\n\\n        return infos;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x344dfe4372f16d5da711a3d986ae0a8a801a5692e3a9fc1448f967ba02ffeaa1\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33279c22849e760b03180e23a3686d97b554c680f9874c8658a23863aee6e8c3\"},\"contracts/OpenZeppelin/utils/Address.sol\":{\"content\":\"\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39f82f1573985812031896891cb27ea1bad51aeb9e47efbf3b6798b5647f3e5c\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"\\n\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x408ed1e8d180f17597080e993fea24a26ec262dd56ee20dfbdcf511d261387d4\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7a5437ee09401a3d1ec98f126470362f9848afbf521510d6bfae61d7b42a8fb7\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accessControls()": {
        "notice": "Responsible for access rights to the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8704,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "market",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMisoMarketFactory)9518"
      },
      {
        "astId": 8706,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMisoTokenFactory)8577"
      },
      {
        "astId": 8708,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "farmFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMisoFarmFactory)8809"
      },
      {
        "astId": 8710,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "launcher",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8713,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "accessControls",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(MISOAccessControls)563"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IMisoFarmFactory)8809": {
        "encoding": "inplace",
        "label": "contract IMisoFarmFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMisoMarketFactory)9518": {
        "encoding": "inplace",
        "label": "contract IMisoMarketFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMisoTokenFactory)8577": {
        "encoding": "inplace",
        "label": "contract IMisoTokenFactory",
        "numberOfBytes": "20"
      },
      "t_contract(MISOAccessControls)563": {
        "encoding": "inplace",
        "label": "contract MISOAccessControls",
        "numberOfBytes": "20"
      }
    }
  }
}