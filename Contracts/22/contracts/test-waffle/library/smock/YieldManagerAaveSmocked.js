// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");

function mockATokenToReturn(_r, _param0) {
  ((_r.smocked.aToken.will.return.with([_param0])));
  
}

function aTokenCalls(_r) {
  var array = _r.smocked.aToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockAaveIncentivesControllerToReturn(_r, _param0) {
  ((_r.smocked.aaveIncentivesController.will.return.with([_param0])));
  
}

function aaveIncentivesControllerCalls(_r) {
  var array = _r.smocked.aaveIncentivesController.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockAmountReservedInCaseOfInsufficientAaveLiquidityToReturn(_r, _param0) {
  ((_r.smocked.amountReservedInCaseOfInsufficientAaveLiquidity.will.return.with([_param0])));
  
}

function amountReservedInCaseOfInsufficientAaveLiquidityCalls(_r) {
  var array = _r.smocked.amountReservedInCaseOfInsufficientAaveLiquidity.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockClaimAaveRewardsToTreasuryToReturn(_r) {
  ((_r.smocked.claimAaveRewardsToTreasury.will.return()));
  
}

function claimAaveRewardsToTreasuryCalls(_r) {
  var array = _r.smocked.claimAaveRewardsToTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockDepositPaymentTokenToReturn(_r) {
  ((_r.smocked.depositPaymentToken.will.return()));
  
}

function depositPaymentTokenCalls(_r) {
  var array = _r.smocked.depositPaymentToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function mockDistributeYieldForTreasuryAndReturnMarketAllocationToReturn(_r, _param0) {
  ((_r.smocked.distributeYieldForTreasuryAndReturnMarketAllocation.will.return.with([_param0])));
  
}

function distributeYieldForTreasuryAndReturnMarketAllocationCalls(_r) {
  var array = _r.smocked.distributeYieldForTreasuryAndReturnMarketAllocation.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        totalValueRealizedForMarket: param[0],
                        treasuryYieldPercent_e18: param[1]
                      };
              }));
}

function mockLendingPoolToReturn(_r, _param0) {
  ((_r.smocked.lendingPool.will.return.with([_param0])));
  
}

function lendingPoolCalls(_r) {
  var array = _r.smocked.lendingPool.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockLongShortToReturn(_r, _param0) {
  ((_r.smocked.longShort.will.return.with([_param0])));
  
}

function longShortCalls(_r) {
  var array = _r.smocked.longShort.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockPaymentTokenToReturn(_r, _param0) {
  ((_r.smocked.paymentToken.will.return.with([_param0])));
  
}

function paymentTokenCalls(_r) {
  var array = _r.smocked.paymentToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockRemovePaymentTokenFromMarketToReturn(_r) {
  ((_r.smocked.removePaymentTokenFromMarket.will.return()));
  
}

function removePaymentTokenFromMarketCalls(_r) {
  var array = _r.smocked.removePaymentTokenFromMarket.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function mockTotalReservedForTreasuryToReturn(_r, _param0) {
  ((_r.smocked.totalReservedForTreasury.will.return.with([_param0])));
  
}

function totalReservedForTreasuryCalls(_r) {
  var array = _r.smocked.totalReservedForTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTransferPaymentTokensToUserToReturn(_r) {
  ((_r.smocked.transferPaymentTokensToUser.will.return()));
  
}

function transferPaymentTokensToUserCalls(_r) {
  var array = _r.smocked.transferPaymentTokensToUser.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        amount: param[1]
                      };
              }));
}

function mockTreasuryToReturn(_r, _param0) {
  ((_r.smocked.treasury.will.return.with([_param0])));
  
}

function treasuryCalls(_r) {
  var array = _r.smocked.treasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockWithdrawTreasuryFundsToReturn(_r) {
  ((_r.smocked.withdrawTreasuryFunds.will.return()));
  
}

function withdrawTreasuryFundsCalls(_r) {
  var array = _r.smocked.withdrawTreasuryFunds.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

var uninitializedValue;

exports.uninitializedValue = uninitializedValue;
exports.mockATokenToReturn = mockATokenToReturn;
exports.aTokenCalls = aTokenCalls;
exports.mockAaveIncentivesControllerToReturn = mockAaveIncentivesControllerToReturn;
exports.aaveIncentivesControllerCalls = aaveIncentivesControllerCalls;
exports.mockAmountReservedInCaseOfInsufficientAaveLiquidityToReturn = mockAmountReservedInCaseOfInsufficientAaveLiquidityToReturn;
exports.amountReservedInCaseOfInsufficientAaveLiquidityCalls = amountReservedInCaseOfInsufficientAaveLiquidityCalls;
exports.mockClaimAaveRewardsToTreasuryToReturn = mockClaimAaveRewardsToTreasuryToReturn;
exports.claimAaveRewardsToTreasuryCalls = claimAaveRewardsToTreasuryCalls;
exports.mockDepositPaymentTokenToReturn = mockDepositPaymentTokenToReturn;
exports.depositPaymentTokenCalls = depositPaymentTokenCalls;
exports.mockDistributeYieldForTreasuryAndReturnMarketAllocationToReturn = mockDistributeYieldForTreasuryAndReturnMarketAllocationToReturn;
exports.distributeYieldForTreasuryAndReturnMarketAllocationCalls = distributeYieldForTreasuryAndReturnMarketAllocationCalls;
exports.mockLendingPoolToReturn = mockLendingPoolToReturn;
exports.lendingPoolCalls = lendingPoolCalls;
exports.mockLongShortToReturn = mockLongShortToReturn;
exports.longShortCalls = longShortCalls;
exports.mockPaymentTokenToReturn = mockPaymentTokenToReturn;
exports.paymentTokenCalls = paymentTokenCalls;
exports.mockRemovePaymentTokenFromMarketToReturn = mockRemovePaymentTokenFromMarketToReturn;
exports.removePaymentTokenFromMarketCalls = removePaymentTokenFromMarketCalls;
exports.mockTotalReservedForTreasuryToReturn = mockTotalReservedForTreasuryToReturn;
exports.totalReservedForTreasuryCalls = totalReservedForTreasuryCalls;
exports.mockTransferPaymentTokensToUserToReturn = mockTransferPaymentTokensToUserToReturn;
exports.transferPaymentTokensToUserCalls = transferPaymentTokensToUserCalls;
exports.mockTreasuryToReturn = mockTreasuryToReturn;
exports.treasuryCalls = treasuryCalls;
exports.mockWithdrawTreasuryFundsToReturn = mockWithdrawTreasuryFundsToReturn;
exports.withdrawTreasuryFundsCalls = withdrawTreasuryFundsCalls;
/* No side effect */
