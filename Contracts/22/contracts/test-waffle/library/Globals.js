// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Config = require("./Config.js");
var LetOps = require("./LetOps.js");
var CONSTANTS = require("../CONSTANTS.js");

function before_once$p(fn) {
  var ranRef = {
    contents: false
  };
  beforeEach(function () {
        if (ranRef.contents) {
          return Promise.resolve(undefined);
        } else {
          return LetOps.Await.let_(Curry._1(fn, undefined), (function (param) {
                        ranRef.contents = true;
                        
                      }));
        }
      });
  
}

function add(prim0, prim1) {
  return prim0.add(prim1);
}

function sub(prim0, prim1) {
  return prim0.sub(prim1);
}

function pow(prim0, prim1) {
  return prim0.pow(prim1);
}

function bnFromString(prim) {
  return ethers.BigNumber.from(prim);
}

function bnFromInt(prim) {
  return ethers.BigNumber.from(prim);
}

function mul(prim0, prim1) {
  return prim0.mul(prim1);
}

function div(prim0, prim1) {
  return prim0.div(prim1);
}

function bnToString(prim) {
  return prim.toString();
}

function bnToInt(prim) {
  return prim.toNumber();
}

function bnGt(prim0, prim1) {
  return prim0.gt(prim1);
}

function bnGte(prim0, prim1) {
  return prim0.gte(prim1);
}

function bnLt(prim0, prim1) {
  return prim0.lt(prim1);
}

function bnMin(a, b) {
  if (a.gt(b)) {
    return b;
  } else {
    return a;
  }
}

var describeIntegration = Config.dontRunIntegrationTests ? (function (prim0, prim1) {
      describe.skip(prim0, (function () {
              return Curry._1(prim1, undefined);
            }));
      
    }) : (function (prim0, prim1) {
      describe(prim0, (function () {
              return Curry._1(prim1, undefined);
            }));
      
    });

var describeUnit = Config.dontRunUnitTests ? (function (prim0, prim1) {
      describe.skip(prim0, (function () {
              return Curry._1(prim1, undefined);
            }));
      
    }) : (function (prim0, prim1) {
      describe(prim0, (function () {
              return Curry._1(prim1, undefined);
            }));
      
    });

var describeBoth = Config.isCI ? (
    Config.dontRunIntegrationTests ? (function (prim0, prim1) {
          describe.skip(prim0, (function () {
                  return Curry._1(prim1, undefined);
                }));
          
        }) : (function (prim0, prim1) {
          describe(prim0, (function () {
                  return Curry._1(prim1, undefined);
                }));
          
        })
  ) : (function (prim0, prim1) {
      describe(prim0, (function () {
              return Curry._1(prim1, undefined);
            }));
      
    });

var zeroBn = CONSTANTS.zeroBn;

var twoBn = CONSTANTS.twoBn;

var oneBn = CONSTANTS.oneBn;

var tenToThe18 = CONSTANTS.tenToThe18;

exports.before_once$p = before_once$p;
exports.add = add;
exports.sub = sub;
exports.pow = pow;
exports.bnFromString = bnFromString;
exports.bnFromInt = bnFromInt;
exports.mul = mul;
exports.div = div;
exports.bnToString = bnToString;
exports.bnToInt = bnToInt;
exports.bnGt = bnGt;
exports.bnGte = bnGte;
exports.bnLt = bnLt;
exports.bnMin = bnMin;
exports.zeroBn = zeroBn;
exports.twoBn = twoBn;
exports.oneBn = oneBn;
exports.tenToThe18 = tenToThe18;
exports.describeIntegration = describeIntegration;
exports.describeUnit = describeUnit;
exports.describeBoth = describeBoth;
/* Config Not a pure module */
