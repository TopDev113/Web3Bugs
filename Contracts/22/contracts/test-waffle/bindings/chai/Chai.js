// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");

const { expect } = require("chai");
;

var bnEqual = ((message, number1, number2) => expect(number1, message).to.equal(number2));

var intEqual = ((message, number1, number2) => expect(number1, message).to.equal(number2));

function recordEqualFlatLabeled(expected, actual) {
  var a = ((expected, actual) => {
    for(const key of Object.keys(actual)){
      expect(actual[key]).to.equal(expected[key])
    }
  });
  return a(expected, actual);
}

function recordEqualFlat(expected, actual) {
  var a = ((expected, actual) => {
    for(const key of Object.keys(actual)){
      expect(actual[key]).to.equal(expected[key])
    }
  });
  return a(expected, actual);
}

function recordArrayEqualFlat(expected, actual) {
  intEqual("cannot compare arrays of integers with different lengths", expected.length, actual.length);
  return Belt_Array.forEachWithIndex(expected, (function (i, expectedResult) {
                return recordEqualFlat(expectedResult, actual[i]);
              }));
}

function recordEqualDeep(messageOpt, expected, actual) {
  var message = messageOpt !== undefined ? messageOpt : "";
  var a = ((message, expected, actual) => {
    for(const key of Object.keys(actual)){
      expect(actual[key], message + ` at key "${key}"`).to.deep.equal(expected[key])
    }
  });
  return a(message, expected, actual);
}

function recordArrayDeepEqualFlat(messageOpt, expected, actual) {
  var message = messageOpt !== undefined ? messageOpt : "record array equality check";
  intEqual(undefined, expected.length, actual.length);
  return Belt_Array.forEachWithIndex(expected, (function (i, expectedResult) {
                return recordEqualDeep(message + ": at index #" + String(i), expectedResult, actual[i]);
              }));
}

var addressEqual = ((message, address1, address2) => expect(address1, message).to.equal(address2));

var boolEqual = ((message, number1, number2) => expect(number1, message).to.equal(number2));

var bnWithin = ((number1, min, max) => expect(number1).to.be.within(min, max));

var bnCloseTo = ((message, distance, number1, number2) => expect(number1, message).to.be.closeTo(number2, distance));

var callEmitEvents = ((call, contract, eventName) => expect(call).to.emit(contract, eventName));

var expectToNotEmit = (eventCheck => {  let shouldRevert = true;
  return (eventCheck
    .catch(() =>
      shouldRevert = false
    ))
    .then(() => { if (shouldRevert) { require("chai").assert.fail('An event was emitted when it should not have been') } }
    );
});

var expectRevertNoReason = ((transaction) => expect(transaction).to.be.reverted);

var expectRevert = ((transaction, reason) => expect(transaction).to.be.revertedWith(reason));

var changeBalance = ((transaction, token, to, amount) => expect(transaction).to.changeTokenBalance(token, to, amount));

var expectToBeAddress = ((address) => expect(address).to.be.properAddress);

var expectToBePrivateKey = ((privateKey) => expect(privateKey).to.be.properAddress);

var expectToBeHex = ((hexStr, hexLength) => expect(hexStr).to.be.properHex(hexLength));

var expectHexEqual = ((hex1, hex2) => expect(hex1).to.be.hexEqual(hex2));

var expectTrue = ((value) => expect(value).to.be.true);

exports.bnEqual = bnEqual;
exports.intEqual = intEqual;
exports.recordEqualFlatLabeled = recordEqualFlatLabeled;
exports.recordEqualFlat = recordEqualFlat;
exports.recordArrayEqualFlat = recordArrayEqualFlat;
exports.recordEqualDeep = recordEqualDeep;
exports.recordArrayDeepEqualFlat = recordArrayDeepEqualFlat;
exports.addressEqual = addressEqual;
exports.boolEqual = boolEqual;
exports.bnWithin = bnWithin;
exports.bnCloseTo = bnCloseTo;
exports.callEmitEvents = callEmitEvents;
exports.expectToNotEmit = expectToNotEmit;
exports.expectRevertNoReason = expectRevertNoReason;
exports.expectRevert = expectRevert;
exports.changeBalance = changeBalance;
exports.expectToBeAddress = expectToBeAddress;
exports.expectToBePrivateKey = expectToBePrivateKey;
exports.expectToBeHex = expectToBeHex;
exports.expectHexEqual = expectHexEqual;
exports.expectTrue = expectTrue;
/*  Not a pure module */
