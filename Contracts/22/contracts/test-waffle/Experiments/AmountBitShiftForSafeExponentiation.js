// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Config = require("../library/Config.js");
var LetOps = require("../library/LetOps.js");
var Globals = require("../library/Globals.js");
var Helpers = require("../library/Helpers.js");

var describeSkippable = Config.runValueSimulations ? (function (prim0, prim1) {
      describe(prim0, (function () {
              return Curry._1(prim1, undefined);
            }));
      
    }) : (function (prim0, prim1) {
      describe.skip(prim0, (function () {
              return Curry._1(prim1, undefined);
            }));
      
    });

describeSkippable("Float System", (function (param) {
        var contracts = {
          contents: undefined
        };
        var accounts = {
          contents: undefined
        };
        before(function () {
              return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                            accounts.contents = loadedAccounts;
                            
                          }));
            });
        beforeEach(function () {
              return LetOps.Await.let_(Helpers.initialize(accounts.contents[0], true), (function (deployedContracts) {
                            contracts.contents = deployedContracts;
                            
                          }));
            });
        describe("testing exponents", (function () {
                it("get the safe min bit shifting required for a market with liquidity of 10 Trillion USD", (function () {
                        var match = contracts.contents;
                        var staker = match.staker;
                        var theoreticalMaximumMarketLiquidity = Globals.bnFromString("10000000000000000000000000000000");
                        return LetOps.Await.let_(staker.getRequiredAmountOfBitShiftForSafeExponentiationPerfect(theoreticalMaximumMarketLiquidity, Globals.bnFromInt(2)), (function (maxForExp2) {
                                      return LetOps.Await.let_(staker.getRequiredAmountOfBitShiftForSafeExponentiationPerfect(theoreticalMaximumMarketLiquidity, Globals.bnFromInt(3)), (function (maxForExp3) {
                                                    return LetOps.Await.let_(staker.getRequiredAmountOfBitShiftForSafeExponentiationPerfect(theoreticalMaximumMarketLiquidity, Globals.bnFromInt(4)), (function (maxForExp4) {
                                                                  return LetOps.Await.let_(staker.getRequiredAmountOfBitShiftForSafeExponentiationPerfect(theoreticalMaximumMarketLiquidity, Globals.bnFromInt(5)), (function (maxForExp5) {
                                                                                return LetOps.Await.let_(staker.getRequiredAmountOfBitShiftForSafeExponentiationPerfect(theoreticalMaximumMarketLiquidity, Globals.bnFromInt(6)), (function (maxForExp6) {
                                                                                              console.log({
                                                                                                    maxForExp2: Globals.bnToString(maxForExp2),
                                                                                                    maxForExp3: Globals.bnToString(maxForExp3),
                                                                                                    maxForExp4: Globals.bnToString(maxForExp4),
                                                                                                    maxForExp5: Globals.bnToString(maxForExp5),
                                                                                                    maxForExp6: Globals.bnToString(maxForExp6)
                                                                                                  });
                                                                                              
                                                                                            }));
                                                                              }));
                                                                }));
                                                  }));
                                    }));
                      }));
                
              }));
        
      }));

exports.describeSkippable = describeSkippable;
/*  Not a pure module */
