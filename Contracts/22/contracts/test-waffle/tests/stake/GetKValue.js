// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var StakerHelpers = require("./StakerHelpers.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function test(contracts, accounts) {
  var prom = {
    contents: undefined
  };
  var multiplier = Helpers.randomInteger(undefined).add(CONSTANTS.tenToThe18);
  describe("getKValue", (function () {
          var diffRef = {
            contents: CONSTANTS.zeroBn
          };
          var periodRef = {
            contents: CONSTANTS.zeroBn
          };
          var setup = function (multiplier, periodShouldBeOver) {
            return LetOps.AwaitThen.let_(StakerHelpers.deployAndSetupStakerToUnitTest("getKValue", contracts, accounts), (function (param) {
                          return LetOps.AwaitThen.let_(Helpers.getRandomTimestampInPast(undefined), (function (pastTimestamp) {
                                        return LetOps.AwaitThen.let_(Helpers.getBlock(undefined), (function (param) {
                                                      diffRef.contents = ethers.BigNumber.from(param.timestamp + 1 | 0).sub(pastTimestamp);
                                                      var diff = diffRef.contents;
                                                      var period = periodShouldBeOver ? diff.sub(ethers.BigNumber.from(20)) : diff.add(ethers.BigNumber.from(20));
                                                      periodRef.contents = period;
                                                      return LetOps.Await.let_(contracts.contents.staker.setGetKValueParams(2, pastTimestamp), (function (param) {
                                                                    StakerSmocked.InternalMock.mock_getMarketLaunchIncentiveParametersToReturn(period, multiplier);
                                                                    prom.contents = contracts.contents.staker._getKValueExposed(2);
                                                                    
                                                                  }));
                                                    }));
                                      }));
                        }));
          };
          it("returns  kInitialMultiplier -\n                (((kInitialMultiplier - 1e18) *\n                    (block.timestamp - initialTimestamp)) / kPeriod) if kPeriod isn't over", (function () {
                  return LetOps.AwaitThen.let_(setup(multiplier, false), (function (param) {
                                return LetOps.Await.let_(prom.contents, (function (returnVal) {
                                              return Chai.bnEqual(undefined, returnVal, multiplier.sub(diffRef.contents.mul(multiplier.sub(CONSTANTS.tenToThe18)).div(periodRef.contents)));
                                            }));
                              }));
                }));
          it("reverts if kInitialMultiplier less than 1e18", (function () {
                  return LetOps.Await.let_(setup(CONSTANTS.oneBn, true), (function (param) {
                                return Chai.expectRevertNoReason(prom.contents);
                              }));
                }));
          describe("", (function () {
                  Globals.before_once$p(function (param) {
                        return setup(multiplier, true);
                      });
                  it("returns 1e18 if more seconds have passed than the kPeriod since the staking fund for the market was added", (function () {
                          return LetOps.Await.let_(prom.contents, (function (returnVal) {
                                        return Chai.bnEqual(undefined, returnVal, CONSTANTS.tenToThe18);
                                      }));
                        }));
                  it("calls getMarketLaunchIncentiveParameters with correct arguments", (function () {
                          return Chai.recordEqualFlat(Belt_Array.getExn(StakerSmocked.InternalMock._getMarketLaunchIncentiveParametersCalls(undefined), 0), {
                                      marketIndex: 2
                                    });
                        }));
                  
                }));
          
        }));
  
}

exports.test = test;
/* Chai Not a pure module */
