// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var Curry = require("rescript/lib/js/curry.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var Js_math = require("rescript/lib/js/js_math.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");

function randomLengthIntegerArr(minLength, maxLength) {
  return Belt_Array.makeBy(Js_math.random_int(minLength, maxLength + 1 | 0), (function (param) {
                return Helpers.randomJsInteger(undefined);
              }));
}

function testUnit(contracts, accounts) {
  var marketIndices = randomLengthIntegerArr(0, 100);
  Globals.before_once$p(function (param) {
        var match = contracts.contents;
        return LetOps.Await.let_(match.staker.setLongShort(match.longShortSmocked.address), (function (param) {
                      
                    }));
      });
  var commonTestsBetween_claimFloatCustomANDclaimFloatCustomFor = function (getUser) {
    it("calls LongShort.updateSystemStateMulti for the markets", (function () {
            var updateSystemStateMultiCalls = LongShortSmocked.updateSystemStateMultiCalls(contracts.contents.longShortSmocked);
            return Chai.recordArrayDeepEqualFlat(undefined, updateSystemStateMultiCalls, [{
                          marketIndexes: marketIndices
                        }]);
          }));
    it("calls _mintAccumulatedFloatMulti with the correct arguments", (function () {
            var mintAccumulatedFloatMultiCalls = StakerSmocked.InternalMock._mintAccumulatedFloatMultiCalls(undefined);
            return Chai.recordArrayDeepEqualFlat(undefined, mintAccumulatedFloatMultiCalls, [{
                          marketIndexes: marketIndices,
                          user: Curry._1(getUser, undefined)
                        }]);
          }));
    
  };
  describe("claimFloatCustom", (function () {
          var getUser = function (param) {
            return accounts.contents[0].address;
          };
          Globals.before_once$p(function (param) {
                var match = contracts.contents;
                var staker = match.staker;
                return LetOps.Await.let_(StakerSmocked.InternalMock.setupFunctionForUnitTesting(staker, "claimFloatCustom"), (function (param) {
                              return staker.claimFloatCustom(marketIndices);
                            }));
              });
          return commonTestsBetween_claimFloatCustomANDclaimFloatCustomFor(getUser);
        }));
  describe("claimFloatCustomFor", (function () {
          var user = Helpers.randomAddress(undefined);
          Globals.before_once$p(function (param) {
                var match = contracts.contents;
                var staker = match.staker;
                return LetOps.Await.let_(StakerSmocked.InternalMock.setupFunctionForUnitTesting(staker, "claimFloatCustomFor"), (function (param) {
                              return staker.claimFloatCustomFor(marketIndices, user);
                            }));
              });
          return commonTestsBetween_claimFloatCustomANDclaimFloatCustomFor(function (param) {
                      return user;
                    });
        }));
  
}

exports.randomLengthIntegerArr = randomLengthIntegerArr;
exports.testUnit = testUnit;
/* Chai Not a pure module */
