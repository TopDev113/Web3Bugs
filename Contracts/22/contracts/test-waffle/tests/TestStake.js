// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../bindings/chai/Chai.js");
var Stake = require("./stake/Stake.js");
var LetOps = require("../library/LetOps.js");
var Globals = require("../library/Globals.js");
var Helpers = require("../library/Helpers.js");
var Withdraw = require("./stake/Withdraw.js");
var CONSTANTS = require("../CONSTANTS.js");
var GetKValue = require("./stake/GetKValue.js");
var MintFloat = require("./stake/MintFloat.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var ClaimFloat = require("./stake/ClaimFloat.js");
var ShiftTokens = require("./stake/ShiftTokens.js");
var HelperActions = require("../library/HelperActions.js");
var StakeFromUser = require("./stake/StakeFromUser.js");
var ClaimFloatCustom = require("./stake/ClaimFloatCustom.js");
var SetRewardObjects = require("./stake/SetRewardObjects.js");
var AddNewStakingFund = require("./stake/AddNewStakingFund.js");
var CalculateTimeDelta = require("./stake/CalculateTimeDelta.js");
var MintAccumulatedFloat = require("./stake/MintAccumulatedFloat.js");
var StakerAdminFunctions = require("./stake/StakerAdminFunctions.js");
var CalculateFloatPerSecond = require("./stake/CalculateFloatPerSecond.js");
var CalculateAccumulatedFloat = require("./stake/CalculateAccumulatedFloat.js");
var AddNewStateForFloatRewards = require("./stake/AddNewStateForFloatRewards.js");
var CalculateNewCumulativeValue = require("./stake/CalculateNewCumulativeValue.js");
var CalculateAccumulatedFloatInRange = require("./stake/CalculateAccumulatedFloatInRange.js");
var GetMarketLaunchIncentiveParameters = require("./stake/GetMarketLaunchIncentiveParameters.js");
var ChangeMarketLaunchIncentiveParameters = require("./stake/ChangeMarketLaunchIncentiveParameters.js");

describe("Float System", (function () {
        Globals.describeIntegration("Staking", (function (param) {
                var contracts = {
                  contents: undefined
                };
                var accounts = {
                  contents: undefined
                };
                before(function () {
                      return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                    accounts.contents = loadedAccounts;
                                    
                                  }));
                    });
                beforeEach(function () {
                      return LetOps.Await.let_(Helpers.initialize(accounts.contents[0], false), (function (deployedContracts) {
                                    contracts.contents = deployedContracts;
                                    
                                  }));
                    });
                it("should correctly be able to stake their long/short tokens and view their staked amount immediately", (function () {
                        var match = contracts.contents;
                        var staker = match.staker;
                        var testUser = accounts.contents[1];
                        return LetOps.Await.let_(HelperActions.stakeRandomlyInMarkets(match.markets, testUser, match.longShort), (function (param) {
                                      return LetOps.Await.let_(Promise.all(Belt_Array.map(param[0], (function (param) {
                                                            var priceOfSynthForAction = param.priceOfSynthForAction;
                                                            var amount = param.amount;
                                                            return LetOps.Await.let_(staker.userAmountStaked(param.synth.address, testUser.address), (function (amountStaked) {
                                                                          var expectedStakeAmount = Globals.div(Globals.mul(amount, CONSTANTS.tenToThe18), priceOfSynthForAction);
                                                                          return Chai.bnEqual("amount staked is greater than expected", amountStaked, expectedStakeAmount);
                                                                        }));
                                                          }))), (function (param) {
                                                    
                                                  }));
                                    }));
                      }));
                it("should update correct markets in the 'claimFloatCustom' function", (function () {
                        var match = contracts.contents;
                        var markets = match.markets;
                        var longShort = match.longShort;
                        var staker = match.staker;
                        var testUser = accounts.contents[1];
                        var setupUser = accounts.contents[2];
                        return LetOps.Await.let_(HelperActions.stakeRandomlyInBothSidesOfMarket(contracts.contents.markets, setupUser, contracts.contents.longShort), (function (param) {
                                      return LetOps.Await.let_(HelperActions.stakeRandomlyInMarkets(markets, testUser, longShort), (function (param) {
                                                    var marketsUserHasStakedIn = param[1];
                                                    return LetOps.Await.let_(Helpers.increaseTime(50), (function (param) {
                                                                  return LetOps.Await.let_(staker.connect(testUser).claimFloatCustom(marketsUserHasStakedIn), (function (param) {
                                                                                return LetOps.Await.let_(Promise.all(Belt_Array.map(marketsUserHasStakedIn, (function (market) {
                                                                                                      return Promise.all([
                                                                                                                    staker.userIndexOfLastClaimedReward(market, testUser.address),
                                                                                                                    staker.latestRewardIndex(market)
                                                                                                                  ]).then(function (param) {
                                                                                                                  return Chai.bnEqual(undefined, param[0], param[1]);
                                                                                                                });
                                                                                                    }))), (function (param) {
                                                                                              
                                                                                            }));
                                                                              }));
                                                                }));
                                                  }));
                                    }));
                      }));
                
              }));
        Globals.describeUnit("Staking - internals exposed", (function (param) {
                var contracts = {
                  contents: undefined
                };
                var accounts = {
                  contents: undefined
                };
                before(function () {
                      return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                    accounts.contents = loadedAccounts;
                                    
                                  }));
                    });
                describe("", (function () {
                        beforeEach(function () {
                              return LetOps.Await.let_(Helpers.initialize(accounts.contents[0], true), (function (deployedContracts) {
                                            contracts.contents = deployedContracts;
                                            
                                          }));
                            });
                        CalculateAccumulatedFloat.test(contracts);
                        GetMarketLaunchIncentiveParameters.test(contracts);
                        return CalculateTimeDelta.test(contracts);
                      }));
                describe("", (function () {
                        Globals.before_once$p(function (param) {
                              return LetOps.Await.let_(Helpers.initialize(accounts.contents[0], true), (function (deployedContracts) {
                                            contracts.contents = deployedContracts;
                                            
                                          }));
                            });
                        ChangeMarketLaunchIncentiveParameters.test(contracts, accounts);
                        AddNewStakingFund.test(contracts, accounts);
                        GetKValue.test(contracts, accounts);
                        CalculateFloatPerSecond.test(contracts, accounts);
                        CalculateNewCumulativeValue.test(contracts, accounts);
                        SetRewardObjects.test(contracts, accounts);
                        MintFloat.test(contracts, accounts);
                        MintAccumulatedFloat.test(contracts, accounts);
                        ClaimFloat.test(contracts, accounts);
                        StakeFromUser.test(contracts, accounts);
                        Stake.test(contracts, accounts);
                        return StakerAdminFunctions.testUnit(contracts, accounts);
                      }));
                
              }));
        describe("Smocked", (function () {
                var contracts = {
                  contents: "NOT INITIALIZED"
                };
                var accounts = {
                  contents: "NOT INITIALIZED"
                };
                before(function () {
                      return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                    accounts.contents = loadedAccounts;
                                    return LetOps.Await.let_(Helpers.initializeStakerUnit(undefined), (function (deployedContracts) {
                                                  contracts.contents = deployedContracts;
                                                  
                                                }));
                                  }));
                    });
                return Globals.describeUnit("Unit tests", (function (param) {
                              ShiftTokens.testUnit(contracts, accounts);
                              CalculateAccumulatedFloatInRange.testUnit(contracts, accounts);
                              ClaimFloatCustom.testUnit(contracts, accounts);
                              AddNewStateForFloatRewards.testUnit(contracts, accounts);
                              return Withdraw.testUnit(contracts, accounts);
                            }));
              }));
        
      }));

/*  Not a pure module */
