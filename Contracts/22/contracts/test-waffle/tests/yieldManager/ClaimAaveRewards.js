// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var AaveIncentivesControllerMockSmocked = require("../../library/smock/AaveIncentivesControllerMockSmocked.js");

function testUnit(contracts) {
  describe("Claiming Aave reward tokens", (function () {
          describe("claimAaveRewardsToTreasuryTxPromise", (function () {
                  var claimAaveRewardsToTreasuryTxPromise = {
                    contents: "NotSetYet"
                  };
                  var randomRewardAmount = Helpers.randomTokenAmount(undefined);
                  Globals.before_once$p(function (param) {
                        var aaveIncentivesControllerSmockedContract = contracts.contents.aaveIncentivesController;
                        AaveIncentivesControllerMockSmocked.mockGetUserUnclaimedRewardsToReturn(aaveIncentivesControllerSmockedContract, randomRewardAmount);
                        AaveIncentivesControllerMockSmocked.mockClaimRewardsToReturn(aaveIncentivesControllerSmockedContract, randomRewardAmount);
                        claimAaveRewardsToTreasuryTxPromise.contents = contracts.contents.yieldManagerAave.claimAaveRewardsToTreasury();
                        return claimAaveRewardsToTreasuryTxPromise.contents;
                      });
                  it("Calls the ClaimAaveRewardTokenToTreasury event", (function () {
                          return Chai.callEmitEvents(claimAaveRewardsToTreasuryTxPromise.contents, contracts.contents.yieldManagerAave, "ClaimAaveRewardTokenToTreasury").withArgs(randomRewardAmount);
                        }));
                  it("it calls claimRewards with the correct parameters on the AaveIncentiveController", (function () {
                          var aaveIncentivesControllerSmockedContract = contracts.contents.aaveIncentivesController;
                          return Chai.recordArrayDeepEqualFlat(undefined, AaveIncentivesControllerMockSmocked.getUserUnclaimedRewardsCalls(aaveIncentivesControllerSmockedContract), [{
                                        user: contracts.contents.yieldManagerAave.address
                                      }]);
                        }));
                  it("it calls claimRewards with the correct parameters on the AaveIncentiveController", (function () {
                          var aaveIncentivesControllerSmockedContract = contracts.contents.aaveIncentivesController;
                          var treasury = contracts.contents.treasury;
                          return Chai.recordArrayDeepEqualFlat(undefined, AaveIncentivesControllerMockSmocked.claimRewardsCalls(aaveIncentivesControllerSmockedContract), [{
                                        assets: [contracts.contents.paymentToken.address],
                                        amount: randomRewardAmount,
                                        _to: treasury.address
                                      }]);
                        }));
                  
                }));
          
        }));
  
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
