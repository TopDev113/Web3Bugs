// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var Js_math = require("rescript/lib/js/js_math.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");

function testUnit(contracts, param) {
  describe("getUsersConfirmedButNotSettledSynthBalance", (function () {
          var user = Helpers.randomAddress(undefined);
          var match = Js_math.random_int(0, 2);
          var isLong = match !== 0;
          Globals.before_once$p(function (param) {
                return LongShortSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.longShort, "getUsersConfirmedButNotSettledSynthBalance");
              });
          describe("[happy case] [isLong: " + isLong + "] userNextPrice_currentUpdateIndex within bounds", (function () {
                  describe("userNextPriceDepositAmount non-zero and userNextPrice_syntheticToken_toShiftAwayFrom_marketSide zero", (function () {
                          var userNextPrice_paymentToken_depositAmount_isLong = Helpers.randomTokenAmount(undefined);
                          var syntheticToken_priceSnapshot_isLong = Helpers.randomTokenAmount(undefined);
                          var syntheticToken_priceSnapshot_notIsLong = Helpers.randomTokenAmount(undefined);
                          it("should return correct result", (function () {
                                  return LetOps.Await.let_(contracts.contents.longShort.setGetUsersConfirmedButNotSettledBalanceGlobals(1, user, isLong, Globals.oneBn, Globals.twoBn, userNextPrice_paymentToken_depositAmount_isLong, syntheticToken_priceSnapshot_isLong, syntheticToken_priceSnapshot_notIsLong, Globals.zeroBn), (function (param) {
                                                var expectedResult = Globals.div(Globals.mul(userNextPrice_paymentToken_depositAmount_isLong, Globals.tenToThe18), syntheticToken_priceSnapshot_isLong);
                                                return LetOps.Await.let_(contracts.contents.longShort.getUsersConfirmedButNotSettledSynthBalance(user, 1, isLong), (function (actualResult) {
                                                              return Chai.bnEqual(undefined, expectedResult, actualResult);
                                                            }));
                                              }));
                                }));
                          
                        }));
                  describe("userNextPriceDepositAmount zero and userNextPrice_syntheticToken_toShiftAwayFrom_marketSide non-zero", (function () {
                          var syntheticToken_priceSnapshot_isLong = Helpers.randomTokenAmount(undefined);
                          var syntheticToken_priceSnapshot_notIsLong = Helpers.randomTokenAmount(undefined);
                          var userNextPrice_syntheticToken_toShiftAwayFrom_marketSide_notIsLong = Helpers.randomTokenAmount(undefined);
                          it("should return correct result", (function () {
                                  return LetOps.Await.let_(contracts.contents.longShort.setGetUsersConfirmedButNotSettledBalanceGlobals(1, user, isLong, Globals.oneBn, Globals.twoBn, Globals.zeroBn, syntheticToken_priceSnapshot_isLong, syntheticToken_priceSnapshot_notIsLong, userNextPrice_syntheticToken_toShiftAwayFrom_marketSide_notIsLong), (function (param) {
                                                var expectedResult = Globals.div(Globals.mul(userNextPrice_syntheticToken_toShiftAwayFrom_marketSide_notIsLong, syntheticToken_priceSnapshot_notIsLong), syntheticToken_priceSnapshot_isLong);
                                                return LetOps.Await.let_(contracts.contents.longShort.getUsersConfirmedButNotSettledSynthBalance(user, 1, isLong), (function (actualResult) {
                                                              return Chai.bnEqual(undefined, expectedResult, actualResult);
                                                            }));
                                              }));
                                }));
                          
                        }));
                  describe("userNextPriceDepositAmount non-zero and userNextPrice_syntheticToken_toShiftAwayFrom_marketSide non-zero", (function () {
                          var userNextPrice_paymentToken_depositAmount_isLong = Helpers.randomTokenAmount(undefined);
                          var syntheticToken_priceSnapshot_isLong = Helpers.randomTokenAmount(undefined);
                          var syntheticToken_priceSnapshot_notIsLong = Helpers.randomTokenAmount(undefined);
                          var userNextPrice_syntheticToken_toShiftAwayFrom_marketSide_notIsLong = Helpers.randomTokenAmount(undefined);
                          it("should return correct result", (function () {
                                  return LetOps.Await.let_(contracts.contents.longShort.setGetUsersConfirmedButNotSettledBalanceGlobals(1, user, isLong, Globals.oneBn, Globals.twoBn, userNextPrice_paymentToken_depositAmount_isLong, syntheticToken_priceSnapshot_isLong, syntheticToken_priceSnapshot_notIsLong, userNextPrice_syntheticToken_toShiftAwayFrom_marketSide_notIsLong), (function (param) {
                                                var expectedResult = Globals.add(Globals.div(Globals.mul(userNextPrice_syntheticToken_toShiftAwayFrom_marketSide_notIsLong, syntheticToken_priceSnapshot_notIsLong), syntheticToken_priceSnapshot_isLong), Globals.div(Globals.mul(userNextPrice_paymentToken_depositAmount_isLong, Globals.tenToThe18), syntheticToken_priceSnapshot_isLong));
                                                return LetOps.Await.let_(contracts.contents.longShort.getUsersConfirmedButNotSettledSynthBalance(user, 1, isLong), (function (actualResult) {
                                                              return Chai.bnEqual(undefined, expectedResult, actualResult);
                                                            }));
                                              }));
                                }));
                          
                        }));
                  
                }));
          describe("[sad case] [isLong: " + isLong + "] userNextPrice_currentUpdateIndex out of bounds", (function () {
                  var userNextPrice_paymentToken_depositAmount_isLong = Helpers.randomTokenAmount(undefined);
                  var syntheticToken_priceSnapshot_isLong = Helpers.randomTokenAmount(undefined);
                  var syntheticToken_priceSnapshot_notIsLong = Helpers.randomTokenAmount(undefined);
                  var userNextPrice_syntheticToken_toShiftAwayFrom_marketSide_notIsLong = Helpers.randomTokenAmount(undefined);
                  var setup = function (userNextPrice_currentUpdateIndex, marketUpdateIndex) {
                    return contracts.contents.longShort.setGetUsersConfirmedButNotSettledBalanceGlobals(1, user, isLong, userNextPrice_currentUpdateIndex, marketUpdateIndex, userNextPrice_paymentToken_depositAmount_isLong, syntheticToken_priceSnapshot_isLong, syntheticToken_priceSnapshot_notIsLong, userNextPrice_syntheticToken_toShiftAwayFrom_marketSide_notIsLong);
                  };
                  it("returns 0 if userNextPrice_currentUpdateIndex == 0", (function () {
                          return LetOps.Await.let_(setup(Globals.zeroBn, Globals.oneBn), (function (param) {
                                        return LetOps.Await.let_(contracts.contents.longShort.getUsersConfirmedButNotSettledSynthBalance(user, 1, isLong), (function (result) {
                                                      return Chai.bnEqual(undefined, Globals.zeroBn, result);
                                                    }));
                                      }));
                        }));
                  it("returns 0 if userNextPrice_currentUpdateIndex > currentMarketUpdateIndex", (function () {
                          return LetOps.Await.let_(setup(Globals.twoBn, Globals.oneBn), (function (param) {
                                        return LetOps.Await.let_(contracts.contents.longShort.getUsersConfirmedButNotSettledSynthBalance(user, 1, isLong), (function (result) {
                                                      return Chai.bnEqual(undefined, Globals.zeroBn, result);
                                                    }));
                                      }));
                        }));
                  
                }));
          
        }));
  
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
