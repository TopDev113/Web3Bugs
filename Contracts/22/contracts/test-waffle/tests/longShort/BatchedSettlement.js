// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var Contract = require("../../library/Contract.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");
var Smock = require("@eth-optimism/smock");
var SyntheticTokenSmocked = require("../../library/smock/SyntheticTokenSmocked.js");
var YieldManagerMockSmocked = require("../../library/smock/YieldManagerMockSmocked.js");

function testUnit(contracts, param) {
  return Globals.describeUnit("Batched Settlement", (function (param) {
                var marketIndex = Helpers.randomJsInteger(undefined);
                describe("_batchConfirmOutstandingPendingActions", (function () {
                        var syntheticTokenPrice_inPaymentTokens_long = Helpers.randomTokenAmount(undefined);
                        var syntheticTokenPrice_inPaymentTokens_short = Helpers.randomTokenAmount(undefined);
                        var setup = function (batched_amountPaymentToken_depositLong, batched_amountPaymentToken_depositShort, batched_amountSyntheticToken_redeemLong, batched_amountSyntheticToken_redeemShort, batchedAmountSyntheticTokenToShiftFromLong, batchedAmountSyntheticTokenToShiftFromShort) {
                          var match = contracts.contents;
                          var longShort = match.longShort;
                          return LetOps.AwaitThen.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(longShort, "_batchConfirmOutstandingPendingActions"), (function (param) {
                                        LongShortSmocked.InternalMock.mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToReturn(undefined);
                                        LongShortSmocked.InternalMock.mock_handleChangeInSyntheticTokensTotalSupplyToReturn(undefined);
                                        return LetOps.AwaitThen.let_(longShort.setPerformOustandingBatchedSettlementsGlobals(marketIndex, batched_amountPaymentToken_depositLong, batched_amountPaymentToken_depositShort, batched_amountSyntheticToken_redeemLong, batched_amountSyntheticToken_redeemShort, batchedAmountSyntheticTokenToShiftFromLong, batchedAmountSyntheticTokenToShiftFromShort), (function (param) {
                                                      return longShort.callStatic._batchConfirmOutstandingPendingActionsExposed(marketIndex, syntheticTokenPrice_inPaymentTokens_long, syntheticTokenPrice_inPaymentTokens_short);
                                                    }));
                                      }));
                        };
                        var runTest = function (batched_amountPaymentToken_depositLong, batched_amountPaymentToken_depositShort, batched_amountSyntheticToken_redeemLong, batched_amountSyntheticToken_redeemShort, batchedAmountSyntheticTokenToShiftFromLong, batchedAmountSyntheticTokenToShiftFromShort) {
                          var batchedAmountSyntheticTokenToMintLong = {
                            contents: undefined
                          };
                          var batchedAmountSyntheticTokenToMintShort = {
                            contents: undefined
                          };
                          var batchedAmountOfPaymentTokensToBurnLong = {
                            contents: undefined
                          };
                          var batchedAmountOfPaymentTokensToBurnShort = {
                            contents: undefined
                          };
                          var batchedAmountOfPaymentTokensToShiftToLong = {
                            contents: undefined
                          };
                          var batchedAmountOfPaymentTokensToShiftToShort = {
                            contents: undefined
                          };
                          var batchedAmountSyntheticTokenToShiftToLong = {
                            contents: undefined
                          };
                          var batchedAmountSyntheticTokenToShiftToShort = {
                            contents: undefined
                          };
                          var calculatedValueChangeForLong = {
                            contents: undefined
                          };
                          var calculatedValueChangeForShort = {
                            contents: undefined
                          };
                          var calculatedValueChangeInSynthSupplyLong = {
                            contents: undefined
                          };
                          var calculatedValueChangeInSynthSupplyShort = {
                            contents: undefined
                          };
                          var returnOfPerformOustandingBatchedSettlements = {
                            contents: undefined
                          };
                          beforeEach(function () {
                                return LetOps.Await.let_(setup(batched_amountPaymentToken_depositLong, batched_amountPaymentToken_depositShort, batched_amountSyntheticToken_redeemLong, batched_amountSyntheticToken_redeemShort, batchedAmountSyntheticTokenToShiftFromLong, batchedAmountSyntheticTokenToShiftFromShort), (function (functionCallReturn) {
                                              batchedAmountSyntheticTokenToMintLong.contents = Contract.LongShortHelpers.calcAmountSyntheticToken(batched_amountPaymentToken_depositLong, syntheticTokenPrice_inPaymentTokens_long);
                                              batchedAmountSyntheticTokenToMintShort.contents = Contract.LongShortHelpers.calcAmountSyntheticToken(batched_amountPaymentToken_depositShort, syntheticTokenPrice_inPaymentTokens_short);
                                              batchedAmountOfPaymentTokensToBurnLong.contents = Contract.LongShortHelpers.calcAmountPaymentToken(batched_amountSyntheticToken_redeemLong, syntheticTokenPrice_inPaymentTokens_long);
                                              batchedAmountOfPaymentTokensToBurnShort.contents = Contract.LongShortHelpers.calcAmountPaymentToken(batched_amountSyntheticToken_redeemShort, syntheticTokenPrice_inPaymentTokens_short);
                                              batchedAmountOfPaymentTokensToShiftToLong.contents = Contract.LongShortHelpers.calcAmountPaymentToken(batchedAmountSyntheticTokenToShiftFromShort, syntheticTokenPrice_inPaymentTokens_short);
                                              batchedAmountOfPaymentTokensToShiftToShort.contents = Contract.LongShortHelpers.calcAmountPaymentToken(batchedAmountSyntheticTokenToShiftFromLong, syntheticTokenPrice_inPaymentTokens_long);
                                              batchedAmountSyntheticTokenToShiftToShort.contents = Contract.LongShortHelpers.calcEquivalentAmountSyntheticTokensOnTargetSide(batchedAmountSyntheticTokenToShiftFromLong, syntheticTokenPrice_inPaymentTokens_long, syntheticTokenPrice_inPaymentTokens_short);
                                              batchedAmountSyntheticTokenToShiftToLong.contents = Contract.LongShortHelpers.calcEquivalentAmountSyntheticTokensOnTargetSide(batchedAmountSyntheticTokenToShiftFromShort, syntheticTokenPrice_inPaymentTokens_short, syntheticTokenPrice_inPaymentTokens_long);
                                              calculatedValueChangeForLong.contents = Globals.sub(Globals.add(Globals.sub(batched_amountPaymentToken_depositLong, batchedAmountOfPaymentTokensToBurnLong.contents), batchedAmountOfPaymentTokensToShiftToLong.contents), batchedAmountOfPaymentTokensToShiftToShort.contents);
                                              calculatedValueChangeForShort.contents = Globals.sub(Globals.add(Globals.sub(batched_amountPaymentToken_depositShort, batchedAmountOfPaymentTokensToBurnShort.contents), batchedAmountOfPaymentTokensToShiftToShort.contents), batchedAmountOfPaymentTokensToShiftToLong.contents);
                                              calculatedValueChangeInSynthSupplyLong.contents = Globals.sub(Globals.add(Globals.sub(batchedAmountSyntheticTokenToMintLong.contents, batched_amountSyntheticToken_redeemLong), batchedAmountSyntheticTokenToShiftToLong.contents), batchedAmountSyntheticTokenToShiftFromLong);
                                              calculatedValueChangeInSynthSupplyShort.contents = Globals.sub(Globals.add(Globals.sub(batchedAmountSyntheticTokenToMintShort.contents, batched_amountSyntheticToken_redeemShort), batchedAmountSyntheticTokenToShiftToShort.contents), batchedAmountSyntheticTokenToShiftFromShort);
                                              returnOfPerformOustandingBatchedSettlements.contents = functionCallReturn;
                                              
                                            }));
                              });
                          it("call handleChangeInSyntheticTokensTotalSupply with the correct parameters", (function () {
                                  var handleChangeInSyntheticTokensTotalSupplyCalls = LongShortSmocked.InternalMock._handleChangeInSyntheticTokensTotalSupplyCalls(undefined);
                                  return Chai.recordArrayDeepEqualFlat(undefined, handleChangeInSyntheticTokensTotalSupplyCalls, [
                                              {
                                                marketIndex: marketIndex,
                                                isLong: true,
                                                changeInSyntheticTokensTotalSupply: calculatedValueChangeInSynthSupplyLong.contents
                                              },
                                              {
                                                marketIndex: marketIndex,
                                                isLong: false,
                                                changeInSyntheticTokensTotalSupply: calculatedValueChangeInSynthSupplyShort.contents
                                              }
                                            ]);
                                }));
                          it("call handleTotalValueChangeForMarketWithYieldManager with the correct parameters", (function () {
                                  var handleTotalValueChangeForMarketWithYieldManagerCalls = LongShortSmocked.InternalMock._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerCalls(undefined);
                                  var totalPaymentTokenValueChangeForMarket = Globals.add(calculatedValueChangeForLong.contents, calculatedValueChangeForShort.contents);
                                  return Chai.recordArrayDeepEqualFlat(undefined, handleTotalValueChangeForMarketWithYieldManagerCalls, [{
                                                marketIndex: marketIndex,
                                                totalPaymentTokenValueChangeForMarket: totalPaymentTokenValueChangeForMarket
                                              }]);
                                }));
                          it("should return the correct values", (function () {
                                  return Chai.recordEqualDeep(undefined, returnOfPerformOustandingBatchedSettlements.contents, {
                                              long_changeInMarketValue_inPaymentToken: calculatedValueChangeForLong.contents,
                                              short_changeInMarketValue_inPaymentToken: calculatedValueChangeForShort.contents
                                            });
                                }));
                          
                        };
                        describe("there are no actions in the batch", (function () {
                                return runTest(Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn);
                              }));
                        describe("there is 1 deposit long", (function () {
                                return runTest(Helpers.randomTokenAmount(undefined), Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn);
                              }));
                        describe("there is 1 deposit short", (function () {
                                return runTest(Globals.zeroBn, Helpers.randomTokenAmount(undefined), Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn);
                              }));
                        describe("there is 1 withdraw long", (function () {
                                return runTest(Globals.zeroBn, Globals.zeroBn, Helpers.randomTokenAmount(undefined), Globals.zeroBn, Globals.zeroBn, Globals.zeroBn);
                              }));
                        describe("there is 1 withdraw short", (function () {
                                return runTest(Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Helpers.randomTokenAmount(undefined), Globals.zeroBn, Globals.zeroBn);
                              }));
                        describe("there is 1 shift from long to short", (function () {
                                return runTest(Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Helpers.randomTokenAmount(undefined), Globals.zeroBn);
                              }));
                        describe("there is 1 shift from short to long", (function () {
                                return runTest(Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Globals.zeroBn, Helpers.randomTokenAmount(undefined));
                              }));
                        describe("there random deposits and withdrawals (we could be more specific with this test possibly?)", (function () {
                                return runTest(Helpers.randomTokenAmount(undefined), Helpers.randomTokenAmount(undefined), Helpers.randomTokenAmount(undefined), Helpers.randomTokenAmount(undefined), Helpers.randomTokenAmount(undefined), Helpers.randomTokenAmount(undefined));
                              }));
                        
                      }));
                describe("_handleChangeInSyntheticTokensTotalSupply", (function () {
                        var longSyntheticToken = {
                          contents: "Not Set Yet"
                        };
                        var shortSyntheticToken = {
                          contents: "Not Set Yet"
                        };
                        beforeEach(function () {
                              var match = contracts.contents;
                              var longShort = match.longShort;
                              var match$1 = match.markets[0];
                              var shortSynth = match$1.shortSynth;
                              return LetOps.Await.let_(Smock.smockit(match$1.longSynth), (function (smockedSynthLong) {
                                            return LetOps.Await.let_(Smock.smockit(shortSynth), (function (smockedSynthShort) {
                                                          longSyntheticToken.contents = smockedSynthLong;
                                                          shortSyntheticToken.contents = smockedSynthShort;
                                                          SyntheticTokenSmocked.mockMintToReturn(smockedSynthLong);
                                                          SyntheticTokenSmocked.mockBurnToReturn(smockedSynthLong);
                                                          SyntheticTokenSmocked.mockMintToReturn(smockedSynthShort);
                                                          SyntheticTokenSmocked.mockBurnToReturn(smockedSynthShort);
                                                          return longShort.setHandleChangeInSyntheticTokensTotalSupplyGlobals(marketIndex, smockedSynthLong.address, smockedSynthShort.address);
                                                        }));
                                          }));
                            });
                        var testHandleChangeInSyntheticTokensTotalSupply = function (isLong, syntheticTokenRef) {
                          describe("changeInSyntheticTokensTotalSupply > 0", (function () {
                                  var changeInSyntheticTokensTotalSupply = Helpers.randomTokenAmount(undefined);
                                  beforeEach(function () {
                                        var match = contracts.contents;
                                        return match.longShort._handleChangeInSyntheticTokensTotalSupplyExposed(marketIndex, isLong, changeInSyntheticTokensTotalSupply);
                                      });
                                  it("should call the mint function on the correct synthetic token with correct arguments.", (function () {
                                          var mintCalls = SyntheticTokenSmocked.mintCalls(syntheticTokenRef.contents);
                                          return Chai.recordArrayDeepEqualFlat(undefined, mintCalls, [{
                                                        _to: contracts.contents.longShort.address,
                                                        amount: changeInSyntheticTokensTotalSupply
                                                      }]);
                                        }));
                                  it("should NOT call the burn function.", (function () {
                                          var burnCalls = SyntheticTokenSmocked.burnCalls(syntheticTokenRef.contents);
                                          return Chai.recordArrayDeepEqualFlat(undefined, burnCalls, []);
                                        }));
                                  
                                }));
                          describe("changeInSyntheticTokensTotalSupply < 0", (function () {
                                  var changeInSyntheticTokensTotalSupply = Globals.sub(Globals.zeroBn, Helpers.randomTokenAmount(undefined));
                                  beforeEach(function () {
                                        var match = contracts.contents;
                                        return match.longShort._handleChangeInSyntheticTokensTotalSupplyExposed(marketIndex, isLong, changeInSyntheticTokensTotalSupply);
                                      });
                                  it("should NOT call the mint function on the correct synthetic token.", (function () {
                                          var mintCalls = SyntheticTokenSmocked.mintCalls(syntheticTokenRef.contents);
                                          return Chai.recordArrayDeepEqualFlat(undefined, mintCalls, []);
                                        }));
                                  it("should call the burn function on the correct synthetic token with correct arguments.", (function () {
                                          var burnCalls = SyntheticTokenSmocked.burnCalls(syntheticTokenRef.contents);
                                          return Chai.recordArrayDeepEqualFlat(undefined, burnCalls, [{
                                                        amount: Globals.sub(Globals.zeroBn, changeInSyntheticTokensTotalSupply)
                                                      }]);
                                        }));
                                  
                                }));
                          describe("changeInSyntheticTokensTotalSupply == 0", (function () {
                                  it("should call NEITHER the mint NOR burn function.", (function () {
                                          var match = contracts.contents;
                                          return LetOps.Await.let_(match.longShort._handleChangeInSyntheticTokensTotalSupplyExposed(marketIndex, isLong, Globals.zeroBn), (function (param) {
                                                        var mintCalls = SyntheticTokenSmocked.mintCalls(syntheticTokenRef.contents);
                                                        var burnCalls = SyntheticTokenSmocked.burnCalls(syntheticTokenRef.contents);
                                                        Chai.recordArrayDeepEqualFlat(undefined, mintCalls, []);
                                                        return Chai.recordArrayDeepEqualFlat(undefined, burnCalls, []);
                                                      }));
                                        }));
                                  
                                }));
                          
                        };
                        describe("LongSide", (function () {
                                testHandleChangeInSyntheticTokensTotalSupply(true, longSyntheticToken);
                                return testHandleChangeInSyntheticTokensTotalSupply(false, shortSyntheticToken);
                              }));
                        
                      }));
                describe("_handleTotalPaymentTokenValueChangeForMarketWithYieldManager", (function () {
                        var yieldManagerRef = {
                          contents: "Not Set Yet"
                        };
                        beforeEach(function () {
                              var match = contracts.contents;
                              var longShort = match.longShort;
                              var match$1 = match.markets[0];
                              return LetOps.Await.let_(Smock.smockit(match$1.yieldManager), (function (smockedYieldManager) {
                                            yieldManagerRef.contents = smockedYieldManager;
                                            YieldManagerMockSmocked.mockDepositPaymentTokenToReturn(smockedYieldManager);
                                            YieldManagerMockSmocked.mockRemovePaymentTokenFromMarketToReturn(smockedYieldManager);
                                            return longShort.setHandleTotalValueChangeForMarketWithYieldManagerGlobals(marketIndex, smockedYieldManager.address);
                                          }));
                            });
                        describe("totalPaymentTokenValueChangeForMarket > 0", (function () {
                                var totalPaymentTokenValueChangeForMarket = Helpers.randomTokenAmount(undefined);
                                beforeEach(function () {
                                      var match = contracts.contents;
                                      return match.longShort._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerExposed(marketIndex, totalPaymentTokenValueChangeForMarket);
                                    });
                                it("should call the depositPaymentToken function on the correct synthetic token with correct arguments.", (function () {
                                        var depositPaymentTokenCalls = YieldManagerMockSmocked.depositPaymentTokenCalls(yieldManagerRef.contents);
                                        return Chai.recordArrayDeepEqualFlat(undefined, depositPaymentTokenCalls, [{
                                                      amount: totalPaymentTokenValueChangeForMarket
                                                    }]);
                                      }));
                                it("should NOT call the removePaymentTokenFromMarket function.", (function () {
                                        var burnCalls = YieldManagerMockSmocked.removePaymentTokenFromMarketCalls(yieldManagerRef.contents);
                                        return Chai.recordArrayDeepEqualFlat(undefined, burnCalls, []);
                                      }));
                                
                              }));
                        describe("totalPaymentTokenValueChangeForMarket < 0", (function () {
                                var totalPaymentTokenValueChangeForMarket = Globals.sub(Globals.zeroBn, Helpers.randomTokenAmount(undefined));
                                beforeEach(function () {
                                      var match = contracts.contents;
                                      return match.longShort._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerExposed(marketIndex, totalPaymentTokenValueChangeForMarket);
                                    });
                                it("should NOT call the depositPaymentToken function on the correct synthetic token.", (function () {
                                        var mintCalls = YieldManagerMockSmocked.depositPaymentTokenCalls(yieldManagerRef.contents);
                                        return Chai.recordArrayDeepEqualFlat(undefined, mintCalls, []);
                                      }));
                                it("should call the removePaymentTokenFromMarket function on the correct synthetic token with correct arguments.", (function () {
                                        var burnCalls = YieldManagerMockSmocked.removePaymentTokenFromMarketCalls(yieldManagerRef.contents);
                                        return Chai.recordArrayDeepEqualFlat(undefined, burnCalls, [{
                                                      amount: Globals.sub(Globals.zeroBn, totalPaymentTokenValueChangeForMarket)
                                                    }]);
                                      }));
                                
                              }));
                        describe("totalPaymentTokenValueChangeForMarket == 0", (function () {
                                it("should call NEITHER the depositPaymentToken NOR removePaymentTokenFromMarket function.", (function () {
                                        var match = contracts.contents;
                                        return LetOps.Await.let_(match.longShort._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerExposed(marketIndex, Globals.zeroBn), (function (param) {
                                                      var mintCalls = YieldManagerMockSmocked.depositPaymentTokenCalls(yieldManagerRef.contents);
                                                      var burnCalls = YieldManagerMockSmocked.removePaymentTokenFromMarketCalls(yieldManagerRef.contents);
                                                      Chai.recordArrayDeepEqualFlat(undefined, mintCalls, []);
                                                      return Chai.recordArrayDeepEqualFlat(undefined, burnCalls, []);
                                                    }));
                                      }));
                                
                              }));
                        
                      }));
                
              }));
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
