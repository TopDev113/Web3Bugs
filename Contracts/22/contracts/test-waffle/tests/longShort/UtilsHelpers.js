// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var Js_int = require("rescript/lib/js/js_int.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var Js_math = require("rescript/lib/js/js_math.js");
var CONSTANTS = require("../../CONSTANTS.js");

function testUnit(contracts, param) {
  return Globals.describeUnit("Long Short Utilities and helpers", (function (param) {
                describe("_getMin(a,b)", (function () {
                        it("returns `a` when `a < b`", (function () {
                                var a = Js_math.random_int(0, Js_int.max - 1 | 0);
                                var b = Js_math.random_int(a + 1 | 0, Js_int.max);
                                var expectedResult = Globals.bnFromInt(a);
                                return LetOps.Await.let_(contracts.contents.longShort._getMinExposed(Globals.bnFromInt(a), Globals.bnFromInt(b)), (function (actualResult) {
                                              return Chai.bnEqual("incorrect number returned from _getMin (a=" + a + " ; b=" + b + ")", actualResult, expectedResult);
                                            }));
                              }));
                        it("returns `b` when `b < a`", (function () {
                                var b = Js_math.random_int(0, Js_int.max - 1 | 0);
                                var a = Js_math.random_int(b + 1 | 0, Js_int.max);
                                var expectedResult = Globals.bnFromInt(b);
                                return LetOps.Await.let_(contracts.contents.longShort._getMinExposed(Globals.bnFromInt(a), Globals.bnFromInt(b)), (function (actualResult) {
                                              return Chai.bnEqual("incorrect number returned from _getMin (a=" + a + " ; b=" + b + ")", actualResult, expectedResult);
                                            }));
                              }));
                        it("returns `a` when `a == b`", (function () {
                                var a = Js_math.random_int(0, Js_int.max);
                                var expectedResult = Globals.bnFromInt(a);
                                return LetOps.Await.let_(contracts.contents.longShort._getMinExposed(Globals.bnFromInt(a), Globals.bnFromInt(a)), (function (actualResult) {
                                              return Chai.bnEqual("incorrect number returned from _getMin (a=" + a + " ; b=" + a + ")", actualResult, expectedResult);
                                            }));
                              }));
                        
                      }));
                describe("_getYieldSplit", (function () {
                        var test = function (marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort) {
                          var totalValueLockedInMarket = Globals.add(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort);
                          var isLongSideUnderbalanced = Globals.bnGte(marketSideValueInPaymentTokenShort, marketSideValueInPaymentTokenLong);
                          var imbalance = isLongSideUnderbalanced ? Globals.sub(marketSideValueInPaymentTokenShort, marketSideValueInPaymentTokenLong) : Globals.sub(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort);
                          return LetOps.AwaitThen.let_(contracts.contents.longShort.marketTreasurySplitGradient_e18(1), (function (marketTreasurySplitGradient_e18) {
                                        var marketPercentCalculated_e18 = Globals.div(Globals.mul(imbalance, marketTreasurySplitGradient_e18), totalValueLockedInMarket);
                                        var marketPercent_e18 = Globals.bnMin(marketPercentCalculated_e18, CONSTANTS.tenToThe18);
                                        var treasuryPercent_e18 = Globals.sub(CONSTANTS.tenToThe18, marketPercent_e18);
                                        return LetOps.Await.let_(contracts.contents.longShort._getYieldSplitExposed(1, marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort, totalValueLockedInMarket), (function (actualResult) {
                                                      return Chai.bnEqual("expectedResult and result after `_getYieldSplit` not the same", treasuryPercent_e18, actualResult.treasuryYieldPercent_e18);
                                                    }));
                                      }));
                        };
                        it("works as expected if longValue > shortValue", (function () {
                                var marketSideValueInPaymentTokenShort = Helpers.randomTokenAmount(undefined);
                                var marketSideValueInPaymentTokenLong = Globals.add(marketSideValueInPaymentTokenShort, Helpers.randomTokenAmount(undefined));
                                return test(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort);
                              }));
                        it("works as expected if shortValue > longValue", (function () {
                                var marketSideValueInPaymentTokenLong = Helpers.randomTokenAmount(undefined);
                                var marketSideValueInPaymentTokenShort = Globals.add(marketSideValueInPaymentTokenLong, Helpers.randomTokenAmount(undefined));
                                return test(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort);
                              }));
                        it("works as expected if shortValue == longValue", (function () {
                                var marketSideValueInPaymentTokenLong = Helpers.randomTokenAmount(undefined);
                                return test(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenLong);
                              }));
                        
                      }));
                
              }));
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
