// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var Curry = require("rescript/lib/js/curry.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var HelperActions = require("../../library/HelperActions.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");
var Smock = require("@eth-optimism/smock");
var SyntheticTokenSmocked = require("../../library/smock/SyntheticTokenSmocked.js");

function testIntegration(contracts, accounts) {
  describe("nextPriceRedeem", (function () {
          var runNextPriceRedeemTest = function (isLong) {
            it("should work as expected happy path for redeem " + (
                  isLong ? "Long" : "Short"
                ), (function () {
                    var testUser = accounts.contents[8];
                    var amountToNextPriceMint = Helpers.randomTokenAmount(undefined);
                    var match = contracts.contents;
                    var longShort = match.longShort;
                    var longShortUserConnected = longShort.connect(testUser);
                    var match$1 = match.markets[0];
                    var marketIndex = match$1.marketIndex;
                    var oracleManager = match$1.oracleManager;
                    var paymentToken = match$1.paymentToken;
                    var testSynth = isLong ? match$1.longSynth : match$1.shortSynth;
                    var redeemNextPriceFunction = isLong ? (function (prim0, prim1, prim2) {
                          return prim0.redeemLongNextPrice(prim1, prim2);
                        }) : (function (prim0, prim1, prim2) {
                          return prim0.redeemShortNextPrice(prim1, prim2);
                        });
                    return LetOps.AwaitThen.let_(longShort.marketSideValueInPaymentToken(marketIndex, isLong), (function (_longValueBefore) {
                                  return LetOps.AwaitThen.let_(paymentToken.mint(testUser.address, amountToNextPriceMint), (function (param) {
                                                return LetOps.AwaitThen.let_(paymentToken.setShouldMockTransfer(false), (function (param) {
                                                              return LetOps.AwaitThen.let_(paymentToken.connect(testUser).approve(longShort.address, amountToNextPriceMint), (function (param) {
                                                                            return LetOps.AwaitThen.let_(HelperActions.mintDirect(marketIndex, amountToNextPriceMint, paymentToken, testUser, longShort, oracleManager, isLong), (function (param) {
                                                                                          return LetOps.AwaitThen.let_(testSynth.balanceOf(testUser.address), (function (usersBalanceAvailableForRedeem) {
                                                                                                        return LetOps.AwaitThen.let_(Curry._3(redeemNextPriceFunction, longShortUserConnected, marketIndex, usersBalanceAvailableForRedeem), (function (param) {
                                                                                                                      return LetOps.AwaitThen.let_(testSynth.balanceOf(testUser.address), (function (usersBalanceAfterNextPriceRedeem) {
                                                                                                                                    Chai.bnEqual("Balance after price system update but before user settlement should be the same as after settlement", usersBalanceAfterNextPriceRedeem, CONSTANTS.zeroBn);
                                                                                                                                    return LetOps.AwaitThen.let_(paymentToken.balanceOf(testUser.address), (function (paymentTokenBalanceBeforeWithdrawal) {
                                                                                                                                                  return LetOps.AwaitThen.let_(oracleManager.getLatestPrice(), (function (previousPrice) {
                                                                                                                                                                var nextPrice = Globals.div(Globals.mul(previousPrice, Globals.bnFromInt(12)), Globals.bnFromInt(10));
                                                                                                                                                                return LetOps.AwaitThen.let_(oracleManager.setPrice(nextPrice), (function (param) {
                                                                                                                                                                              return LetOps.AwaitThen.let_(longShort.updateSystemState(marketIndex), (function (param) {
                                                                                                                                                                                            return LetOps.AwaitThen.let_(longShort.marketUpdateIndex(marketIndex), (function (latestUpdateIndex) {
                                                                                                                                                                                                          return LetOps.AwaitThen.let_(longShort.syntheticToken_priceSnapshot(marketIndex, isLong, latestUpdateIndex), (function (redemptionPriceWithFees) {
                                                                                                                                                                                                                        var amountExpectedToBeRedeemed = Globals.div(Globals.mul(usersBalanceAvailableForRedeem, redemptionPriceWithFees), CONSTANTS.tenToThe18);
                                                                                                                                                                                                                        return LetOps.AwaitThen.let_(longShort.executeOutstandingNextPriceSettlementsUser(testUser.address, marketIndex), (function (param) {
                                                                                                                                                                                                                                      return LetOps.Await.let_(paymentToken.balanceOf(testUser.address), (function (paymentTokenBalanceAfterWithdrawal) {
                                                                                                                                                                                                                                                    var deltaBalanceChange = Globals.sub(paymentTokenBalanceAfterWithdrawal, paymentTokenBalanceBeforeWithdrawal);
                                                                                                                                                                                                                                                    return Chai.bnEqual("Balance of paymentToken didn't update correctly", deltaBalanceChange, amountExpectedToBeRedeemed);
                                                                                                                                                                                                                                                  }));
                                                                                                                                                                                                                                    }));
                                                                                                                                                                                                                      }));
                                                                                                                                                                                                        }));
                                                                                                                                                                                          }));
                                                                                                                                                                            }));
                                                                                                                                                              }));
                                                                                                                                                }));
                                                                                                                                  }));
                                                                                                                    }));
                                                                                                      }));
                                                                                        }));
                                                                          }));
                                                            }));
                                              }));
                                }));
                  }));
            
          };
          runNextPriceRedeemTest(true);
          return runNextPriceRedeemTest(false);
        }));
  
}

function testUnit(contracts, accounts) {
  describe("redeemNextPrice external functions", (function () {
          var tokens_redeem = Helpers.randomTokenAmount(undefined);
          var setup = function (param) {
            return LongShortSmocked.InternalMock.setup(contracts.contents.longShort);
          };
          describe("redeemLongNextPrice", (function () {
                  it("calls _redeemNextPrice with isLong==true", (function () {
                          return LetOps.Await.let_(setup(undefined), (function (param) {
                                        return LetOps.Await.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.longShort, "redeemLongNextPrice"), (function (param) {
                                                      return LetOps.Await.let_(contracts.contents.longShort.redeemLongNextPrice(1, tokens_redeem), (function (param) {
                                                                    var redeemNextPriceCalls = LongShortSmocked.InternalMock._redeemNextPriceCalls(undefined);
                                                                    return Chai.recordArrayDeepEqualFlat(undefined, redeemNextPriceCalls, [{
                                                                                  marketIndex: 1,
                                                                                  tokens_redeem: tokens_redeem,
                                                                                  isLong: true
                                                                                }]);
                                                                  }));
                                                    }));
                                      }));
                        }));
                  
                }));
          describe("redeemShortNextPrice", (function () {
                  it("calls _redeemNextPrice with isLong==false", (function () {
                          return LetOps.Await.let_(setup(undefined), (function (param) {
                                        return LetOps.Await.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.longShort, "redeemShortNextPrice"), (function (param) {
                                                      return LetOps.Await.let_(contracts.contents.longShort.redeemShortNextPrice(1, tokens_redeem), (function (param) {
                                                                    var redeemNextPriceCalls = LongShortSmocked.InternalMock._redeemNextPriceCalls(undefined);
                                                                    return Chai.recordArrayDeepEqualFlat(undefined, redeemNextPriceCalls, [{
                                                                                  marketIndex: 1,
                                                                                  tokens_redeem: tokens_redeem,
                                                                                  isLong: false
                                                                                }]);
                                                                  }));
                                                    }));
                                      }));
                        }));
                  
                }));
          
        }));
  describe("redeemNextPrice internal function", (function () {
          var marketUpdateIndex = Helpers.randomInteger(undefined);
          var amount = Helpers.randomTokenAmount(undefined);
          var smockedSyntheticToken = {
            contents: undefined
          };
          var setup = function (isLong, testWallet) {
            var match = contracts.contents.markets[0];
            return LetOps.AwaitThen.let_(Smock.smockit(match.longSynth), (function (longSynthSmocked) {
                          SyntheticTokenSmocked.mockTransferFromToReturn(longSynthSmocked, true);
                          smockedSyntheticToken.contents = longSynthSmocked;
                          return LetOps.AwaitThen.let_(LongShortSmocked.InternalMock.setup(contracts.contents.longShort), (function (param) {
                                        return LetOps.AwaitThen.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.longShort, "_redeemNextPrice"), (function (param) {
                                                      return LetOps.AwaitThen.let_(contracts.contents.longShort.setRedeemNextPriceGlobals(1, marketUpdateIndex, longSynthSmocked.address, isLong), (function (param) {
                                                                    var longShort = contracts.contents.longShort.connect(testWallet);
                                                                    return longShort._redeemNextPriceExposed(1, amount, isLong);
                                                                  }));
                                                    }));
                                      }));
                        }));
          };
          var testMarketSide = function (isLong) {
            it("calls the executeOutstandingNextPriceSettlements modifier", (function () {
                    var testWallet = accounts.contents[1];
                    return LetOps.Await.let_(setup(isLong, testWallet), (function (param) {
                                  var executeOutstandingNextPriceSettlementsCalls = LongShortSmocked.InternalMock._executeOutstandingNextPriceSettlementsCalls(undefined);
                                  return Chai.recordArrayDeepEqualFlat(undefined, executeOutstandingNextPriceSettlementsCalls, [{
                                                user: testWallet.address,
                                                marketIndex: 1
                                              }]);
                                }));
                  }));
            it("emits the NextPriceRedeem event", (function () {
                    var testWallet = accounts.contents[1];
                    return Chai.callEmitEvents(setup(isLong, testWallet), contracts.contents.longShort, "NextPriceRedeem").withArgs(1, isLong, amount, testWallet.address, Globals.add(marketUpdateIndex, Globals.oneBn));
                  }));
            it("transfers synthetic tokens (calls transferFrom with the correct parameters)", (function () {
                    var testWallet = accounts.contents[1];
                    return LetOps.Await.let_(setup(isLong, testWallet), (function (param) {
                                  var transferFromCalls = SyntheticTokenSmocked.transferFromCalls(smockedSyntheticToken.contents);
                                  return Chai.recordArrayDeepEqualFlat(undefined, transferFromCalls, [{
                                                sender: testWallet.address,
                                                recipient: contracts.contents.longShort.address,
                                                amount: amount
                                              }]);
                                }));
                  }));
            it("updates the correct state variables with correct values", (function () {
                    var testWallet = accounts.contents[1];
                    return LetOps.AwaitThen.let_(setup(isLong, testWallet), (function (param) {
                                  return LetOps.AwaitThen.let_(contracts.contents.longShort.batched_amountSyntheticToken_redeem(1, isLong), (function (updatedbatched_amountSyntheticToken_redeem) {
                                                return LetOps.AwaitThen.let_(contracts.contents.longShort.userNextPrice_syntheticToken_redeemAmount(1, isLong, testWallet.address), (function (updatedUserNextPriceRedemptionAmount) {
                                                              return LetOps.Await.let_(contracts.contents.longShort.userNextPrice_currentUpdateIndex(1, testWallet.address), (function (updateduserNextPrice_currentUpdateIndex) {
                                                                            Chai.bnEqual("batched_amountSyntheticToken_redeem not updated correctly", updatedbatched_amountSyntheticToken_redeem, amount);
                                                                            Chai.bnEqual("userNextPriceRedemptionAmount not updated correctly", updatedUserNextPriceRedemptionAmount, amount);
                                                                            return Chai.bnEqual("userNextPrice_currentUpdateIndex not updated correctly", updateduserNextPrice_currentUpdateIndex, Globals.add(marketUpdateIndex, Globals.oneBn));
                                                                          }));
                                                            }));
                                              }));
                                }));
                  }));
            
          };
          describe("long", (function () {
                  return testMarketSide(true);
                }));
          describe("short", (function () {
                  return testMarketSide(false);
                }));
          
        }));
  
}

exports.testIntegration = testIntegration;
exports.testUnit = testUnit;
/* Chai Not a pure module */
