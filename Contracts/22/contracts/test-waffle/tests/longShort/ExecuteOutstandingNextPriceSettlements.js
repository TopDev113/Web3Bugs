// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");

function testUnit(contracts, param) {
  describe("executeOutstandingNextPriceSettlements", (function () {
          var user = Helpers.randomAddress(undefined);
          var defaultuserNextPrice_currentUpdateIndex = Globals.bnFromInt(22);
          var defaultMarketUpdateIndex = Globals.add(defaultuserNextPrice_currentUpdateIndex, Globals.oneBn);
          var setup = function (userNextPrice_currentUpdateIndex, marketUpdateIndex) {
            return LetOps.AwaitThen.let_(LongShortSmocked.InternalMock.setup(contracts.contents.longShort), (function (param) {
                          return LetOps.AwaitThen.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.longShort, "_executeOutstandingNextPriceSettlements"), (function (param) {
                                        return LetOps.AwaitThen.let_(contracts.contents.longShort.setExecuteOutstandingNextPriceSettlementsGlobals(1, user, userNextPrice_currentUpdateIndex, marketUpdateIndex), (function (param) {
                                                      return contracts.contents.longShort._executeOutstandingNextPriceSettlementsExposed(user, 1);
                                                    }));
                                      }));
                        }));
          };
          describe("happy case", (function () {
                  Globals.before_once$p(function (param) {
                        return setup(defaultuserNextPrice_currentUpdateIndex, defaultMarketUpdateIndex);
                      });
                  it("calls nextPriceMint/nextPriceRedeem functions with correct arguments", (function () {
                          var executeOutstandingNextPriceMintsCalls = LongShortSmocked.InternalMock._executeOutstandingNextPriceMintsCalls(undefined);
                          var executeOutstandingNextPriceRedeemCalls = LongShortSmocked.InternalMock._executeOutstandingNextPriceRedeemsCalls(undefined);
                          Chai.intEqual(undefined, executeOutstandingNextPriceMintsCalls.length, 2);
                          Chai.intEqual(undefined, executeOutstandingNextPriceRedeemCalls.length, 2);
                          Chai.recordArrayDeepEqualFlat(undefined, executeOutstandingNextPriceMintsCalls, [
                                {
                                  marketIndex: 1,
                                  user: user,
                                  isLong: true
                                },
                                {
                                  marketIndex: 1,
                                  user: user,
                                  isLong: false
                                }
                              ]);
                          return Chai.recordArrayDeepEqualFlat(undefined, executeOutstandingNextPriceRedeemCalls, [
                                      {
                                        marketIndex: 1,
                                        user: user,
                                        isLong: true
                                      },
                                      {
                                        marketIndex: 1,
                                        user: user,
                                        isLong: false
                                      }
                                    ]);
                        }));
                  it("sets userNextPrice_currentUpdateIndex[marketIndex][user] to 0", (function () {
                          return LetOps.Await.let_(contracts.contents.longShort.userNextPrice_currentUpdateIndex(1, user), (function (updateduserNextPrice_currentUpdateIndex) {
                                        return Chai.bnEqual(undefined, updateduserNextPrice_currentUpdateIndex, Globals.zeroBn);
                                      }));
                        }));
                  it("emits ExecuteNextPriceSettlementsUser event with correct parameters", (function () {
                          return Chai.callEmitEvents(setup(defaultuserNextPrice_currentUpdateIndex, defaultMarketUpdateIndex), contracts.contents.longShort, "ExecuteNextPriceSettlementsUser").withArgs(user, 1);
                        }));
                  
                }));
          describe("sad cases", (function () {
                  it("doesn't emit ExecuteNextPriceSettlementsUser event if userNextPrice_currentUpdateIndex[marketIndex][user] = 0", (function () {
                          return Chai.expectToNotEmit(Chai.callEmitEvents(setup(Globals.bnFromInt(0), defaultMarketUpdateIndex), contracts.contents.longShort, "ExecuteNextPriceSettlementsUser"));
                        }));
                  it("doesn't call nextPriceMint/nextPriceRedeem functions if userNextPrice_currentUpdateIndex[marketIndex][user] = 0", (function () {
                          return LetOps.Await.let_(setup(Globals.bnFromInt(0), defaultMarketUpdateIndex), (function (param) {
                                        var executeOutstandingNextPriceMintsCalls = LongShortSmocked.InternalMock._executeOutstandingNextPriceMintsCalls(undefined);
                                        var executeOutstandingNextPriceRedeemCalls = LongShortSmocked.InternalMock._executeOutstandingNextPriceRedeemsCalls(undefined);
                                        Chai.intEqual(undefined, executeOutstandingNextPriceMintsCalls.length, 0);
                                        return Chai.intEqual(undefined, executeOutstandingNextPriceRedeemCalls.length, 0);
                                      }));
                        }));
                  it("doesn't emit ExecuteNextPriceSettlementsUser event if userNextPrice_currentUpdateIndex[marketIndex][user] > marketUpdateIndex[marketIndex]", (function () {
                          return Chai.expectToNotEmit(Chai.callEmitEvents(setup(defaultuserNextPrice_currentUpdateIndex, Globals.sub(defaultuserNextPrice_currentUpdateIndex, Globals.oneBn)), contracts.contents.longShort, "ExecuteNextPriceSettlementsUser"));
                        }));
                  it("doesn't call nextPriceMint/nextPriceRedeem functions if userNextPrice_currentUpdateIndex[marketIndex][user] > marketUpdateIndex[marketIndex]", (function () {
                          return LetOps.Await.let_(setup(defaultuserNextPrice_currentUpdateIndex, Globals.sub(defaultuserNextPrice_currentUpdateIndex, Globals.oneBn)), (function (param) {
                                        var executeOutstandingNextPriceMintsCalls = LongShortSmocked.InternalMock._executeOutstandingNextPriceMintsCalls(undefined);
                                        var executeOutstandingNextPriceRedeemCalls = LongShortSmocked.InternalMock._executeOutstandingNextPriceRedeemsCalls(undefined);
                                        Chai.intEqual(undefined, executeOutstandingNextPriceMintsCalls.length, 0);
                                        return Chai.intEqual(undefined, executeOutstandingNextPriceRedeemCalls.length, 0);
                                      }));
                        }));
                  
                }));
          
        }));
  
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
