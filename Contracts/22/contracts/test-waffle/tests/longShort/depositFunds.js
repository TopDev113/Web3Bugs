// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Helpers = require("../../library/Helpers.js");
var ERC20MockSmocked = require("../../library/smock/ERC20MockSmocked.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");
var Smock = require("@eth-optimism/smock");

function testUnit(contracts, accounts) {
  describe("depositing funds", (function () {
          var amount = Helpers.randomTokenAmount(undefined);
          describe("_transferPaymentTokensFromUserToYieldManager", (function () {
                  var paymentTokenSmocked = {
                    contents: undefined
                  };
                  var testYieldManager = Helpers.randomAddress(undefined);
                  var setup = function (testWallet) {
                    var match = contracts.contents.markets[0];
                    var paymentToken = match.paymentToken;
                    return LetOps.Await.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.longShort, "_transferPaymentTokensFromUserToYieldManager"), (function (param) {
                                  return LetOps.AwaitThen.let_(Smock.smockit(paymentToken), (function (smockedPaymentToken) {
                                                ERC20MockSmocked.mockTransferFromToReturn(smockedPaymentToken, true);
                                                paymentTokenSmocked.contents = smockedPaymentToken;
                                                return LetOps.AwaitThen.let_(contracts.contents.longShort.setDepositFundsGlobals(1, smockedPaymentToken.address, testYieldManager), (function (param) {
                                                              var longShort = contracts.contents.longShort.connect(testWallet);
                                                              return longShort._transferPaymentTokensFromUserToYieldManagerExposed(1, amount);
                                                            }));
                                              }));
                                }));
                  };
                  it("calls paymentToken.transferFrom with correct arguments", (function () {
                          var testWallet = accounts.contents[1];
                          return LetOps.Await.let_(setup(testWallet), (function (param) {
                                        var transferFromCalls = ERC20MockSmocked.transferFromCalls(paymentTokenSmocked.contents);
                                        return Chai.recordArrayDeepEqualFlat(undefined, transferFromCalls, [{
                                                      sender: testWallet.address,
                                                      recipient: testYieldManager,
                                                      amount: amount
                                                    }]);
                                      }));
                        }));
                  
                }));
          
        }));
  
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
