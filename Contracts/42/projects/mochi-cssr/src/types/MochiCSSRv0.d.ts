/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MochiCSSRv0Interface extends ethers.utils.Interface {
  functions: {
    "adapter(address)": FunctionFragment;
    "blueChip(address)": FunctionFragment;
    "defaultLiquiditySource()": FunctionFragment;
    "defaultPriceSource()": FunctionFragment;
    "delistAdapter(address)": FunctionFragment;
    "fiatPriceAdapter()": FunctionFragment;
    "getLiquidity(address)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "lastPrice(address)": FunctionFragment;
    "liquiditySource(address)": FunctionFragment;
    "listAdapter(address)": FunctionFragment;
    "owned()": FunctionFragment;
    "priceSource(address)": FunctionFragment;
    "removeBluechip(address[])": FunctionFragment;
    "setBluechip(address[])": FunctionFragment;
    "setDefaultLiquiditySource(address)": FunctionFragment;
    "setDefaultPriceSource(address)": FunctionFragment;
    "setFiatPriceAdapter(address)": FunctionFragment;
    "setLiquiditySource(address,address[])": FunctionFragment;
    "setPriceSource(address,address[])": FunctionFragment;
    "update(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adapter", values: [string]): string;
  encodeFunctionData(functionFragment: "blueChip", values: [string]): string;
  encodeFunctionData(
    functionFragment: "defaultLiquiditySource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPriceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delistAdapter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fiatPriceAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "lastPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquiditySource",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "listAdapter", values: [string]): string;
  encodeFunctionData(functionFragment: "owned", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceSource", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeBluechip",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBluechip",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultLiquiditySource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultPriceSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFiatPriceAdapter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquiditySource",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSource",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "adapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blueChip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultLiquiditySource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fiatPriceAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquiditySource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBluechip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBluechip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultLiquiditySource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFiatPriceAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquiditySource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class MochiCSSRv0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MochiCSSRv0Interface;

  functions: {
    adapter(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    blueChip(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    defaultLiquiditySource(overrides?: CallOverrides): Promise<[string]>;

    defaultPriceSource(overrides?: CallOverrides): Promise<[string]>;

    delistAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fiatPriceAdapter(overrides?: CallOverrides): Promise<[string]>;

    getLiquidity(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    lastPrice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    liquiditySource(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    listAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owned(overrides?: CallOverrides): Promise<[string]>;

    priceSource(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    removeBluechip(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBluechip(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultLiquiditySource(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultPriceSource(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFiatPriceAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquiditySource(
      _adapter: string,
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceSource(
      _adapter: string,
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      _asset: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  adapter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  blueChip(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  defaultLiquiditySource(overrides?: CallOverrides): Promise<string>;

  defaultPriceSource(overrides?: CallOverrides): Promise<string>;

  delistAdapter(
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fiatPriceAdapter(overrides?: CallOverrides): Promise<string>;

  getLiquidity(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  lastPrice(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  liquiditySource(arg0: string, overrides?: CallOverrides): Promise<string>;

  listAdapter(
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owned(overrides?: CallOverrides): Promise<string>;

  priceSource(arg0: string, overrides?: CallOverrides): Promise<string>;

  removeBluechip(
    _assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBluechip(
    _assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultLiquiditySource(
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultPriceSource(
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFiatPriceAdapter(
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquiditySource(
    _adapter: string,
    _assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceSource(
    _adapter: string,
    _assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    _asset: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adapter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    blueChip(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    defaultLiquiditySource(overrides?: CallOverrides): Promise<string>;

    defaultPriceSource(overrides?: CallOverrides): Promise<string>;

    delistAdapter(_adapter: string, overrides?: CallOverrides): Promise<void>;

    fiatPriceAdapter(overrides?: CallOverrides): Promise<string>;

    getLiquidity(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    lastPrice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    liquiditySource(arg0: string, overrides?: CallOverrides): Promise<string>;

    listAdapter(_adapter: string, overrides?: CallOverrides): Promise<void>;

    owned(overrides?: CallOverrides): Promise<string>;

    priceSource(arg0: string, overrides?: CallOverrides): Promise<string>;

    removeBluechip(_assets: string[], overrides?: CallOverrides): Promise<void>;

    setBluechip(_assets: string[], overrides?: CallOverrides): Promise<void>;

    setDefaultLiquiditySource(
      _adapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultPriceSource(
      _adapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFiatPriceAdapter(
      _adapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquiditySource(
      _adapter: string,
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSource(
      _adapter: string,
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      _asset: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    adapter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    blueChip(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    defaultLiquiditySource(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPriceSource(overrides?: CallOverrides): Promise<BigNumber>;

    delistAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fiatPriceAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastPrice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquiditySource(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owned(overrides?: CallOverrides): Promise<BigNumber>;

    priceSource(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeBluechip(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBluechip(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultLiquiditySource(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultPriceSource(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFiatPriceAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquiditySource(
      _adapter: string,
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceSource(
      _adapter: string,
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      _asset: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adapter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blueChip(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultLiquiditySource(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultPriceSource(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fiatPriceAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidity(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPrice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquiditySource(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceSource(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBluechip(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBluechip(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultLiquiditySource(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultPriceSource(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFiatPriceAdapter(
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquiditySource(
      _adapter: string,
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSource(
      _adapter: string,
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      _asset: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
