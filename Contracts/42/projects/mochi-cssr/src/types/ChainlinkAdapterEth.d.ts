/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ChainlinkAdapterEthInterface extends ethers.utils.Interface {
  functions: {
    "feed(address)": FunctionFragment;
    "getLiquidity(address)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "owned()": FunctionFragment;
    "setFeed(address[],address[])": FunctionFragment;
    "support(address)": FunctionFragment;
    "update(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "feed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "owned", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFeed",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "support", values: [string]): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "feed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "support", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class ChainlinkAdapterEth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChainlinkAdapterEthInterface;

  functions: {
    feed(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getLiquidity(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    owned(overrides?: CallOverrides): Promise<[string]>;

    setFeed(
      _assets: string[],
      _feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    support(_asset: string, overrides?: CallOverrides): Promise<[boolean]>;

    update(
      _asset: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  feed(arg0: string, overrides?: CallOverrides): Promise<string>;

  getLiquidity(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  owned(overrides?: CallOverrides): Promise<string>;

  setFeed(
    _assets: string[],
    _feeds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  support(_asset: string, overrides?: CallOverrides): Promise<boolean>;

  update(
    _asset: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feed(arg0: string, overrides?: CallOverrides): Promise<string>;

    getLiquidity(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    owned(overrides?: CallOverrides): Promise<string>;

    setFeed(
      _assets: string[],
      _feeds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    support(_asset: string, overrides?: CallOverrides): Promise<boolean>;

    update(
      _asset: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    feed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    owned(overrides?: CallOverrides): Promise<BigNumber>;

    setFeed(
      _assets: string[],
      _feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    support(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    update(
      _asset: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeed(
      _assets: string[],
      _feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    support(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      _asset: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
