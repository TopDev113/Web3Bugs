/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MochiTreasuryV0Interface extends ethers.utils.Interface {
  functions: {
    "claimOperationCost()": FunctionFragment;
    "crv()": FunctionFragment;
    "engine()": FunctionFragment;
    "lockCrv()": FunctionFragment;
    "operationShare()": FunctionFragment;
    "toggleLocking()": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "updateFee()": FunctionFragment;
    "veCRVInitialize()": FunctionFragment;
    "veCRVShare()": FunctionFragment;
    "veCRVlock()": FunctionFragment;
    "veCrv()": FunctionFragment;
    "withdrawCRV()": FunctionFragment;
    "withdrawLock()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimOperationCost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crv", values?: undefined): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockCrv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operationShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleLocking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "updateFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "veCRVInitialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "veCRVShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "veCRVlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "veCrv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCRV",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLock",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimOperationCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operationShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleLocking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "veCRVInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "veCRVShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veCRVlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCRV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLock",
    data: BytesLike
  ): Result;

  events: {};
}

export class MochiTreasuryV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MochiTreasuryV0Interface;

  functions: {
    claimOperationCost(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crv(overrides?: CallOverrides): Promise<[string]>;

    engine(overrides?: CallOverrides): Promise<[string]>;

    lockCrv(overrides?: CallOverrides): Promise<[boolean]>;

    operationShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    toggleLocking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    updateFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    veCRVInitialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    veCRVShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    veCRVlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    veCrv(overrides?: CallOverrides): Promise<[string]>;

    withdrawCRV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimOperationCost(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crv(overrides?: CallOverrides): Promise<string>;

  engine(overrides?: CallOverrides): Promise<string>;

  lockCrv(overrides?: CallOverrides): Promise<boolean>;

  operationShare(overrides?: CallOverrides): Promise<BigNumber>;

  toggleLocking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  updateFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  veCRVInitialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  veCRVShare(overrides?: CallOverrides): Promise<BigNumber>;

  veCRVlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  veCrv(overrides?: CallOverrides): Promise<string>;

  withdrawCRV(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimOperationCost(overrides?: CallOverrides): Promise<void>;

    crv(overrides?: CallOverrides): Promise<string>;

    engine(overrides?: CallOverrides): Promise<string>;

    lockCrv(overrides?: CallOverrides): Promise<boolean>;

    operationShare(overrides?: CallOverrides): Promise<BigNumber>;

    toggleLocking(overrides?: CallOverrides): Promise<void>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    updateFee(overrides?: CallOverrides): Promise<void>;

    veCRVInitialize(overrides?: CallOverrides): Promise<void>;

    veCRVShare(overrides?: CallOverrides): Promise<BigNumber>;

    veCRVlock(overrides?: CallOverrides): Promise<void>;

    veCrv(overrides?: CallOverrides): Promise<string>;

    withdrawCRV(overrides?: CallOverrides): Promise<void>;

    withdrawLock(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    claimOperationCost(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crv(overrides?: CallOverrides): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<BigNumber>;

    lockCrv(overrides?: CallOverrides): Promise<BigNumber>;

    operationShare(overrides?: CallOverrides): Promise<BigNumber>;

    toggleLocking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    updateFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    veCRVInitialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    veCRVShare(overrides?: CallOverrides): Promise<BigNumber>;

    veCRVlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    veCrv(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCRV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimOperationCost(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    engine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operationShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleLocking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    veCRVInitialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    veCRVShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veCRVlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    veCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCRV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
