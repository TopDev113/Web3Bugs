/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VestedRewardPoolInterface extends ethers.utils.Interface {
  functions: {
    "claim()": FunctionFragment;
    "forceClaim(uint256)": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "mochi()": FunctionFragment;
    "mochiUnderManagement()": FunctionFragment;
    "vMochi()": FunctionFragment;
    "vest(address)": FunctionFragment;
    "vesting(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "mochi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mochiUnderManagement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vMochi", values?: undefined): string;
  encodeFunctionData(functionFragment: "vest", values: [string]): string;
  encodeFunctionData(functionFragment: "vesting", values: [string]): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forceClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mochi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mochiUnderManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vMochi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vesting", data: BytesLike): Result;

  events: {};
}

export class VestedRewardPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VestedRewardPoolInterface;

  functions: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceClaim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mochi(overrides?: CallOverrides): Promise<[string]>;

    mochiUnderManagement(overrides?: CallOverrides): Promise<[BigNumber]>;

    vMochi(overrides?: CallOverrides): Promise<[string]>;

    vest(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vesting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        vested: BigNumber;
        ends: BigNumber;
        claimable: BigNumber;
      }
    >;
  };

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceClaim(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mochi(overrides?: CallOverrides): Promise<string>;

  mochiUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

  vMochi(overrides?: CallOverrides): Promise<string>;

  vest(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vesting(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      vested: BigNumber;
      ends: BigNumber;
      claimable: BigNumber;
    }
  >;

  callStatic: {
    claim(overrides?: CallOverrides): Promise<void>;

    forceClaim(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lock(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mochi(overrides?: CallOverrides): Promise<string>;

    mochiUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

    vMochi(overrides?: CallOverrides): Promise<string>;

    vest(_recipient: string, overrides?: CallOverrides): Promise<void>;

    vesting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        vested: BigNumber;
        ends: BigNumber;
        claimable: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceClaim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mochi(overrides?: CallOverrides): Promise<BigNumber>;

    mochiUnderManagement(overrides?: CallOverrides): Promise<BigNumber>;

    vMochi(overrides?: CallOverrides): Promise<BigNumber>;

    vest(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vesting(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceClaim(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mochi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mochiUnderManagement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vMochi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vest(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vesting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
