/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Beacon, BeaconInterface } from "../Beacon";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161010638038061010683398101604081905261002f9161005b565b600080546001600160a01b0319166001600160a01b03929092169190911790553360601b60805261008b565b60006020828403121561006d57600080fd5b81516001600160a01b038116811461008457600080fd5b9392505050565b60805160601c60606100a66000396000601b015260606000f3fe6080604052348015600f57600080fd5b50336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614604b5760005460005260206000f35b60003560005500fea164736f6c6343000807000a";

export class Beacon__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    impl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Beacon> {
    return super.deploy(impl, overrides || {}) as Promise<Beacon>;
  }
  getDeployTransaction(
    impl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(impl, overrides || {});
  }
  attach(address: string): Beacon {
    return super.attach(address) as Beacon;
  }
  connect(signer: Signer): Beacon__factory {
    return super.connect(signer) as Beacon__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BeaconInterface {
    return new utils.Interface(_abi) as BeaconInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Beacon {
    return new Contract(address, _abi, signerOrProvider) as Beacon;
  }
}
