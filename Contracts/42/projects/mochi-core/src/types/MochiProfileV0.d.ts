/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MochiProfileV0Interface extends ethers.utils.Interface {
  functions: {
    "assetClass(address)": FunctionFragment;
    "baseFee()": FunctionFragment;
    "calculateFeeIndex(address,uint256,uint256)": FunctionFragment;
    "changeAssetClass(address[],uint8[])": FunctionFragment;
    "changeCreditCap(address[],uint256[])": FunctionFragment;
    "changeLiquidityRequirement(uint256)": FunctionFragment;
    "changeMinimumDebt(uint256)": FunctionFragment;
    "creditCap(address)": FunctionFragment;
    "delay()": FunctionFragment;
    "engine()": FunctionFragment;
    "keeperFee(address)": FunctionFragment;
    "liquidationFactor(address)": FunctionFragment;
    "liquidationFee(address)": FunctionFragment;
    "liquidityRequirement()": FunctionFragment;
    "maxCollateralFactor(address)": FunctionFragment;
    "maxFee(uint8)": FunctionFragment;
    "minimumDebt()": FunctionFragment;
    "registerAsset(address)": FunctionFragment;
    "registerAssetByGov(address[],uint8[])": FunctionFragment;
    "riskFactor(address)": FunctionFragment;
    "secPerYear()": FunctionFragment;
    "setDelay(uint256)": FunctionFragment;
    "stabilityFee(address)": FunctionFragment;
    "utilizationRatio(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "assetClass", values: [string]): string;
  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateFeeIndex",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAssetClass",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCreditCap",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLiquidityRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinimumDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "creditCap", values: [string]): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(functionFragment: "keeperFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidationFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCollateralFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAssetByGov",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "riskFactor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "secPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "utilizationRatio",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "assetClass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateFeeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAssetClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCreditCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLiquidityRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinimumDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creditCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeperFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAssetByGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "riskFactor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "secPerYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stabilityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilizationRatio",
    data: BytesLike
  ): Result;

  events: {};
}

export class MochiProfileV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MochiProfileV0Interface;

  functions: {
    assetClass(_asset: string, overrides?: CallOverrides): Promise<[number]>;

    baseFee(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    calculateFeeIndex(
      _asset: string,
      _currentIndex: BigNumberish,
      _lastAccrued: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeAssetClass(
      _assets: string[],
      _classes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeCreditCap(
      _assets: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLiquidityRequirement(
      _requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinimumDebt(
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditCap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    engine(overrides?: CallOverrides): Promise<[string]>;

    keeperFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    liquidationFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    liquidationFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    liquidityRequirement(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxCollateralFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    maxFee(
      _class: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    minimumDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAssetByGov(
      _asset: string[],
      _classes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    riskFactor(_asset: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    secPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stabilityFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ]
    >;

    utilizationRatio(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        }
      ] & {
        ratio: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
      }
    >;
  };

  assetClass(_asset: string, overrides?: CallOverrides): Promise<number>;

  baseFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  calculateFeeIndex(
    _asset: string,
    _currentIndex: BigNumberish,
    _lastAccrued: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeAssetClass(
    _assets: string[],
    _classes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeCreditCap(
    _assets: string[],
    _caps: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLiquidityRequirement(
    _requirement: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinimumDebt(
    _debt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditCap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  engine(overrides?: CallOverrides): Promise<string>;

  keeperFee(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  liquidationFactor(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  liquidationFee(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  liquidityRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  maxCollateralFactor(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  maxFee(
    _class: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  minimumDebt(overrides?: CallOverrides): Promise<BigNumber>;

  registerAsset(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAssetByGov(
    _asset: string[],
    _classes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  riskFactor(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  secPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  setDelay(
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stabilityFee(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  utilizationRatio(
    _asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  callStatic: {
    assetClass(_asset: string, overrides?: CallOverrides): Promise<number>;

    baseFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    calculateFeeIndex(
      _asset: string,
      _currentIndex: BigNumberish,
      _lastAccrued: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeAssetClass(
      _assets: string[],
      _classes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeCreditCap(
      _assets: string[],
      _caps: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeLiquidityRequirement(
      _requirement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinimumDebt(
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creditCap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<string>;

    keeperFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    liquidationFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    liquidationFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    liquidityRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    maxCollateralFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    maxFee(
      _class: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    minimumDebt(overrides?: CallOverrides): Promise<BigNumber>;

    registerAsset(_asset: string, overrides?: CallOverrides): Promise<void>;

    registerAssetByGov(
      _asset: string[],
      _classes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    riskFactor(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    secPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    setDelay(_delay: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stabilityFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    utilizationRatio(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    assetClass(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFeeIndex(
      _asset: string,
      _currentIndex: BigNumberish,
      _lastAccrued: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeAssetClass(
      _assets: string[],
      _classes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeCreditCap(
      _assets: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLiquidityRequirement(
      _requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinimumDebt(
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditCap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<BigNumber>;

    keeperFee(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidationFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    maxCollateralFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFee(_class: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    minimumDebt(overrides?: CallOverrides): Promise<BigNumber>;

    registerAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAssetByGov(
      _asset: string[],
      _classes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    riskFactor(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    secPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    setDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stabilityFee(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    utilizationRatio(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetClass(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateFeeIndex(
      _asset: string,
      _currentIndex: BigNumberish,
      _lastAccrued: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeAssetClass(
      _assets: string[],
      _classes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeCreditCap(
      _assets: string[],
      _caps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLiquidityRequirement(
      _requirement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinimumDebt(
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    engine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeperFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCollateralFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFee(
      _class: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAsset(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAssetByGov(
      _asset: string[],
      _classes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    riskFactor(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stabilityFee(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    utilizationRatio(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
