/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DutchAuctionLiquidatorInterface extends ethers.utils.Interface {
  functions: {
    "DURATION()": FunctionFragment;
    "auctionId(address,uint256)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "currentLiquidationFee(uint256)": FunctionFragment;
    "engine()": FunctionFragment;
    "price(uint256)": FunctionFragment;
    "triggerLiquidation(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DURATION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "currentLiquidationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "triggerLiquidation",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DURATION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctionId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "triggerLiquidation",
    data: BytesLike
  ): Result;

  events: {
    "Settled(uint256,uint256)": EventFragment;
    "Triggered(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Settled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Triggered"): EventFragment;
}

export class DutchAuctionLiquidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DutchAuctionLiquidatorInterface;

  functions: {
    DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionId(
      asset: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        nftId: BigNumber;
        vault: string;
        startedAt: BigNumber;
        boughtAt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
      }
    >;

    buy(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentLiquidationFee(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidationFee: BigNumber }>;

    engine(overrides?: CallOverrides): Promise<[string]>;

    price(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    triggerLiquidation(
      _asset: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  auctionId(
    asset: string,
    nftId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      nftId: BigNumber;
      vault: string;
      startedAt: BigNumber;
      boughtAt: BigNumber;
      collateral: BigNumber;
      debt: BigNumber;
    }
  >;

  buy(
    _auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentLiquidationFee(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  engine(overrides?: CallOverrides): Promise<string>;

  price(
    _auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  triggerLiquidation(
    _asset: string,
    _nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    auctionId(
      asset: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        nftId: BigNumber;
        vault: string;
        startedAt: BigNumber;
        boughtAt: BigNumber;
        collateral: BigNumber;
        debt: BigNumber;
      }
    >;

    buy(_auctionId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    currentLiquidationFee(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<string>;

    price(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerLiquidation(
      _asset: string,
      _nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Settled(
      _auctionId?: null,
      _price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _auctionId: BigNumber; _price: BigNumber }
    >;

    Triggered(
      _auctionId?: null,
      _price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _auctionId: BigNumber; _price: BigNumber }
    >;
  };

  estimateGas: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    auctionId(
      asset: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentLiquidationFee(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    engine(overrides?: CallOverrides): Promise<BigNumber>;

    price(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerLiquidation(
      _asset: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionId(
      asset: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentLiquidationFee(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    engine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(
      _auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggerLiquidation(
      _asset: string,
      _nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
