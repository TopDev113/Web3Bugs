syntax = "proto3";
package gravity.v1;

import "gogoproto/gogo.proto";
import "gravity/v1/types.proto";
import "gravity/v1/msgs.proto";
import "gravity/v1/batch.proto";
import "gravity/v1/attestation.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/althea-net/cosmos-gravity-bridge/module/x/gravity/types";

// Params represent the Gravity genesis and store parameters
// gravity_id:
// a random 32 byte value to prevent signature reuse, for example if the
// cosmos validators decided to use the same Ethereum keys for another chain
// also running Gravity we would not want it to be possible to play a deposit
// from chain A back on chain B's Gravity. This value IS USED ON ETHEREUM so
// it must be set in your genesis.json before launch and not changed after
// deploying Gravity

// contract_hash:
// the code hash of a known good version of the Gravity contract
// solidity code. This can be used to verify the correct version
// of the contract has been deployed. This is a reference value for
// goernance action only it is never read by any Gravity code

// bridge_ethereum_address:
// is address of the bridge contract on the Ethereum side, this is a
// reference value for governance only and is not actually used by any
// Gravity code

// bridge_chain_id:
// the unique identifier of the Ethereum chain, this is a reference value
// only and is not actually used by any Gravity code

// These reference values may be used by future Gravity client implemetnations
// to allow for saftey features or convenience features like the Gravity address
// in your relayer. A relayer would require a configured Gravity address if
// governance had not set the address on the chain it was relaying for.

// signed_valsets_window
// signed_batches_window
// signed_logiccall_window
// signed_claims_window

// These values represent the time in blocks that a validator has to submit
// a signature for a batch or valset, or to submit a claim for a particular
// attestation nonce. In the case of attestations this clock starts when the
// attestation is created, but only allows for slashing once the event has passed

// target_batch_timeout:

// This is the 'target' value for when batches time out, this is a target becuase
// Ethereum is a probabalistic chain and you can't say for sure what the block
// frequency is ahead of time.

// average_block_time
// average_ethereum_block_time

// These values are the average Cosmos block time and Ethereum block time repsectively
// and they are used to compute what the target batch timeout is. It is important that
// governance updates these in case of any major, prolonged change in the time it takes
// to produce a block

// slash_fraction_valset
// slash_fraction_batch
// slash_fraction_claim
// slash_fraction_conflicting_claim

// The slashing fractions for the various gravity related slashing conditions. The first three
// refer to not submitting a particular message, the third for submitting a different claim
// for the same Ethereum event
//
// unbond_slashing_valsets_window
//
// The unbond slashing valsets window is used to determine how many blocks after starting to unbond
// a validator needs to continue signing blocks. The goal of this paramater is that when a validator leaves
// the set, if their leaving creates enough change in the validator set to justify an update they will sign
// a validator set update for the Ethereum bridge that does not include themselves. Allowing us to remove them
// from the Ethereum bridge and replace them with the new set gracefully.
//
// valset_reward
//
// Valset rewards are the amount of tokens this chain issues to relayers of validator sets.
// These can be any ERC20 token in the bridge, but it's strongly advised that chains use only
// Cosmos originated tokens, which the bridge effectively mints on Ethereum. If you run out of
// the token you are using for validator set rewards valset updates will fail and the bridge
// will be vulnerable to highjacking. For these paramaters the zero values are special and indicate
// not to attempt any reward. This is the default for bootstrapping.
message Params {
  option (gogoproto.stringer) = false;

  string gravity_id                  = 1;
  string contract_source_hash        = 2;
  string bridge_ethereum_address     = 4;
  uint64 bridge_chain_id             = 5;
  uint64 signed_valsets_window       = 6;
  uint64 signed_batches_window       = 7;
  uint64 signed_logic_calls_window   = 8;
  uint64 target_batch_timeout        = 9;
  uint64 average_block_time          = 10;
  uint64 average_ethereum_block_time = 11;
  bytes  slash_fraction_valset       = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  bytes slash_fraction_batch = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  bytes slash_fraction_logic_call = 14 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  uint64 unbond_slashing_valsets_window = 15;
  bytes slash_fraction_bad_eth_signature = 16 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
  cosmos.base.v1beta1.Coin valset_reward = 17 [
    (gogoproto.nullable)   = false
  ];
}

// GenesisState struct
message GenesisState {
  Params                             params              = 1;
  uint64                             last_observed_nonce = 2;
  repeated Valset                    valsets             = 3;
  repeated MsgValsetConfirm          valset_confirms     = 4;
  repeated OutgoingTxBatch           batches             = 5;
  repeated MsgConfirmBatch           batch_confirms      = 6 [(gogoproto.nullable) = false];
  repeated OutgoingLogicCall         logic_calls         = 7;
  repeated MsgConfirmLogicCall       logic_call_confirms = 8 [(gogoproto.nullable) = false];
  repeated Attestation               attestations        = 9 [(gogoproto.nullable) = false];
  repeated MsgSetOrchestratorAddress delegate_keys       = 10;
  repeated ERC20ToDenom              erc20_to_denoms     = 11;
  repeated OutgoingTransferTx        unbatched_transfers = 12;
}
